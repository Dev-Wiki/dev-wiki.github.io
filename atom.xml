<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[DevWiki's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.devwiki.net//"/>
  <updated>2015-09-20T08:42:22.940Z</updated>
  <id>http://www.devwiki.net//</id>
  
  <author>
    <name><![CDATA[DevWiki]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android音乐播放模式切换-外放、听筒、耳机]]></title>
    <link href="http://www.devwiki.net/2015/09/20/Android-Music-Play-Mode/"/>
    <id>http://www.devwiki.net/2015/09/20/Android-Music-Play-Mode/</id>
    <published>2015-09-20T08:30:28.000Z</published>
    <updated>2015-09-20T08:42:22.940Z</updated>
    <content type="html"><![CDATA[<p>最近比较忙,好久都没有更新博客!</p>
<p>最近由于项目需求要做音乐播放模式的切换,经过好多次尝试,发现这里面满满的都是坑啊,所以就写一篇日志记录下来,也给大家分享下遇到的坑及解决办法.</p>
<a id="more"></a>
<h2 id="场景需求">场景需求</h2><p>在聊天场景中,收到对方语音时,用户可以选择外放播放,也可以选择插入耳机收听.更人性化一点当用户把手机靠近耳朵时屏幕关闭自动切换到听筒中播放,播放完毕后拿开手机屏幕自动点亮.比如微信就是如此.</p>
<h2 id="需求分析">需求分析</h2><p>从上面场景中我们可以得出我们需要的要点:</p>
<ol>
<li>播放模式切换:外放&lt;—-&gt;耳机</li>
<li>播放模式切换:外放&lt;—-&gt;听筒</li>
<li>屏幕操作:亮屏&lt;—-&gt;息屏&lt;—-&gt;亮屏</li>
</ol>
<h2 id="解决问题">解决问题</h2><p>从需求分析我们可以得出需要代码进行控制的有:</p>
<ol>
<li>音乐播放控制</li>
<li>外放,耳机,听筒之间的切换</li>
<li>屏幕的息屏与亮屏</li>
</ol>
<h3 id="音乐播放控制">音乐播放控制</h3><p>音乐播放控制最简单,直接使用<code>MediaPlayer</code>即可,为了更好地与界面代码分离以及更好控制音乐,这里写了一个控制类:<code>PlayerManager</code>,如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 音乐播放管理类</span><br><span class="line"> * Created by DevWiki on 2015/8/27 0027.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PlayerManager playerManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MediaPlayer mediaPlayer;</span><br><span class="line">    <span class="keyword">private</span> PlayCallback callback;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PlayerManager <span class="title">getManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (playerManager == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (PlayerManager.class)&#123;</span><br><span class="line">                playerManager = <span class="keyword">new</span> PlayerManager();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> playerManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">PlayerManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = MyApplication.getContext();</span><br><span class="line">        mediaPlayer = <span class="keyword">new</span> MediaPlayer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 播放回调接口</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PlayCallback</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 音乐准备完毕 */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onPrepared</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 音乐播放完成 */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 音乐停止播放 */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 播放音乐</span><br><span class="line">     * <span class="doctag">@param</span> path 音乐文件路径</span><br><span class="line">     * <span class="doctag">@param</span> callback 播放回调函数</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String path, <span class="keyword">final</span> PlayCallback callback)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filePath = path;</span><br><span class="line">        <span class="keyword">this</span>.callback = callback;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mediaPlayer.reset();</span><br><span class="line">            mediaPlayer.setDataSource(context, Uri.parse(path));</span><br><span class="line">            mediaPlayer.prepare();</span><br><span class="line">            mediaPlayer.setOnPreparedListener(<span class="keyword">new</span> MediaPlayer.OnPreparedListener() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrepared</span><span class="params">(MediaPlayer mp)</span> </span>&#123;</span><br><span class="line">                    callback.onPrepared();</span><br><span class="line">                    mediaPlayer.start();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 停止播放</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isPlaying())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mediaPlayer.stop();</span><br><span class="line">                callback.onStop();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 是否正在播放</span><br><span class="line">     * <span class="doctag">@return</span> 正在播放返回true,否则返回false</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPlaying</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mediaPlayer != <span class="keyword">null</span> &amp;&amp; mediaPlayer.isPlaying();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了方便获取<code>Context</code>,覆写了<code>Application</code>类如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * APP的Application</span><br><span class="line"> * Created by DevWiki on 2015/9/16 0016.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        context = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取APP的Context方便其他地方调用</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title">getContext</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="外放,耳机,听筒之间的切换">外放,耳机,听筒之间的切换</h3><p>在Android系统中是用AudioManager来管理播放模式的,通过<code>AudioManager.setMode()</code>方法来实现.</p>
<p>在<code>setMode()</code>方法中有以下几种对应不同的播放模式:</p>
<ul>
<li><code>MODE_NORMAL</code>: 普通模式,既不是铃声模式也不是通话模式</li>
<li><code>MODE_RINGTONE</code>:铃声模式</li>
<li><code>MODE_IN_CALL</code>:通话模式</li>
<li><code>MODE_IN_COMMUNICATION</code>:通信模式,包括音/视频,VoIP通话.(3.0加入的,与通话模式类似)</li>
</ul>
<p>其中:</p>
<p>播放音乐的对应的就是<code>MODE_NORMAL</code>, 如果使用外放播则调用<code>audioManager.setSpeakerphoneOn(true)</code>即可.</p>
<p>若使用耳机和听筒,则需要先设置模式为<code>MODE_IN_CALL</code>(3.0以前)或<code>MODE_IN_COMMUNICATION</code>(3.0以后).</p>
<p><strong>注意:</strong></p>
<p>需要权限<code>android.permission.MODIFY_AUDIO_SETTINGS</code></p>
<p>为什么在3.0以后设置模式为<code>MODE_IN_COMMUNICATION</code>,而不设置为<code>MODE_IN_CALL</code>?</p>
<blockquote>
<p>经验证在华为的某些机型中,设置<code>MODE_IN_CALL</code>根本不起作用.</p>
</blockquote>
<p>故在<code>PlayerManager</code>类中持有一个<code>AudioManager</code>变量,并添加如下几个方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">audioManager = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 切换到外放</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeToSpeaker</span><span class="params">()</span></span>&#123;</span><br><span class="line">    audioManager.setMode(AudioManager.MODE_NORMAL);</span><br><span class="line">    audioManager.setSpeakerphoneOn(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 切换到耳机模式</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeToHeadset</span><span class="params">()</span></span>&#123;</span><br><span class="line">    audioManager.setSpeakerphoneOn(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 切换到听筒</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeToReceiver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    audioManager.setSpeakerphoneOn(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB)&#123;</span><br><span class="line">        audioManager.setMode(AudioManager.MODE_IN_COMMUNICATION);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        audioManager.setMode(AudioManager.MODE_IN_CALL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如何判断用户是否插入耳机呢?</p>
<p>在插入或者拔出耳机时系统会发出Action为<code>Intent.ACTION_HEADSET_PLUG</code>的广播,并且该广播<strong>不能使用静态接收器处理</strong>,故写一个广播接收器处理耳机事件即可.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeadsetReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        String action = intent.getAction();</span><br><span class="line">        <span class="keyword">switch</span> (action)&#123;</span><br><span class="line">            <span class="comment">//插入和拔出耳机会触发此广播</span></span><br><span class="line">            <span class="keyword">case</span> Intent.ACTION_HEADSET_PLUG:</span><br><span class="line">                <span class="keyword">int</span> state = intent.getIntExtra(<span class="string">"state"</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (state == <span class="number">1</span>)&#123;</span><br><span class="line">                    playerManager.changeToHeadset();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == <span class="number">0</span>)&#123;</span><br><span class="line">                    playerManager.changeToSpeaker();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="屏幕的息屏与亮屏">屏幕的息屏与亮屏</h3><p>屏幕息屏与亮屏有个前提是正确判断用户是否靠近听筒,如何判断?</p>
<p>现在几乎每个手机都有距离感应器,通过举例感应器可获得距离.距离感应器由<code>SensorManager</code>管理:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);</span><br><span class="line">sensor = sensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);</span><br><span class="line">sensorManager.registerListener(<span class="keyword">this</span>, sensor, SensorManager.SENSOR_DELAY_NORMAL);</span><br></pre></td></tr></table></figure>
<p>注册监听的方法的最后一个参数是敏感度,敏感度越高越费电,此处选择一般敏感度即可.此外<code>Activity</code>还需实现<code>SensorEventListener</code>接口,覆写其方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSensorChanged</span><span class="params">(SensorEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> value = event.values[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (playerManager.isPlaying())&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == sensor.getMaximumRange()) &#123;</span><br><span class="line">            playerManager.changeToSpeaker();</span><br><span class="line">            setScreenOn();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            playerManager.changeToReceiver();</span><br><span class="line">            setScreenOff();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(value == sensor.getMaximumRange())&#123;</span><br><span class="line">            playerManager.changeToSpeaker();</span><br><span class="line">            setScreenOn();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Android系统中硬件的工作状态的控制由<code>PowerManager</code>与<code>WakeLock</code>掌管.<code>PowerManager</code>通过不同的<code>WakeLock</code>来控制CPU,屏幕,键盘等硬件的工作状态.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powerManager = (PowerManager) getSystemService(POWER_SERVICE);</span><br><span class="line">wakeLock = powerManager.newWakeLock(PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK, TAG);</span><br></pre></td></tr></table></figure>
<p>注意:需要权限<code>android.Manifest.permission.DEVICE_POWER</code>和<code>android.permission.WAKE_LOCK</code></p>
<p>其中第一个参数代表控制级别,可选值有:</p>
<ul>
<li>PARTIAL_WAKE_LOCK : CPU运行,屏幕和键盘可能关闭</li>
<li>SCREEN_DIM_WAKE_LOCK :　屏幕亮,键盘灯可能关闭</li>
<li>SCREEN_BRIGHT_WAKE_LOCK : 屏幕全亮,键盘灯可能关闭</li>
<li>FULL_WAKE_LOCK : 屏幕和键盘灯全亮</li>
<li>PROXIMITY_SCREEN_OFF_WAKE_LOCK : 屏幕关闭,键盘灯关闭,CPU运行</li>
<li>DOZE_WAKE_LOCK : 屏幕灰显,CPU延缓工作</li>
</ul>
<p>此处我们选取<code>PROXIMITY_SCREEN_OFF_WAKE_LOCK</code>.<code>WakeLock</code>通过<code>acquire()</code>和<code>release()</code>方法上锁和解锁.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setScreenOff</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (wakeLock == <span class="keyword">null</span>)&#123;</span><br><span class="line">        wakeLock = powerManager.newWakeLock(PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK, TAG);</span><br><span class="line">    &#125;</span><br><span class="line">    wakeLock.acquire();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setScreenOn</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (wakeLock != <span class="keyword">null</span>)&#123;</span><br><span class="line">        wakeLock.setReferenceCounted(<span class="keyword">false</span>);</span><br><span class="line">        wakeLock.release();</span><br><span class="line">        wakeLock = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="开始验证">开始验证</h2><p>通过以上三个解决方案,然后运行程序可知基本满足功能需求.但是有以下几个问题:</p>
<ol>
<li>耳机模式下用手遮挡距离感应器会切换到听筒</li>
<li>三星Note,华为P,华为Mate系列会出现外放切换到听筒,听筒切换到外放出现卡顿现象</li>
<li>耳机切换到外放会出现丢失语音</li>
<li>三星,华为手机在熄灭屏幕是会调用<code>Activity</code>的<code>onPause(),onStop()</code>方法!!</li>
</ol>
<h2 id="解决新问题">解决新问题</h2><h3 id="耳机模式用手遮挡距离感应器问题">耳机模式用手遮挡距离感应器问题</h3><p>此问题只需在耳机模式下对距离感应器不做响应即可,在<code>PlayerManager</code>中添加:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 耳机是否插入</span><br><span class="line"> * <span class="doctag">@return</span> 插入耳机返回true,否则返回false</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isWiredHeadsetOn</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> audioManager.isWiredHeadsetOn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后修改距离感应器回调方法为:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSensorChanged</span><span class="params">(SensorEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> value = event.values[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (playerManager.isWiredHeadsetOn())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (playerManager.isPlaying())&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == sensor.getMaximumRange()) &#123;</span><br><span class="line">            playerManager.changeToSpeaker();</span><br><span class="line">            setScreenOn();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            playerManager.changeToReceiver();</span><br><span class="line">            setScreenOff();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(value == sensor.getMaximumRange())&#123;</span><br><span class="line">            playerManager.changeToSpeaker();</span><br><span class="line">            setScreenOn();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三星,华为听筒外放切换卡顿">三星,华为听筒外放切换卡顿</h3><p>这个问题只能采用折中的办法:重新播放</p>
<p>为何采用此方法?</p>
<blockquote>
<ol>
<li>短的语音本来就短,切换重播几乎不受影响</li>
<li>长得音乐一般不会用听筒听</li>
<li>不是所有的手机都会出现卡顿</li>
</ol>
</blockquote>
<p>故在<code>PlayerManager</code>中修改方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 切换到听筒</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeToReceiver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isPlaying())&#123;</span><br><span class="line">        stop();</span><br><span class="line">        changeToReceiverNoStop();</span><br><span class="line">        play(filePath, callback);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        changeToReceiverNoStop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 切换到外放</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeToSpeaker</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (PhoneModelUtil.isSamsungPhone() || PhoneModelUtil.isHuaweiPhone())&#123;</span><br><span class="line">        stop();</span><br><span class="line">        changeToSpeakerNoStop();</span><br><span class="line">        play(filePath, callback);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        changeToSpeakerNoStop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeToSpeakerNoStop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    audioManager.setMode(AudioManager.MODE_NORMAL);</span><br><span class="line">    audioManager.setSpeakerphoneOn(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="耳机切换到外放会出现丢失语音">耳机切换到外放会出现丢失语音</h3><p>此问题由于耳机切换到外放需要一段时间导致,故解决此问题的方法是先暂停再续播.那么什么时候暂停什么时候续播呢?</p>
<p>查资料得知,在耳机拔出时系统还会发出Action为<code>AudioManager.ACTION_AUDIO_BECOMING_NOISY</code>的广播,且此广播比<code>Intent.ACTION_HEADSET_PLUG</code>要早,所以解决方案也出来了:</p>
<blockquote>
<p>收到<code>AudioManager.ACTION_AUDIO_BECOMING_NOISY</code>时暂停播放,收到<code>Intent.ACTION_HEADSET_PLUG</code>并且附带的state=1时续播</p>
</blockquote>
<h3 id="三星,华为手机在熄灭屏幕是会调用Activity的onPause(),onStop()方法">三星,华为手机在熄灭屏幕是会调用<code>Activity</code>的<code>onPause(),onStop()</code>方法</h3><p>这个问题嘛,其实也不算问题,但是值得注意.如果你在onStop()中做了某些释放资源的操作,那么在onStart()中就要重新获取,防止出现其他问题.</p>
<h2 id="后记">后记</h2><p>项目代码请点击此处:<a href="https://coding.net/u/devwiki/p/PlayMode/git" target="_blank" rel="external">PlayMode</a></p>
<p>我的更多信息:<a href="http://www.devwiki.net/about/">DevWiki</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近比较忙,好久都没有更新博客!</p>
<p>最近由于项目需求要做音乐播放模式的切换,经过好多次尝试,发现这里面满满的都是坑啊,所以就写一篇日志记录下来,也给大家分享下遇到的坑及解决办法.</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://www.devwiki.net/tags/Android/"/>
    
      <category term="播放模式" scheme="http://www.devwiki.net/tags/%E6%92%AD%E6%94%BE%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java简易Log]]></title>
    <link href="http://www.devwiki.net/2015/08/05/Java-Simple-Log/"/>
    <id>http://www.devwiki.net/2015/08/05/Java-Simple-Log/</id>
    <published>2015-08-05T12:23:03.000Z</published>
    <updated>2015-08-05T12:29:19.100Z</updated>
    <content type="html"><![CDATA[<p>在写代码时,经常打印一些信息用于调试,我经常使用<code>System.out.println()</code>打印,但是有一个问题,打印的信息多的时候就很难找到输出的位置,为了方便找到打印的位置,写了个简易的Log类,以后有机会在添加功能.</p>
<a id="more"></a>
<p>Java简易的Log类如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> TOP_LEFT_CORNER = <span class="string">'╔'</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> BOTTOM_LEFT_CORNER = <span class="string">'╚'</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> HORIZONTAL_DOUBLE_LINE = <span class="string">'║'</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DOUBLE_DIVIDER = <span class="string">"════════════════════════════════════════════"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOP_BORDER = TOP_LEFT_CORNER + DOUBLE_DIVIDER + DOUBLE_DIVIDER;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BOTTOM_BORDER = BOTTOM_LEFT_CORNER + DOUBLE_DIVIDER + DOUBLE_DIVIDER;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Log</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">createInfo</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">		StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		StackTraceElement element = <span class="keyword">new</span> Throwable().getStackTrace()[<span class="number">2</span>];</span><br><span class="line">		String className = element.getClassName();</span><br><span class="line">		String methodName = element.getMethodName();</span><br><span class="line">		<span class="keyword">int</span> lineNum = element.getLineNumber();</span><br><span class="line">		buffer.append(HORIZONTAL_DOUBLE_LINE);</span><br><span class="line">		buffer.append(<span class="string">"    "</span>);</span><br><span class="line">		buffer.append(className);</span><br><span class="line">		buffer.append(<span class="string">"["</span>);</span><br><span class="line">		buffer.append(methodName);</span><br><span class="line">		buffer.append(<span class="string">":"</span>);</span><br><span class="line">		buffer.append(lineNum);</span><br><span class="line">		buffer.append(<span class="string">"]"</span>);</span><br><span class="line">		buffer.append(msg);</span><br><span class="line">		<span class="keyword">return</span> buffer.toString();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">		System.out.println(TOP_BORDER);</span><br><span class="line">		System.out.println(HORIZONTAL_DOUBLE_LINE);</span><br><span class="line">		System.out.println(createInfo(msg));</span><br><span class="line">		System.out.println(HORIZONTAL_DOUBLE_LINE);</span><br><span class="line">		System.out.println(BOTTOM_BORDER);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Log.info(<span class="string">"123"</span>);</span><br><span class="line">		</span><br><span class="line">		Log.info(<span class="string">"测试..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显示结果如下:</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Java-Simple-Log.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在写代码时,经常打印一些信息用于调试,我经常使用<code>System.out.println()</code>打印,但是有一个问题,打印的信息多的时候就很难找到输出的位置,为了方便找到打印的位置,写了个简易的Log类,以后有机会在添加功能.</p>]]>
    
    </summary>
    
      <category term="Java" scheme="http://www.devwiki.net/tags/Java/"/>
    
      <category term="Log" scheme="http://www.devwiki.net/tags/Log/"/>
    
      <category term="日志" scheme="http://www.devwiki.net/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android代码规范参考指南]]></title>
    <link href="http://www.devwiki.net/2015/07/27/Android-Code-Pattern/"/>
    <id>http://www.devwiki.net/2015/07/27/Android-Code-Pattern/</id>
    <published>2015-07-27T04:25:16.000Z</published>
    <updated>2015-07-27T04:28:42.818Z</updated>
    <content type="html"><![CDATA[<p>代码规范对于一个软件项目来说非常重要，当然Android项目也不例外，一个优秀的Android项目不仅需要严谨的业务逻辑和架构设计，更需要一套统一优雅的代码规范标准，才可以让整个项目团队更加高效。</p>
<a id="more"></a>
<h2 id="包命名规范">包命名规范</h2><p>包（packages）：采用反域名命名规则，全部使用小写字母。一级包名为com，二级包名为xxx（可以是公司域名或者个人命名），三级包名根据应用进行命名，四级包名为模块名或层级名。</p>
<table>
<thead>
<tr>
<th>包名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>com.xxx.应用名称缩写.activities</td>
<td>页面用到的Activity类（activities层级用户界面）</td>
</tr>
<tr>
<td>com.xxx.应用名称缩写.fragment</td>
<td>页面用到的Fragment类</td>
</tr>
<tr>
<td>com.xxx.应用名称缩写.base</td>
<td>页面中每个Activity类共享的可以写成一个BaseActivity类（基础共享的类）</td>
</tr>
<tr>
<td>com.xxx.应用名称缩写.adapter</td>
<td>页面用到的Adapter类（适配器的类）</td>
</tr>
<tr>
<td>com.xxx.应用名称缩写.utils</td>
<td>此包中包含：公共工具方法类（包含日期、网络、存储、日志等工具类）</td>
</tr>
<tr>
<td>com.xxx.应用名称缩写.bean（model/domain均可，个人喜好）</td>
<td>实体类</td>
</tr>
<tr>
<td>com.xxx.应用名称缩写.db</td>
<td>数据库操作</td>
</tr>
<tr>
<td>com.xxx.应用名称缩写.view（或者.ui）</td>
<td>自定义的View类等</td>
</tr>
<tr>
<td>com.xxx.应用名称缩写.service</td>
<td>Service服务</td>
</tr>
<tr>
<td>com.xxx.应用名称缩写.broadcast</td>
<td>Broadcast服务</td>
</tr>
</tbody>
</table>
<h2 id="类命名规范">类命名规范</h2><p>类（classes）：名词，采用大驼峰命名法，尽量避免缩写，除非该缩写是众所周知的，比如HTML，URL,如果类名称包含单词缩写，则单词缩写的每个字母均应大写。</p>
<table>
<thead>
<tr>
<th>类</th>
<th>描述</th>
<th>例如</th>
</tr>
</thead>
<tbody>
<tr>
<td>Application类</td>
<td>Application为后缀标识</td>
<td>XXXApplication</td>
</tr>
<tr>
<td>Activity类</td>
<td>Activity为后缀标识</td>
<td>闪屏页面类SplashActivity</td>
</tr>
<tr>
<td>解析类</td>
<td>Handler为后缀标识</td>
<td></td>
</tr>
<tr>
<td>公共方法类</td>
<td>Utils或Manager为后缀标识</td>
<td>线程池管理类：ThreadPoolManager,日志工具类：LogUtils</td>
</tr>
<tr>
<td>数据库类</td>
<td>以DBHelper后缀标识</td>
<td>MySQLiteDBHelper</td>
</tr>
<tr>
<td>Service类</td>
<td>以Service为后缀标识</td>
<td>播放服务：PlayService</td>
</tr>
<tr>
<td>BroadcastReceiver类</td>
<td>以Broadcast为后缀标识</td>
<td>时间通知：TimeBroadcast</td>
</tr>
<tr>
<td>ContentProvider类</td>
<td>以Provider为后缀标识</td>
<td>单词内容提供者：DictProvider</td>
</tr>
<tr>
<td>直接写的共享基础类</td>
<td>以Base为前缀</td>
<td>BaseActivity,BaseFragment</td>
</tr>
</tbody>
</table>
<p>变量命名规范</p>
<p>变量（variables）采用小驼峰命名法。类中控件名称必须与xml布局id保持一致。</p>
<p>公开的常量：定义为静态final，名称全部大写。eg: public staticfinal String ACTION_MAIN=”android.intent.action.MAIN”;</p>
<p>静态变量：名称以s开头 eg：private static long sInstanceCount = 0;</p>
<p>非静态的私有变量、protected的变量：以m开头，eg：private Intent mItent;</p>
<p>接口命名规范</p>
<p>接口（interface）：命名规则与类一样采用大驼峰命名法，多以able或ible结尾，eg：interface Runable; interface Accessible;</p>
<p>方法命名规范</p>
<p>方法（methods）：动词或动名词，采用小驼峰命名法，eg：onCreate(),run();</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>initXX()</td>
<td>初始化相关方法，使用init为前缀标识，如初始化布局initView()</td>
</tr>
<tr>
<td>isXX()    checkXX()</td>
<td>方法返回值为boolean型的请使用is或check为前缀标识</td>
</tr>
<tr>
<td>getXX()</td>
<td>返回某个值的方法，使用get为前缀标识</td>
</tr>
<tr>
<td>processXX()</td>
<td>对数据进行处理的方法，尽量使用process为前缀标识</td>
</tr>
<tr>
<td>displayXX()</td>
<td>弹出提示框和提示信息，使用display为前缀标识</td>
</tr>
<tr>
<td>saveXX()</td>
<td>与保存数据相关的，使用save为前缀标识</td>
</tr>
<tr>
<td>resetXX()</td>
<td>对数据重组的，使用reset前缀标识</td>
</tr>
<tr>
<td>clearXX()</td>
<td>清除数据相关的</td>
</tr>
<tr>
<td>removeXX()</td>
<td>清除数据相关的</td>
</tr>
<tr>
<td>drawXXX()</td>
<td>绘制数据或效果相关的，使用draw前缀标识</td>
</tr>
</tbody>
</table>
<h2 id="布局文件命名规范">布局文件命名规范</h2><p>全部小写，采用下划线命名法</p>
<h3 id="contentview">contentview</h3><p>contentview命名, Activity默认布局，以去掉后缀的Activity类进行命名。不加后缀：<br>功能模块.xml<br>eg：main.xml、more.xml、settings.xml</p>
<p>或者：activity_功能模块.xml<br>eg：activity_main.xml、activity_more.xml</p>
<h3 id="Dialog">Dialog</h3><p>Dialog命名：dialog_描述.xml<br>eg：dlg_hint.xml</p>
<h3 id="PopupWindow">PopupWindow</h3><p>PopupWindow命名：ppw_描述.xml<br>eg：ppw_info.xml</p>
<h3 id="列表项">列表项</h3><p>列表项命名listitem_描述.xml<br>eg：listitem_city.xml</p>
<h3 id="包含项">包含项</h3><p>包含项：include_模块.xml<br>eg：include_head.xml、include_bottom.xml</p>
<h3 id="adapter的子布局">adapter的子布局</h3><p>adapter的子布局：功能模块_item.xml<br>eg：main_item.xml、</p>
<h2 id="资源id命名规范">资源id命名规范</h2><p>命名模式为：view缩写_模块名称_view的逻辑名称</p>
<p>view的缩写详情如下：</p>
<table>
<thead>
<tr>
<th>控件</th>
<th>缩写</th>
</tr>
</thead>
<tbody>
<tr>
<td>LayoutView</td>
<td>lv</td>
</tr>
<tr>
<td>RelativeView</td>
<td>rv</td>
</tr>
<tr>
<td>TextView</td>
<td>tv</td>
</tr>
<tr>
<td>Button</td>
<td>btn</td>
</tr>
<tr>
<td>ImageButton</td>
<td>imgBtn</td>
</tr>
<tr>
<td>ImageView</td>
<td>iv</td>
</tr>
<tr>
<td>CheckBox</td>
<td>cb</td>
</tr>
<tr>
<td>RadioButton</td>
<td>rb</td>
</tr>
<tr>
<td>analogClock</td>
<td>anaClk</td>
</tr>
<tr>
<td>DigtalClock</td>
<td>dgtClk</td>
</tr>
<tr>
<td>DatePicker</td>
<td>dtPk</td>
</tr>
<tr>
<td>EditText</td>
<td>edtTxt</td>
</tr>
<tr>
<td>TimePicker</td>
<td>tmPk</td>
</tr>
<tr>
<td>toggleButton</td>
<td>tglBtn</td>
</tr>
<tr>
<td>ProgressBar</td>
<td>proBar</td>
</tr>
<tr>
<td>SeekBar</td>
<td>skBar</td>
</tr>
<tr>
<td>AutoCompleteTextView</td>
<td>autoTxt</td>
</tr>
<tr>
<td>ZoomControls</td>
<td>zmCtl</td>
</tr>
<tr>
<td>VideoView</td>
<td>vdoVi</td>
</tr>
<tr>
<td>WdbView</td>
<td>webVi</td>
</tr>
<tr>
<td>RantingBar</td>
<td>ratBar</td>
</tr>
<tr>
<td>Tab</td>
<td>tab</td>
</tr>
<tr>
<td>Spinner</td>
<td>spn</td>
</tr>
<tr>
<td>Chronometer</td>
<td>cmt</td>
</tr>
<tr>
<td>ScollView</td>
<td>sclVi</td>
</tr>
<tr>
<td>TextSwitch</td>
<td>txtSwt</td>
</tr>
<tr>
<td>ImageSwitch</td>
<td>imgSwt</td>
</tr>
<tr>
<td>listView</td>
<td>lVi 或则lv</td>
</tr>
<tr>
<td>ExpandableList</td>
<td>epdLt</td>
</tr>
<tr>
<td>MapView</td>
<td>mapVi</td>
</tr>
</tbody>
</table>
<h2 id="动画文件命名">动画文件命名</h2><p>动画文件（anim文件夹下）：全部小写，采用下划线命名法，加前缀区分。</p>
<blockquote>
<p>前面为动画的类型，后面为方向</p>
</blockquote>
<table>
<thead>
<tr>
<th>动画命名例子</th>
<th>规范写法</th>
</tr>
</thead>
<tbody>
<tr>
<td>fade_in</td>
<td>淡入</td>
</tr>
<tr>
<td>fade_out</td>
<td>淡出</td>
</tr>
<tr>
<td>push_down_in</td>
<td>从下方推入</td>
</tr>
<tr>
<td>push_down_out</td>
<td>从下方推出</td>
</tr>
<tr>
<td>push_left</td>
<td>推像左方    </td>
</tr>
<tr>
<td>slide_in_from_top</td>
<td>从头部滑动进入</td>
</tr>
<tr>
<td>zoom_enter</td>
<td>变形进入</td>
</tr>
<tr>
<td>slide_in</td>
<td>滑动进入</td>
</tr>
<tr>
<td>shrink_to_middle</td>
<td>中间缩小</td>
</tr>
</tbody>
</table>
<h2 id="图片资源文件命名">图片资源文件命名</h2><table>
<thead>
<tr>
<th>命名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>bg_xxx</td>
<td>这种图片一般那些比较大的图片，比如作为某个Activity的背景等</td>
</tr>
<tr>
<td>btn_xxx</td>
<td>按钮，一般用于按钮，而且这种按钮没有其他状态</td>
</tr>
<tr>
<td>ic_xxx</td>
<td>图标，一般用于单个图标，比如启动图片ic_launcher</td>
</tr>
<tr>
<td>bg<em>描述</em>状态1[_状态2]</td>
<td>用于控件上的不同状态</td>
</tr>
<tr>
<td>btn<em>描述</em>状态1[_状态2]</td>
<td>用于按钮上的不同状态</td>
</tr>
<tr>
<td>chx<em>描述</em>状态1[_状态2]</td>
<td>选择框，一般有2态和4态</td>
</tr>
</tbody>
</table>
<h2 id="一些常见的单词缩写">一些常见的单词缩写</h2><table>
<thead>
<tr>
<th>名称</th>
<th>缩写</th>
</tr>
</thead>
<tbody>
<tr>
<td>icon</td>
<td>ic （主要用在app的图标）</td>
</tr>
<tr>
<td>color</td>
<td>cl（主要用于颜色值）</td>
</tr>
<tr>
<td>divider</td>
<td>di（主要用于分隔线，不仅包括Listview中的divider，还包括普通布局中的线）</td>
</tr>
<tr>
<td>selector</td>
<td>sl（主要用于某一view多种状态，不仅包括Listview中的selector，还包括按钮的selector）</td>
</tr>
<tr>
<td>average</td>
<td>avg</td>
</tr>
<tr>
<td>background</td>
<td>Bg（主要用于布局和子布局的背景）</td>
</tr>
<tr>
<td>buffer</td>
<td>buf</td>
</tr>
<tr>
<td>control</td>
<td>ctrl</td>
</tr>
<tr>
<td>delete</td>
<td>del</td>
</tr>
<tr>
<td>document</td>
<td>doc</td>
</tr>
<tr>
<td>error</td>
<td>err</td>
</tr>
<tr>
<td>escape</td>
<td>esc</td>
</tr>
<tr>
<td>increment</td>
<td>inc</td>
</tr>
<tr>
<td>infomation</td>
<td>info</td>
</tr>
<tr>
<td>initial</td>
<td>init</td>
</tr>
<tr>
<td>image</td>
<td>img</td>
</tr>
<tr>
<td>Internationalization</td>
<td>I18N</td>
</tr>
<tr>
<td>length</td>
<td>len</td>
</tr>
<tr>
<td>library</td>
<td>lib</td>
</tr>
<tr>
<td>message</td>
<td>msg</td>
</tr>
<tr>
<td>password</td>
<td>pwd</td>
</tr>
<tr>
<td>position</td>
<td>pos</td>
</tr>
<tr>
<td>server</td>
<td>srv</td>
</tr>
<tr>
<td>string</td>
<td>str</td>
</tr>
<tr>
<td>temp</td>
<td>tmp</td>
</tr>
<tr>
<td>window</td>
<td>wnd(win)</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<p>代码规范对于一个软件项目来说非常重要，当然Android项目也不例外，一个优秀的Android项目不仅需要严谨的业务逻辑和架构设计，更需要一套统一优雅的代码规范标准，才可以让整个项目团队更加高效。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://www.devwiki.net/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 开发最佳实践]]></title>
    <link href="http://www.devwiki.net/2015/07/08/Android-Best-Practices/"/>
    <id>http://www.devwiki.net/2015/07/08/Android-Best-Practices/</id>
    <published>2015-07-08T04:45:07.000Z</published>
    <updated>2015-07-08T04:48:20.261Z</updated>
    <content type="html"><![CDATA[<p>从<a href="http://www.futurice.com" target="_blank" rel="external">Futurice</a>公司Android开发者中学到的经验。</p>
<h3 id="摘要">摘要</h3><ul>
<li>使用 Gradle 和它推荐的工程结构</li>
<li>把密码和敏感数据放在gradle.properties</li>
<li>不要自己写 HTTP 客户端,使用Volley或OkHttp库</li>
<li>使用Jackson库解析JSON数据</li>
<li>避免使用Guava同时使用一些类库来避免<em>65k method limit</em>（一个Android程序中最多能执行65536个方法）</li>
<li>使用 Fragments来呈现UI视图</li>
<li>使用 Activities 只是为了管理 Fragments<a id="more"></a></li>
<li>Layout 布局是 XMLs代码，组织好它们</li>
<li>在layoutout XMLs布局时，使用styles文件来避免使用重复的属性</li>
<li>使用多个style文件来避免单一的一个大style文件</li>
<li>保持你的colors.xml 简短DRY(不要重复自己)，只是定义调色板</li>
<li>总是使用dimens.xml DRY(不要重复自己)，定义通用常数</li>
<li>不要做一个深层次的ViewGroup</li>
<li>在使用WebViews时避免在客户端做处理，当心内存泄露</li>
<li>使用Robolectric单元测试，Robotium 做UI测试</li>
<li>使用Genymotion 作为你的模拟器</li>
<li>总是使用ProGuard 和 DexGuard混淆来项目</li>
</ul>
<h3 id="Android_SDK">Android SDK</h3><p>将你的<a href="https://developer.android.com/sdk/installing/index.html?pkg=tools" target="_blank" rel="external">Android SDK</a>放在你的home目录或其他应用程序无关的位置。<br>当安装有些包含SDK的IDE的时候，可能会将SDK放在IDE同一目录下，当你需要升级（或重新安装）IDE或更换的IDE时，会非常麻烦。<br>此外，若果你的IDE是在普通用户，不是在root下运行，还要避免吧SDK放到一下需要sudo权限的系统级别目录下。</p>
<h3 id="构建系统">构建系统</h3><p>你的默认编译环境应该是<a href="http://tools.android.com/tech-docs/new-build-system" target="_blank" rel="external">Gradle</a>.<br>Ant 有很多限制，也很冗余。使用Gradle，完成以下工作很方便：</p>
<ul>
<li>构建APP不同版本的变种</li>
<li>制作简单类似脚本的任务</li>
<li>管理和下载依赖</li>
<li>自定义秘钥</li>
<li>更多</li>
</ul>
<p>同时，Android Gradle插件作为新标准的构建系统正在被Google积极的开发。</p>
<h3 id="工程结构">工程结构</h3><p>有两种流行的结构：老的Ant &amp; Eclipse ADT 工程结构，和新的Gradle &amp; Android Studio 工程结构，<br>你应该选择新的工程结构，如果你的工程还在使用老的结构，考虑放弃吧，将工程移植到新的结构。</p>
<p>老的结构:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">old-structure&#10;&#9500;&#9472; assets&#10;&#9500;&#9472; libs&#10;&#9500;&#9472; res&#10;&#9500;&#9472; src&#10;&#9474;  &#9492;&#9472; com/futurice/project&#10;&#9500;&#9472; AndroidManifest.xml&#10;&#9500;&#9472; build.gradle&#10;&#9500;&#9472; project.properties&#10;&#9492;&#9472; proguard-rules.pro</span><br></pre></td></tr></table></figure>
<p>新的结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new-structure&#10;&#9500;&#9472; library-foobar&#10;&#9500;&#9472; app&#10;&#9474;  &#9500;&#9472; libs&#10;&#9474;  &#9500;&#9472; src&#10;&#9474;  &#9474;  &#9500;&#9472; androidTest&#10;&#9474;  &#9474;  &#9474;  &#9492;&#9472; java&#10;&#9474;  &#9474;  &#9474;     &#9492;&#9472; com/futurice/project&#10;&#9474;  &#9474;  &#9492;&#9472; main&#10;&#9474;  &#9474;     &#9500;&#9472; java&#10;&#9474;  &#9474;     &#9474;  &#9492;&#9472; com/futurice/project&#10;&#9474;  &#9474;     &#9500;&#9472; res&#10;&#9474;  &#9474;     &#9492;&#9472; AndroidManifest.xml&#10;&#9474;  &#9500;&#9472; build.gradle&#10;&#9474;  &#9492;&#9472; proguard-rules.pro&#10;&#9500;&#9472; build.gradle&#10;&#9492;&#9472; settings.gradle</span><br></pre></td></tr></table></figure>
<p>主要的区别在于，新的结构明确的分开了’source sets’ (<code>main</code>,<code>androidTest</code>)，Gradle的一个理念。<br>你可以做到，例如，添加源组‘paid’和‘free’在src中，这将成为您的应用程序的付费和免费的两种模式的源代码。</p>
<p>你的项目引用第三方项目库时（例如，library-foobar），拥有一个顶级包名<code>app</code>从第三方库项目区分你的应用程序是非常有用的。<br>然后<code>settings.gradle</code>不断引用这些库项目，其中<code>app/build.gradle</code>可以引用。</p>
<h3 id="Gradle_配置">Gradle 配置</h3><p><strong>常用结构</strong> 参考<a href="http://tools.android.com/tech-docs/new-build-system/user-guide" target="_blank" rel="external">Google’s guide on Gradle for Android</a></p>
<p><strong>小任务</strong> 除了(shell, Python, Perl, etc)这些脚本语言，你也可以使用Gradle 制作任务。<br>更多信息请参考<a href="http://www.gradle.org/docs/current/userguide/userguide_single.html#N10CBF" target="_blank" rel="external">Gradle’s documentation</a>。</p>
<p><strong>密码</strong> 在做版本release时你app的 <code>build.gradle</code>你需要定义 <code>signingConfigs</code>.此时你应该避免以下内容：</p>
<p><em>不要做这个</em> . 这会出现在版本控制中。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">	release &#123;</span><br><span class="line">		storeFile file(<span class="string">"myapp.keystore"</span>)</span><br><span class="line">		storePassword <span class="string">"password123"</span></span><br><span class="line">		keyAlias <span class="string">"thekey"</span></span><br><span class="line">		keyPassword <span class="string">"password789"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而是，建立一个不加入版本控制系统的<code>gradle.properties</code>文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEYSTORE_PASSWORD=password123&#10;KEY_PASSWORD=password789</span><br></pre></td></tr></table></figure>
<p>那个文件是gradle自动引入的，你可以在<code>buld.gradle</code>文件中使用，例如：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">	release &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			storeFile file(<span class="string">"myapp.keystore"</span>)</span><br><span class="line">			storePassword KEYSTORE_PASSWORD</span><br><span class="line">			keyAlias <span class="string">"thekey"</span></span><br><span class="line">			keyPassword KEY_PASSWORD</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> InvalidUserDataException(<span class="string">"You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties."</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用 Maven 依赖方案代替使用导入jar包方案</strong> 如果在你的项目中你明确使用率<br>jar文件，那么它们可能成为永久的版本，如<code>2.1.1</code>.下载jar包更新他们是很繁琐的，<br>这个问题Maven很好的解决了，这在Android Gradle构建中也是推荐的方法。你可<br>以指定版本的一个范围，如<code>2.1.+</code>,然后Maven会自动升级到制定的最新版本，例如：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">	compile <span class="string">'com.netflix.rxjava:rxjava-core:0.19.+'</span></span><br><span class="line">	compile <span class="string">'com.netflix.rxjava:rxjava-android:0.19.+'</span></span><br><span class="line">	compile <span class="string">'com.fasterxml.jackson.core:jackson-databind:2.4.+'</span></span><br><span class="line">	compile <span class="string">'com.fasterxml.jackson.core:jackson-core:2.4.+'</span></span><br><span class="line">	compile <span class="string">'com.fasterxml.jackson.core:jackson-annotations:2.4.+'</span></span><br><span class="line">	compile <span class="string">'com.squareup.okhttp:okhttp:2.0.+'</span></span><br><span class="line">	compile <span class="string">'com.squareup.okhttp:okhttp-urlconnection:2.0.+'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="IDEs_and_text_editors">IDEs and text editors</h3><h3 id="IDE集成开发环境和文本编辑器">IDE集成开发环境和文本编辑器</h3><p><strong>无论使用什么编辑器，一定要构建一个良好的工程结构</strong> 编辑器每个人都有自己的<br>选择，让你的编辑器根据工程结构和构建系统运作，那是你自己的责任。</p>
<p>当下首推<a href="https://developer.android.com/sdk/installing/studio.html" target="_blank" rel="external">Android Studio</a>,因为他是由谷歌开发，最接近Gradle，默认使用最新的工程结构，已经到beta阶段<br>（目前已经有release 1.0了），它就是为Android开发定制的。</p>
<p>你也可以使用<a href="https://developer.android.com/sdk/installing/index.html?pkg=adt" target="_blank" rel="external">Eclipse ADT</a> ，但是你需要对它进行配置，因为它使用了旧的工程结构<br>和Ant作为构建系统。你甚至可以使用纯文版编辑器如Vim，Sublime Text，或者Emacs。如果那样的话，你需要使用Gardle和<code>adb</code>命令行。如果使用Eclipse集成Gradle<br>不适合你，你只是使用命令行构建工程，或迁移到Android Studio中来吧。</p>
<p>无论你使用何种开发工具，只要确保Gradle和新的项目结构保持官方的方式构建应用程序，避免你的编辑器配置文件加入到版本控制。例如，避免加入Ant <code>build.xml</code>文件。<br>特别如果你改变Ant的配置，不要忘记保持<code>build.gradle</code>是最新和起作用的。同时，善待其他开发者，不要强制改变他们的开发工具和偏好。</p>
<h3 id="类库">类库</h3><p><strong><a href="http://wiki.fasterxml.com/JacksonHome" target="_blank" rel="external">Jackson</a></strong> 是一个将java对象转换成JSON与JSON转化java类的类库。<a href="https://code.google.com/p/google-gson/" target="_blank" rel="external">Gson</a><br>是解决这个问题的流行方案，然而我们发现Jackson更高效,因为它支持替代的方法处理JSON:流、内存树模型,和传统JSON-POJO数据绑定。不过，请记住，<br>Jsonkson库比起GSON更大，所以根据你的情况选择，你可能选择GSON来避免APP 65k个方法限制。其它选择: <a href="https://code.google.com/p/json-smart/" target="_blank" rel="external">Json-smart</a> and <a href="https://github.com/RichardHightower/boon/wiki/Boon-JSON-in-five-minutes" target="_blank" rel="external">Boon JSON</a></p>
<p><strong>网络请求，缓存，图片</strong> 执行请求后端服务器，有几种交互的解决方案，你应该考虑实现你自己的网络客户端。使用 <a href="https://android.googlesource.com/platform/frameworks/volley" target="_blank" rel="external">Volley</a><br>或<a href="http://square.github.io/retrofit/" target="_blank" rel="external">Retrofit</a>。Volley 同时提供图片缓存类。若果你选择使用Retrofit,那么考虑使用<a href="http://square.github.io/picasso/" target="_blank" rel="external">Picasso</a><br>来加载图片和缓存，同时使用<a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp</a>作为高效的网络请求。Retrofit，Picasso和OkHttp都是有同一家公司开发（注：<br>是由<a href="https://github.com/square" target="_blank" rel="external">Square</a> 公司开发），所以它们能很好的在一起运行。<a href="http://stackoverflow.com/questions/24375043/how-to-implement-android-volley-with-okhttp-2-0/24951835#24951835" target="_blank" rel="external">OkHttp 同样可以和Volley在一起使用 Volley</a>.</p>
<p><strong>RxJava</strong> 是函数式反应性的一个类库，换句话说，能处理异步的事件。<br>这是一个强大的和有前途的模式，同时也可能会造成混淆，因为它是如此的不同。<br>我们建议在使用这个库架构整个应用程序之前要谨慎考虑。<br>有一些项目是使用RxJava完成的，如果你需要帮助可以跟这些人取得联系：<br>Timo Tuominen, Olli Salonen, Andre Medeiros, Mark Voit, Antti Lammi, Vera Izrailit, Juha Ristolainen.<br>我们也写了一些博客：<br><a href="http://blog.futurice.com/tech-pick-of-the-week-rx-for-net-and-rxjava-for-android" target="_blank" rel="external">[1]</a>, <a href="http://blog.futurice.com/top-7-tips-for-rxjava-on-android" target="_blank" rel="external">[2]</a>,<br><a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" target="_blank" rel="external">[3]</a>,<br><a href="http://blog.futurice.com/android-development-has-its-own-swift" target="_blank" rel="external">[4]</a>.</p>
<p>如若你之前有使用过Rx的经历，开始从API响应应用它。<br>另外，从简单的UI事件处理开始运用，如单击事件或在搜索栏输入事件。<br>若对你的Rx技术有信心，同时想要将它应用到你的整体架构中，那么请在复杂的部分写好Javadocs文档。<br>请记住其他不熟悉RxJava的开发人员，可能会非常难理解整个项目。<br>尽你的的全力帮助他们理解你的代码和Rx。</p>
<p><strong><a href="https://github.com/evant/gradle-retrolambda" target="_blank" rel="external">Retrolambda</a></strong> 是一个在Android和预JDK8平台上的使用Lambda表达式语法的Java类库。<br>它有助于保持你代码的紧凑性和可读性，特别当你使用如RxJava函数风格编程时。<br>使用它时先安装JDK8，在Android Studio工程结构对话框中把它设置成为SDK路径，同时设置<code>JAVA8_HOME</code>和<code>JAVA7_HOME</code>环境变量，<br>然后在工程根目录下配置 build.gradle：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">	classpath <span class="string">'me.tatarka:gradle-retrolambda:2.4.+'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同时在每个module 的build.gradle中添加</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'retrolambda'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">	compileOptions &#123;</span><br><span class="line">	sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">	targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">retrolambda &#123;</span><br><span class="line">	jdk System.getenv(<span class="string">"JAVA8_HOME"</span>)</span><br><span class="line">	oldJdk System.getenv(<span class="string">"JAVA7_HOME"</span>)</span><br><span class="line">	javaVersion JavaVersion.VERSION_1_7</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Android Studio 提供Java8 lambdas表带是代码提示支持。如果你对lambdas不熟悉，只需参照以下开始学习吧：</p>
<ul>
<li>任何只包含一个接口的方法都是”lambda friendly”同时代码可以被折叠成更紧凑的语法</li>
<li>如果对参数或类似有疑问，就写一个普通的匿名内部类，然后让Android Status为你生成一个lambda。</li>
</ul>
<p><strong>当心dex方法数限制，同时避免使用过多的类库</strong> Android apps，当打包成一个dex文件时，有一个65535个应用方法强硬限制<a href="https://medium.com/@rotxed/dex-skys-the-limit-no-65k-methods-is-28e6cb40cf71" target="_blank" rel="external">[1]</a> <a href="http://blog.persistent.info/2014/05/per-package-method-counts-for-androids.html" target="_blank" rel="external">[2]</a> <a href="http://jakewharton.com/play-services-is-a-monolith/" target="_blank" rel="external">[3]</a>。<br>当你突破65k限制之后你会看到一个致命错误。因此，使用一个正常范围的类库文件，同时使用<a href="https://github.com/mihaip/dex-method-counts" target="_blank" rel="external">dex-method-counts</a><br>工具来决定哪些类库可以再65k限制之下使用，特别的避免使用Guava类库，因为它包含超过13k个方法。</p>
<h3 id="Activities_and_Fragments">Activities and Fragments</h3><p><a href="http://developer.android.com/guide/components/fragments.html" target="_blank" rel="external">Fragments</a>应该作为你实现UI界面默认选择。你可以重复使用Fragments用户接口来<br>组合成你的应用。我们强烈推荐使用Fragments而不是activity来呈现UI界面，理由如下：</p>
<ul>
<li><p><strong>提供多窗格布局解决方案</strong> Fragments 的引入主要将手机应用延伸到平板电脑，所以在平板电脑上你可能有A、B两个窗格，但是在手机应用上A、B可能分别充满<br>整个屏幕。如果你的应用在最初就使用了fragments，那么以后将你的应用适配到其他不同尺寸屏幕就会非常简单。</p>
</li>
<li><p><strong>屏幕间数据通信</strong> 从一个Activity发送复杂数据(例如Java对象)到另外一个Activity，Android的API并没有提供合适的方法。不过使用Fragment，你可以使用<br>一个activity实例作为这个activity子fragments的通信通道。即使这样比Activity与Activity间的通信好，你也想考虑使用Event Bus架构，使用如<br><a href="https://square.github.io/otto/" target="_blank" rel="external">Otto</a> 或者 <a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">greenrobot EventBus</a>作为更简洁的实现。<br>如果你希望避免添加另外一个类库，RxJava同样可以实现一个Event Bus。</p>
</li>
</ul>
<ul>
<li><p><strong>Fragments 一般通用的不只有UI</strong> 你可以有一个没有界面的fragment作为Activity提供后台工作。<br>进一步你可以使用这个特性来创建一个<a href="http://stackoverflow.com/questions/12363790/how-many-activities-vs-fragments/12528434#12528434" target="_blank" rel="external">fragment 包含改变其它fragment的逻辑</a><br>而不是把这个逻辑放在activity中。</p>
</li>
<li><p><strong>甚至ActionBar 都可以使用内部fragment来管理</strong> 你可以选择使用一个没有UI界面的fragment来专门管理ActionBar,或者你可以选择使用在每个Fragment中<br>添加它自己的action 来作为父Activity的ActionBar.<a href="http://www.grokkingandroid.com/adding-action-items-from-within-fragments/" target="_blank" rel="external">参考</a>.</p>
</li>
</ul>
<p>很不幸，我们不建议广泛的使用嵌套的<a href="https://developer.android.com/about/versions/android-4.2.html#NestedFragments" target="_blank" rel="external">fragments</a>，因为<br>有时会引起<a href="http://delyan.me/android-s-matryoshka-problem/" target="_blank" rel="external">matryoshka bugs</a>。我们只有当它有意义(例如，在水平滑动的ViewPager在<br>像屏幕一样fragment中)或者他的确是一个明智的选择的时候才广泛的使用fragment。</p>
<p>在一个架构级别，你的APP应该有一个顶级的activity来包含绝大部分业务相关的fragment。你也可能还有一些辅助的activity ，这些辅助的activity与主activity<br>通信很简单限制在这两种方法<br><a href="http://developer.android.com/reference/android/content/Intent.html#setData(android.net.Uri" target="_blank" rel="external"><code>Intent.setData()</code></a>) 或 <a href="http://developer.android.com/reference/android/content/Intent.html#setAction(java.lang.String" target="_blank" rel="external"><code>Intent.setAction()</code></a>)或类似的方法。</p>
<h3 id="Java_包结构">Java 包结构</h3><p>Android 应用程序在架构上大致是Java中的<a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" target="_blank" rel="external">Model-View-Controller</a>结构。<br>在Android 中 Fragment和Activity通常上是控制器类(<a href="http://www.informit.com/articles/article.aspx?p=2126865" target="_blank" rel="external">http://www.informit.com/articles/article.aspx?p=2126865</a>).<br>换句话说，他们是用户接口的部分，同样也是Views视图的部分。</p>
<p>正是因为如此，才很难严格的将fragments (或者 activities) 严格的划分成 控制器controlloers还是视图 views。<br>最还是将它们放在自己单独的 <code>fragments</code> 包中。只要你遵循之前提到的建议，Activities 则可以放在顶级目录下。<br>若果你规划有2到3个以上的activity，那么还是同样新建一个<code>activities</code>包吧。</p>
<p>然而，这种架构可以看做是另一种形式的MVC，<br>包含要被解析API响应的JSON数据，来填充的POJO的<code>models</code>包中。<br>和一个<code>views</code>包来包含你的自定义视图、通知、导航视图，widgets等等。<br>适配器Adapter是在数据和视图之间。然而他们通常需要通过<code>getView()</code>方法来导出一些视图，<br>所以你可以将<code>adapters</code>包放在<code>views</code>包里面。</p>
<p>一些控制器角色的类是应用程序级别的，同时是接近系统的。<br>这些类放在<code>managers</code>包下面。<br>一些繁杂的数据处理类，比如说”DateUtils”,放在<code>utils</code>包下面。<br>与后端交互负责网络处理类，放在<code>network</code>包下面。</p>
<p>总而言之，以最接近用户而不是最接近后端去安排他们。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.futurice.project&#10;&#9500;&#9472; network&#10;&#9500;&#9472; models&#10;&#9500;&#9472; managers&#10;&#9500;&#9472; utils&#10;&#9500;&#9472; fragments&#10;&#9492;&#9472; views&#10;   &#9500;&#9472; adapters&#10;   &#9500;&#9472; actionbar&#10;   &#9500;&#9472; widgets&#10;   &#9492;&#9472; notifications</span><br></pre></td></tr></table></figure>
<h3 id="资源文件_Resources">资源文件 Resources</h3><ul>
<li><strong>命名</strong> 遵循前缀表明类型的习惯，形如<code>type_foo_bar.xml</code>。例如：<code>fragment_contact_details.xml</code>,<code>view_primary_button.xml</code>,<code>activity_main.xml</code>.</li>
</ul>
<p><strong>组织布局文件</strong> 若果你不确定如何排版一个布局文件，遵循一下规则可能会有帮助。</p>
<ul>
<li>每一个属性一行，缩进4个空格</li>
<li><code>android:id</code> 总是作为第一个属性</li>
<li><code>android:layout_****</code> 属性在上边</li>
<li><code>style</code> 属性在底部</li>
<li>关闭标签<code>/&gt;</code>单独起一行，有助于调整和添加新的属性</li>
<li>考虑使用<a href="http://tools.android.com/tips/layout-designtime-attributes" target="_blank" rel="external">Designtime attributes 设计时布局属性</a>，Android Studio已经提供支持，而不是硬编码<code>android:text</code><br>(译者注：墙内也可以参考stormzhang的这篇博客<a href="http://stormzhang.com/devtools/2015/01/11/android-studio-tips1/" target="_blank" rel="external">链接</a>)。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">	<span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">	<span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">	<span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">	<span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">	<span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">	&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">		<span class="attribute">android:id</span>=<span class="value">"@+id/name"</span></span><br><span class="line">		<span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">		<span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">		<span class="attribute">android:layout_alignParentRight</span>=<span class="value">"true"</span></span><br><span class="line">		<span class="attribute">android:text</span>=<span class="value">"@string/name"</span></span><br><span class="line">		<span class="attribute">style</span>=<span class="value">"@style/FancyText"</span></span><br><span class="line">		/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="title">include</span> <span class="attribute">layout</span>=<span class="value">"@layout/reusable_part"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>作为一个经验法则,<code>android:layout_****</code>属性应该在 layout XML 中定义,同时其它属性<code>android:****</code> 应放在 styler XML中。此规则也有例外，不过大体工作<br>的很好。这个思想整体是保持layout属性(positioning, margin, sizing) 和content属性在布局文件中，同时将所有的外观细节属性（colors, padding, font）放<br>在style文件中。</p>
<p>例外有以下这些:</p>
<ul>
<li><code>android:id</code> 明显应该在layout文件中</li>
<li>layout文件中<code>android:orientation</code>对于一个<code>LinearLayout</code>布局通常更有意义</li>
<li><code>android:text</code> 由于是定义内容，应该放在layout文件中</li>
<li>有时候将<code>android:layout_width</code> 和 <code>android:layout_height</code>属性放到一个style中作为一个通用的风格中更有意义，但是默认情况下这些应该放到layout文件中。</li>
</ul>
<p><strong>使用styles</strong> 几乎每个项目都需要适当的使用style文件，因为对于一个视图来说有一个重复的外观是很常见的。<br>在应用中对于大多数文本内容，最起码你应该有一个通用的style文件，例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"ContentText"</span>&gt;</span><span class="css"></span><br><span class="line">	&lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="rule"><span class="attribute">android</span>:<span class="value">textSize<span class="string">"&gt;@dimen/font_normal&lt;/item&gt;</span><br><span class="line">	&lt;item name="</span>android:textColor<span class="string">"&gt;@color/basic_black&lt;/item&gt;</span><br><span class="line"></span></span></span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>应用到TextView 中:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">	<span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">	<span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">	<span class="attribute">android:text</span>=<span class="value">"@string/price"</span></span><br><span class="line">	<span class="attribute">style</span>=<span class="value">"@style/ContentText"</span></span><br><span class="line">	/&gt;</span></span><br></pre></td></tr></table></figure>
<p>你或许需要为按钮控件做同样的事情，不要停止在那里。将一组相关的和重复<code>android:****</code>的属性放到一个通用的style中。</p>
<p><strong>将一个大的style文件分割成多个文件</strong> 你可以有多个<code>styles.xml</code> 文件。Android SDK支持其它文件，<code>styles</code>这个文件名称并没有作用，起作用的是在文件<br>里xml的<code>&lt;style&gt;</code>标签。因此你可以有多个style文件<code>styles.xml</code>,<code>style_home.xml</code>,<code>style_item_details.xml</code>,<code>styles_forms.xml</code>。<br>不用于资源文件路径需要为系统构建起的有意义，在<code>res/values</code>目录下的文件可以任意命名。</p>
<p><strong><code>colors.xml</code>是一个调色板</strong> 在你的<code>colors.xml</code>文件中应该只是映射颜色的名称一个RGBA值，而没有其它的。不要使用它为不同的按钮来定义RGBA值。</p>
<p><em>不要这样做</em></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">resources</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"button_foreground"</span>&gt;</span>#FFFFFF<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"button_background"</span>&gt;</span>#2A91BD<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"comment_background_inactive"</span>&gt;</span>#5F5F5F<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"comment_background_active"</span>&gt;</span>#939393<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"comment_foreground"</span>&gt;</span>#FFFFFF<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"comment_foreground_important"</span>&gt;</span>#FF9D2F<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"comment_shadow"</span>&gt;</span>#323232<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用这种格式，你会非常容易的开始重复定义RGBA值，这使如果需要改变基本色变的很复杂。同时，这些定义是跟一些环境关联起来的，如<code>button</code>或者<code>comment</code>,<br>应该放到一个按钮风格中，而不是在<code>color.xml</code>文件中。</p>
<p>相反，这样做:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- grayscale --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"white"</span>     &gt;</span>#FFFFFF<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"gray_light"</span>&gt;</span>#DBDBDB<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"gray"</span>      &gt;</span>#939393<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"gray_dark"</span> &gt;</span>#5F5F5F<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"black"</span>     &gt;</span>#323232<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- basic colors --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"green"</span>&gt;</span>#27D34D<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"blue"</span>&gt;</span>#2A91BD<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"orange"</span>&gt;</span>#FF9D2F<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"red"</span>&gt;</span>#FF432F<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>向应用设计者那里要这个调色板，名称不需要跟”green”, “blue”, 等等相同。<br>“brand_primary”, “brand_secondary”, “brand_negative” 这样的名字也是完全可以接受的。<br>像这样规范的颜色很容易修改或重构，会使应用一共使用了多少种不同的颜色变得非常清晰。<br>通常一个具有审美价值的UI来说，减少使用颜色的种类是非常重要的。</p>
<p><strong>像对待colors.xml一样对待dimens.xml文件</strong> 与定义颜色调色板一样，你同时也应该定义一个空隙间隔和字体大小的“调色板”。<br>一个好的例子，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- font sizes --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"font_larger"</span>&gt;</span>22sp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"font_large"</span>&gt;</span>18sp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"font_normal"</span>&gt;</span>15sp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"font_small"</span>&gt;</span>12sp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- typical spacing between two views --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"spacing_huge"</span>&gt;</span>40dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"spacing_large"</span>&gt;</span>24dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"spacing_normal"</span>&gt;</span>14dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"spacing_small"</span>&gt;</span>10dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"spacing_tiny"</span>&gt;</span>4dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- typical sizes of views --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"button_height_tall"</span>&gt;</span>60dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"button_height_normal"</span>&gt;</span>40dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"button_height_short"</span>&gt;</span>32dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>布局时在写 margins 和 paddings 时，你应该使用<code>spacing_****</code>尺寸格式来布局，而不是像对待String字符串一样直接写值。<br>这样写会非常有感觉，会使组织和改变风格或布局是非常容易。</p>
<p><strong>避免深层次的视图结构</strong> 有时候为了摆放一个视图，你可能尝试添加另一个LinearLayout。你可能使用这种方法解决：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">	<span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">	<span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">	<span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">	&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="title">RelativeLayout</span></span><br><span class="line">		<span class="attribute">...</span></span><br><span class="line">		&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">			<span class="attribute">...</span></span><br><span class="line">			&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">				<span class="attribute">...</span></span><br><span class="line">				&gt;</span></span><br><span class="line"></span><br><span class="line">				<span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">					<span class="attribute">...</span></span><br><span class="line">					&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>即使你没有非常明确的在一个layout布局文件中这样使用，如果你在Java文件中从一个view inflate（这个inflate翻译不过去，大家理解就行） 到其他views当中，也是可能会发生的。</p>
<p>可能会导致一系列的问题。你可能会遇到性能问题，因为处理起需要处理一个复杂的UI树结构。<br>还可能会导致以下更严重的问题<a href="http://stackoverflow.com/questions/2762924/java-lang-stackoverflow-error-suspected-too-many-views" target="_blank" rel="external">StackOverflowError</a>.</p>
<p>因此尽量保持你的视图tree：学习如何使用<a href="https://developer.android.com/guide/topics/ui/layout/relative.html" target="_blank" rel="external">RelativeLayout</a>,<br>如何 <a href="http://developer.android.com/training/improving-layouts/optimizing-layout.html" target="_blank" rel="external">optimize 你的布局</a> 和如何使用<br><a href="http://stackoverflow.com/questions/8834898/what-is-the-purpose-of-androids-merge-tag-in-xml-layouts" target="_blank" rel="external"><code>&lt;merge&gt;</code> 标签</a>.</p>
<p><strong>小心关于WebViews的问题.</strong> 如果你必须显示一个web视图，<br>比如说对于一个新闻文章，避免做客户端处理HTML的工作，<br>最好让后端工程师协助，让他返回一个 “<em>纯</em>“ HTML。<br><a href="http://stackoverflow.com/questions/3130654/memory-leak-in-webview" target="_blank" rel="external">WebViews 也能导致内存泄露</a><br>当保持引他们的Activity，而不是被绑定到ApplicationContext中的时候。<br>当使用简单的文字或按钮时，避免使用WebView，这时使用TextView或Buttons更好。</p>
<h3 id="测试框架">测试框架</h3><p>Android SDK的测试框架还处于初级阶段，特别是关于UI测试方面。Android Gradle<br>目前实现了一个叫<a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Testing" target="_blank" rel="external"><code>connectedAndroidTest</code></a>的测试，<br>它<a href="http://developer.android.com/reference/android/test/package-summary.html" target="_blank" rel="external">使用一个JUnit 为Android提供的扩展插件 extension of JUnit with helpers for Android</a>.可以跑你生成的JUnit测试，</p>
<p><strong>只当做单元测试时使用 <a href="http://robolectric.org/" target="_blank" rel="external">Robolectric</a> ，views 不用</strong><br>它是一个最求提供”不连接设备的”为了加速开发的测试，<br>非常时候做 models 和 view models 的单元测试。<br>然而，使用Robolectric测试时不精确的，也不完全对UI测试。<br>当你对有关动画的UI元素、对话框等，测试时会有问题，<br>这主要是因为你是在 “在黑暗中工作”（在没有可控的界面情况下测试）</p>
<p><strong><a href="https://code.google.com/p/robotium/" target="_blank" rel="external">Robotium</a> 使写UI测试非常简单。
</strong> 对于UI测试你不需 Robotium 跑与设备连接的测试。<br>但它可能会对你有益，是因为它有许多来帮助类的获得和分析视图，控制屏幕。<br>测试用例看起来像这样简单：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">solo.sendKey(Solo.MENU);</span><br><span class="line">solo.clickOnText(<span class="string">"More"</span>); <span class="comment">// searches for the first occurence of "More" and clicks on it</span></span><br><span class="line">solo.clickOnText(<span class="string">"Preferences"</span>);</span><br><span class="line">solo.clickOnText(<span class="string">"Edit File Extensions"</span>);</span><br><span class="line">Assert.assertTrue(solo.searchText(<span class="string">"rtf"</span>));</span><br></pre></td></tr></table></figure>
<h3 id="模拟器">模拟器</h3><p>如果你全职开发Android App,那么买一个<a href="http://www.genymotion.com/" target="_blank" rel="external">Genymotion emulator</a>license吧。<br>Genymotion 模拟器运行更快的秒帧的速度，比起典型的AVD模拟器。他有演示你APP的工具，高质量的模拟网络连接，GPS位置，等等。它同时还有理想的连接测试。<br>你若涉及适配使用很多不同的设备，买一个Genymotion 版权是比你买很多真设备便宜多的。</p>
<p>注意：Genymotion模拟器没有装载所有的Google服务，如Google Play Store和Maps。你也可能需<br>要测试Samsung指定的API，若这样的话你还是需要购买一个真实的Samsung设备。</p>
<h3 id="混淆配置">混淆配置</h3><p><a href="http://proguard.sourceforge.net/" target="_blank" rel="external">ProGuard</a> 是一个在Android项目中广泛使用的压缩和混淆打包的源码的工具。</p>
<p>你是否使用ProGuard取决你项目的配置，当你构建一个release版本的apk时，通常你应该配置gradle文件。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">	debug &#123;</span><br><span class="line">		minifyEnabled <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	release &#123;</span><br><span class="line">		signingConfig signingConfigs.release</span><br><span class="line">		minifyEnabled <span class="literal">true</span></span><br><span class="line">		proguardFiles <span class="string">'proguard-rules.pro'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了决定哪些代码应该被保留，哪些代码应该被混淆，你不得不指定一个或多个实体类在你的代码中。<br>这些实体应该是指定的类包含main方法，applets，midlets，activities，等等。<br>Android framework 使用一个默认的配置文件，可以在<code>SDK_HOME/tools/proguard/proguard-android.txt</code><br>目录下找到。自定义的工程指定的 project-specific 混淆规则，如在<code>my-project/app/proguard-rules.pro</code>中定义，<br>会被添加到默认的配置中。</p>
<p>关于 ProGuard 一个普遍的问题，是看应用程序是否崩溃并报<code>ClassNotFoundException</code> 或者 <code>NoSuchFieldException</code> 或类似的异常，<br>即使编译是没有警告并运行成功。<br>这意味着以下两种可能：</p>
<ol>
<li>ProGuard 已经移除了类，枚举，方法，成员变量或注解，考虑是否是必要的。</li>
<li>ProGuard 混淆了类，枚举，成员变量的名称，但是这些名字又被拿原始名称使用了，比如通过Java的反射。</li>
</ol>
<p>检查<code>app/build/outputs/proguard/release/usage.txt</code>文件看有问题的对象是否被移除了。<br>检查 <code>app/build/outputs/proguard/release/mapping.txt</code> 文件看有问题的对象是否被混淆了。</p>
<p>In order to prevent ProGuard from <em>stripping away</em> needed classes or class members, add a <code>keep</code> options to your proguard config:<br>以防 ProGuard <em>剥离</em> 需要的类和类成员，添加一个 <code>keep</code>选项在你的 proguard 配置文件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keep class com.futurice.project.MyClass &#123; *; &#125;</span><br></pre></td></tr></table></figure></p>
<p>防止 ProGuard <em>混淆</em> 一些类和成员，添加 <code>keepnames</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keepnames class com.futurice.project.MyClass &#123; *; &#125;</span><br></pre></td></tr></table></figure></p>
<p>查看<a href="https://github.com/futurice/android-best-practices/blob/master/templates/rx-architecture/app/proguard-rules.pro" target="_blank" rel="external">this template’s ProGuard config</a> 中的一些例子。<br>更多例子请参考<a href="http://proguard.sourceforge.net/#manual/examples.html" target="_blank" rel="external">Proguard</a>。</p>
<p><strong>在构建项目之初，发布一个版本</strong> 来检查ProGuard规则是否正确的保持了重要的部分。<br>同时无论何时你添加了新的类库，做一个发布版本，同时apk在设备上跑起来测试一下。<br>不要等到你的app要发布 “1.0”版本了才做版本发布，那时候你可能会碰到好多意想不到的异常，需要一些时间去修复他们。</p>
<p><strong>Tips</strong>每次发布新版本都要写 <code>mapping.txt</code>。每发布一个版本，如果用户遇到一个bug，同时提交了一个混淆过的堆栈跟踪。<br>通过保留<code>mapping.txt</code>文件，来确定你可以调试的问题。</p>
<p><strong>DexGuard</strong> 若果你需要核心工具来优化，和专门混淆的发布代码，考虑使用<a href="http://www.saikoa.com/dexguard" target="_blank" rel="external">DexGuard</a>,<br>一个商业软件，ProGuard 也是有他们团队开发的。<br>它会很容易将Dex文件分割，来解决65K个方法限制问题。</p>
<h3 id="致谢">致谢</h3><p>感谢Antti Lammi, Joni Karppinen, Peter Tackage, Timo Tuominen, Vera Izrailit, Vihtori Mäntylä, Mark Voit, Andre Medeiros, Paul Houghton 这些人和Futurice 开发者分享他们的Android开发经验。</p>
<h3 id="License">License</h3><p><a href="www.futurice.com">Futurice Oy</a><br>Creative Commons Attribution 4.0 International (CC BY 4.0)</p>
<h3 id="Translation">Translation</h3><p>Translated to Chinese by <a href="https://github.com/andyiac" target="_blank" rel="external">andyiac</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从<a href="http://www.futurice.com">Futurice</a>公司Android开发者中学到的经验。</p>
<h3 id="摘要">摘要</h3><ul>
<li>使用 Gradle 和它推荐的工程结构</li>
<li>把密码和敏感数据放在gradle.properties</li>
<li>不要自己写 HTTP 客户端,使用Volley或OkHttp库</li>
<li>使用Jackson库解析JSON数据</li>
<li>避免使用Guava同时使用一些类库来避免<em>65k method limit</em>（一个Android程序中最多能执行65536个方法）</li>
<li>使用 Fragments来呈现UI视图</li>
<li>使用 Activities 只是为了管理 Fragments]]>
    
    </summary>
    
      <category term="Android" scheme="http://www.devwiki.net/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CleanCode笔记---对象和数据结构]]></title>
    <link href="http://www.devwiki.net/2015/07/08/CleanCode-Note-Object-Data/"/>
    <id>http://www.devwiki.net/2015/07/08/CleanCode-Note-Object-Data/</id>
    <published>2015-07-07T16:24:15.000Z</published>
    <updated>2015-07-08T04:41:21.649Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Clean-Code-LOGO.png" alt="CleanCode"></p>
<a id="more"></a>
<h2 id="数据抽象">数据抽象</h2><p>先看两段代码,都是表示笛卡尔坐标系的一个点.</p>
<p>代码一:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>代码二:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getY</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCartesian</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getR</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getTheta</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPolar</span><span class="params">(<span class="keyword">double</span> r, <span class="keyword">double</span> theta)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>你觉得哪个代码更好些?是不是代码二?</p>
<blockquote>
<p><strong>首先,代码一没有封装!</strong></p>
</blockquote>
<p>代码一中的x和y是完全暴露的,任何都可以直接访问和设置新的值.<br>代码二中加了一层封装,你只能通过get方法获取坐标值和set方法设置原子坐标值.</p>
<blockquote>
<p><strong>其次,具象与抽象</strong></p>
</blockquote>
<p>代码一是具象的一个点,只表示在直角坐标系的一个点.<br>代码二是抽象的一个点,可以表示直角坐标系一个点,也可表示极坐标系中的一个点.</p>
<blockquote>
<p><strong>但是,两个都明确了一种数据结构</strong></p>
</blockquote>
<hr>
<blockquote>
<p>隐藏实现并非是在变量之上添加一个函数层那么简单,隐藏关乎抽象.</p>
</blockquote>
<p>比如,我们现在需要知道手机还有多少电量.</p>
<p>代码三:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Battery</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取以mAh为单位的总电量,</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getTotalInmAh</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//获取以mAh为单位的剩余电量</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getRemainingInmAh</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>代码四<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Battery</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取剩余电量的百分比</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getRemainingPrecent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上两端代码,代码四最好.我们不愿意透露更多的细节,更愿意以抽象的形态表述数据.这并不只是用接口和赋值器取值器就能做好的事情.<strong>要以更好的方式呈现对象所包含的数据.</strong></p>
<h2 id="数据,对象的反对称性">数据,对象的反对称性</h2><p>从学java开始,书上就告诉我们java是面向对象语言.那么什么是面向对象什么是面向过程?</p>
<p>我们来看看下面的代码:</p>
<p>我们有正方形,长方形和圆形三种几何图形,最后要求出其面积.</p>
<p>代码一:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Point topLeft;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> side;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Point topLeft;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> width;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Point center;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Geometry</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14159265358</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">(Object shape)</span> <span class="keyword">throws</span> NoSuchShapeException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(shape <span class="keyword">instanceof</span> Square)&#123;</span><br><span class="line">            Square square = (Square)shape;</span><br><span class="line">            <span class="keyword">return</span> square.side * square.side;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Rectangle)&#123;</span><br><span class="line">            Rectangle rec = (Rectangle)shape;</span><br><span class="line">            <span class="keyword">return</span> rec.width * rec.hight;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Circle)&#123;</span><br><span class="line">            Circle cir = (Circle)shape;</span><br><span class="line">            <span class="keyword">return</span> PI * cir.radius * cir.radius;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchShapeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>代码二<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Point topLeft;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> side;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> side*side;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Point topLeft;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> height;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width * height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14159265358</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Point topLeft;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> area&#123;</span><br><span class="line">        <span class="keyword">return</span> PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从上面两端代码中我们可以看出,代码一每一个形状只负责存储数据,不具备行为.具体的计算行为放在了Geometry类中.每一个形状都是如何,形状之间没有任何联系.</p>
<p>而代码二中的三个类同属于集合图形Shape类,每种图形都有各自的计算面积的方法.这才是符合人类的世界观.</p>
<p>但是!!!<br>如果在代码一中添加计算周长的函数,每个形状都不会受到任何影响.而代码二中添加计算周长的函数,每一个函数都要有所变动.<br>如果在代码一种添加一个新的形状,既有的形状(数据结构)不会收到影响,但是计算的函数会收到影响.而在代码二中只需要添加一个新类而已,既有的类不会有任何影响.</p>
<blockquote>
<p>过程式的代码便于在不改动既有代码数据结构的前提下添加新的函数,而面向对象式的代码便于在不改动既有 函数的前提下添加新类.<br>反过来讲也说的通:过程式的代码难以添加新的数据结构,因为必须修改所有的函数.而面向对象代码难以添加新函数,因为必须修改所有的类.</p>
</blockquote>
<p>所以:</p>
<blockquote>
<p>面向对象较难的事情,对于过程式代码却叫较容易,反之亦然.</p>
</blockquote>
<p>这就是数据和对象的反对称性.</p>
<h2 id="得墨忒耳定律">得墨忒耳定律</h2><p>著名的得墨忒耳定律认为:<strong>模块不应该了解它所操作对象的内部的情形.</strong></p>
<p>即类C的方法f只应该调用以下对象的方法:</p>
<ul>
<li>C</li>
<li>由f创建的对象</li>
<li>作为参数传给f的对象</li>
<li>有C的实体变量持有的对象</li>
</ul>
<blockquote>
<p>方法不应该调用任何函数返回的对象的方法.换言之,只跟朋友交谈,不与陌生人谈话.</p>
</blockquote>
<p>以下代码明显违反了得墨忒耳定律:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String outputDir = ctxt.getOptions().getScartchDir().getAbsolutePath();</span><br></pre></td></tr></table></figure></p>
<p>这类代码常被作为火车失事,因为它就像一列火车,一旦出了问题,不知问题出在哪.最好做类如下的切分:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Options opts = ctxt.getOptions();</span><br><span class="line">File scratchDir = opts.getScratchDir();</span><br><span class="line"><span class="keyword">final</span> String outputDir = scratchDir.getAbsolutePath();</span><br></pre></td></tr></table></figure></p>
<p>以上代码是否违反得墨忒耳定律呢?<br>模块知道ctxt对象包含有多个选项,每个选项都有一个临时目录,而每个临时目录都有一个绝对路径.对于一个函数来讲,这些知识真是太丰富了.<br>这些代码是否违反得墨忒耳定律,就要看ctxt,Options,ScratchDir是对象还是数据结构.如果是对象,就违反了定律.如果是数据结构就没有违反.</p>
<p>如果是数据结构,就应该这样写代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String outputDir = ctxt.options.scratchDir.absolutePath;</span><br></pre></td></tr></table></figure></p>
<h2 id="数据传送对象">数据传送对象</h2><p>最精简的数据结构是一个只有公共变量,没有函数的类.这种数据结构有时被称为数据传送对象,或DTO(Data Transfer Objects).DTO是非常有用的结构,尤其是在与数据库通信,或解析套接字传递信息之类的场景之中.在应用程序代码里一系列将原始数据转换为数据的翻译过程中,他们往往是排头兵.</p>
<p>比如我们也曾写过这样的类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">(String street, String city, String state, String province)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.street = street;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        <span class="keyword">this</span>.province = province;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStreet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stree;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProvince</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> province;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>为什么要写这些get方法???为什么不直接将这些变量置为公共的呢?</p>
<h2 id="小结">小结</h2><p>对象暴露行为,封装数据.便于添加新对象类型而无需修改既有的行为,同时也难以在既有的对象中添加新的行为.<br>数据结构暴露数据,没有明显的行为,便于向既有的数据结构添加新的行为,同时也难以向既有的函数中添加新的数据结构.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Clean-Code-LOGO.png" alt="CleanCode"></p>]]>
    
    </summary>
    
      <category term="CleanCode" scheme="http://www.devwiki.net/tags/CleanCode/"/>
    
      <category term="代码整洁之道" scheme="http://www.devwiki.net/tags/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
      <category term="CleanCode-代码整洁之道" scheme="http://www.devwiki.net/categories/CleanCode-%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP学习笔记---了解Web及网络基础]]></title>
    <link href="http://www.devwiki.net/2015/07/02/Http-Web-Internet-Base/"/>
    <id>http://www.devwiki.net/2015/07/02/Http-Web-Internet-Base/</id>
    <published>2015-07-02T12:47:25.000Z</published>
    <updated>2015-07-02T12:47:25.874Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Learn-HTTP-With-Image.png" alt="HTTP"></p>
<a id="more"></a>
<h2 id="使用HTTP协议访问Web">使用HTTP协议访问Web</h2><p>当我们在浏览器的地址栏输入URL之后,信息会被送到某处,然后从某处返回相应的内容,最后显示在浏览器上.</p>
<p><strong>客户端</strong></p>
<blockquote>
<p>像这种通过发送请求获取服务资源的Web浏览器等,被称为客户端</p>
</blockquote>
<p>Web使用一种名为HTTP的协议作为规范,完成从客户端到服务器端等一系列运作流程.</p>
<h2 id="HTTP的诞生">HTTP的诞生</h2><h3 id="HTTP/0-9">HTTP/0.9</h3><p>HTTP问世,但那是的HTTP存在多处的模糊不清,并没有被作为正式的标准被建立.</p>
<h3 id="HTTP/1-0">HTTP/1.0</h3><p>1996年5月HTTP正式被作为标准,版本命名为HTTP/1.0,并记载于RFC1945.</p>
<blockquote>
<ul>
<li><a href="http://www.ietf.org/rfc/rfc1945.txt" target="_blank" rel="external">RFC1945 - Hypertext Transfer Protocol — HTTP/1.0</a></li>
</ul>
</blockquote>
<h3 id="HTTP/1-1">HTTP/1.1</h3><p>1997年1月公布的HTTP/1.1是目前主流的HTTP协议版本.当初的标准是RFC2068,之后发布的修订版RFC2616是当前的最新版.</p>
<blockquote>
<ul>
<li><a href="http://www.ietf.org/rfc/rfc2616.txt" target="_blank" rel="external">RFC2616 - Hypertext Transfer Protocol — HTTP/1.1</a></li>
</ul>
</blockquote>
<h2 id="网络基础TCP/IP">网络基础TCP/IP</h2><p>通常我们使用的网络是在TCP/IP协议族的基础上运作的,而HTTP属于它内部的一个子集.</p>
<h3 id="TCP/IP协议族">TCP/IP协议族</h3><p>计算机与网络设备要互相通信,双方就必须基于相同的方法.不同的硬件,操作系统之间的通信,所有的这一切都需要一种规则.而我们就把这种规则称为协议.</p>
<p>广义上讲:TCP/IP是互联网相关的各类协议族的总称,包括:TCP、IP、ICME、IEEE802.3、FDDI、HTTP、PPPoE、DNS、UDP、SNMP、FTP等.</p>
<p>侠义上讲:TCP/IP是指TCP和IP这两种协议.</p>
<h3 id="TCP/IP的分层管理">TCP/IP的分层管理</h3><p>TCP/IP协议族按层次分为以下4层:</p>
<blockquote>
<ul>
<li>应用层</li>
<li>传输层</li>
<li>网络层</li>
<li>数据链路层</li>
</ul>
</blockquote>
<p><strong>应用层</strong></p>
<blockquote>
<p>应用层决定了向用户提供应用服务时通信的活动.</p>
</blockquote>
<p>TCP/IP协议族内预存了各类通用的应用服务.比如:FTP(File Transfer Protocol,文件传输协议)、DNS(Domain Name System,域名系统)、HTTP(Hypertext Transfer Protocol,超文本传输协议)等;</p>
<p><strong>传输层</strong></p>
<blockquote>
<p>传输层对应上层应用层,提供处于网络连接中的两台计算机之间的数据传输.</p>
</blockquote>
<p>在传输层有两个性质不同的协议:TCP(Transmission Control Protocol,传输控制协议)和UDP(User Data Protocol,用户数据报协议).</p>
<p><strong>网络层(网络互联层)</strong></p>
<blockquote>
<p>网络层用来处理在网络上流动的数据包.</p>
</blockquote>
<p>数据包是网络传输的最小数据单位.该层规定了通过怎样的路径到达对方的计算机,并把数据包传给对方.</p>
<p><strong>链路层(网络接口层)</strong></p>
<blockquote>
<p>链路层用来处理连接网络的硬件部分.</p>
</blockquote>
<p>硬件包括:控制操作系统,精简的设备驱动,NIC,及光纤等物理可见部分.</p>
<h3 id="通信传输流">通信传输流</h3><p>利用TCP/IP协议族进行通信时,通信传输流入下图所示:</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/HTTP-TCP-IP-Stream-01.png" alt="通信传输流"></p>
<p>以HTTP举例说明,客户端在应用层发出一个想看某个Web页面的HTTP请求.</p>
<p>发送端在曾与层之间传输数据时,每经过一层必定会被打上一个该层所属的首部信息.反之,接收端在层与层之间传输数据时,每经过一层必定会对应的首部消去.如下图所示:</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/HTTP-TCP-IP-Stream-02.png" alt="通信传输流-详细"></p>
<h2 id="与HTTP关系密切的协议:IP,TCP和DNS">与HTTP关系密切的协议:IP,TCP和DNS</h2><h3 id="负责传输的IP协议">负责传输的IP协议</h3><blockquote>
<p>按层次分,IP网际协议位于网络层.</p>
</blockquote>
<p>IP协议的作用是把各种数据包传给对方.而要确保传到对方哪里,则需要满足各类条件,其中两个重要的条件是IP地址和MAC地址.</p>
<p>IP地址指明了节点被分配到的地址,MAC地址是网卡所属的固定地址.IP地址可以变换,但MAC地址基本不可变.</p>
<p>IP间的通信依赖MAC地址.在网络上,通信双方在同一局域网内的情况很少,通常是经过多态计算机和网络设备中转才能连接到对方,中转时会采用ARP协议根据通信方的IP地址反查出对应的MAC地址.</p>
<p>中转过程如下:</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/HTTP-IP-MAC-ARP.png" alt="通过IP中转"></p>
<h3 id="确保可靠的TCP协议">确保可靠的TCP协议</h3><blockquote>
<p>按层次分,TCP位于传输层,提供可靠的字节流服务.</p>
</blockquote>
<p>所谓的<strong>字节流服务</strong>是指,为了方便传输,将大块数据分割成以报文段为单位的数据包进行管理.</p>
<p><strong>可靠的传输服务</strong>是指,能够把数据准确可靠地传给对方.</p>
<p>为了确保数据能准确地到达目标,TCP采用三次握手的策略,其过程如下图所示:</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/HTTP-TCP-Three-Way-Handshaking.png" alt="TCP三次握手"></p>
<h3 id="负责域名解析的DNS服务">负责域名解析的DNS服务</h3><p>DNS服务和HTTP协议一样位于应用层的协议.</p>
<blockquote>
<p>DNS提供域名到IP之间的解析服务.</p>
</blockquote>
<p>解析过程如下图:</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/HTTP-DNS-IP.png" alt="DNS解析"></p>
<h2 id="各种协议与HTTP协议的关系">各种协议与HTTP协议的关系</h2><p>各种协议与HTTP的关系如下图所示:</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/HTTP-Other-Relation.png" alt="协议关系图"></p>
<h2 id="URI和URL">URI和URL</h2><h3 id="统一资源标识符">统一资源标识符</h3><p>URI是Uniform Resource Identifier的缩写,RFC2396的规定如下:</p>
<p><strong>Uniform</strong></p>
<blockquote>
<p>规定统一的格式可方便处理多种不同类型的资源,而不用根据上下文环境来十倍资源指定的访问方式.</p>
</blockquote>
<p><strong>Resource</strong></p>
<blockquote>
<p>资源的定义是可标识的任何东西.</p>
</blockquote>
<p><strong>Identifier</strong></p>
<blockquote>
<p>表示可标示的对象.</p>
</blockquote>
<p>综上可知:URI就是有某个协议方案表示的资源定位标识符.协议方案是指访问资源使用的协议类型名称.</p>
<p>标准的URI协议方案有30z种左右,其统一的资源标识符通用语法如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp://ftp.is.co.za/rfc/rfc1808.txt&#10;http://www.ietf.org/rfc/rfc2396.txt&#10;ldap://[2001:db8::7]/c=GB?objectClass?one&#10;mailto:John.Doe@example.com&#10;news:comp.infosystems.www.servers.unix&#10;tel:+1-816-555-1212&#10;telnet://192.0.2.16:80/&#10;urn:oasis:names:specification:docbook:dtd:xml:4.1.2</span><br></pre></td></tr></table></figure>
<h3 id="URI格式">URI格式</h3><p>URI的格式如下:</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/HTTP-URI-Format.png" alt="URI格式"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Learn-HTTP-With-Image.png" alt="HTTP"></p>]]>
    
    </summary>
    
      <category term="HTTP" scheme="http://www.devwiki.net/tags/HTTP/"/>
    
      <category term="网络基础" scheme="http://www.devwiki.net/tags/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
      <category term="HTTP学习笔记" scheme="http://www.devwiki.net/categories/HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[敏捷反馈---高效程序员的45个习惯读书笔记]]></title>
    <link href="http://www.devwiki.net/2015/07/01/Agile-Develop-Agile-Feedback/"/>
    <id>http://www.devwiki.net/2015/07/01/Agile-Develop-Agile-Feedback/</id>
    <published>2015-07-01T00:01:12.000Z</published>
    <updated>2015-07-01T11:52:58.090Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Agile-Develop.png" alt="敏捷开发之道"></p>
<a id="more"></a>
<h2 id="守护天使">守护天使</h2><blockquote>
<p>coding feedback 编写能产生反馈的代码</p>
</blockquote>
<p>1.为了应对代码的变化,你需要持续获得代码的健康状态的反馈:它是在做你期望的事情吗?</p>
<p>2.用代码来测试变量的具体值(以及跟踪运行了多少个测试),已经是非常普遍的做法.</p>
<p>3.对于测试我们要做到:</p>
<ul>
<li>确保测试是可重复的</li>
<li>测试你的边界条件</li>
<li>不要放过任何一个失败的测试</li>
</ul>
<p>4.只要有了单元测试,就要他们自动运行.也就是每次编译或者构建代码的时候就运行一次测试.</p>
<p>5.单元测试的理由:</p>
<ul>
<li>单元测试能及时提供反馈</li>
<li>单元测试让你的代码更加健壮</li>
<li>单元测试是有用的设计工具</li>
<li>单元测试是让你自信的后台</li>
<li>单元测试是解决问题时的探测器</li>
<li>单元测试是可信的文档</li>
<li>单元测试是学习工具</li>
</ul>
<p>6.单元测试是优质股,只得投资.</p>
<p>7.人们不编写单元测试的很多借口都是因为代码中的设计缺陷</p>
<p>8.单元测试只有在达到一定的覆盖率时才能真正地发挥作用.</p>
<p>9.不是测试越多质量就越高,测试必须要有效.</p>
<h2 id="先用它在实现它">先用它在实现它</h2><blockquote>
<p>Write tests before writeing code 编码之前先写测试</p>
</blockquote>
<p>1.如果要让你的产品尽可能的好,自己要先积极地使用它.</p>
<p>2.对于我们自己写的接口,在说服其他人使用之前,先得让自己切实地使用它们.</p>
<p>3.你会发现,因为你自己要使用它们,所以能设计一个更有用,更一致的接口.</p>
<p>4.学会使用TDD—-Test Driven Development,测试驱动开发.TDD有机会让你在编写代码之前,可以深思熟虑将如何使用它.这迫使你去思考它的可用性和便利性,并让你的设计更加注重实效.</p>
<p>5.设计不是开始编码的时候就结束了.你需要在设计的生命周期中持续地添加测试,添加代码,并重新设计代码.</p>
<p>6.任何一个设计都可以被改进.</p>
<p>7.单纯的单元测试是无法保证好的设计,但它们会对设计有帮助.</p>
<h2 id="不同环境就有不同的问题">不同环境就有不同的问题</h2><p>1.同一段代码可能在不同的机器上运行就会有不同的结果.</p>
<p>2.测试团队应该在项目所支持的所有平台上进行测试.</p>
<p>3.在保持可以发布中学过,用一个持续集成工具,周期性地从源代码控制系统中取得代码,并运行代码.如果测试失败了,就会通知相关的开发人员.要在多个平台上测试,你只要为每个平台设置持续集成系统就行了.</p>
<p>4.要积极地寻找问题,而不是等问题来找你.</p>
<p>5.硬件比开发人员的时间便宜.</p>
<p>6.软件在很多平台上出现bug很可能只是因为栈布局的差异,机器字大小的端的不同导致.</p>
<h2 id="自动验收测试">自动验收测试</h2><p>1.关键的业务逻辑必须要独立进行严格的测试,并且最后需要通过用户的审批.</p>
<p>2.使用集成测试框架,可以更容易地让用户验证是否为他们需要的业务.</p>
<p>3.让你的客户单独验证核心的业务逻辑,要让它们像一般的测试一样可以自动运行.</p>
<p>4.使用客户的业务逻辑,但不要陷入无边无际的文档写作之中.</p>
<h2 id="度量真实的进度">度量真实的进度</h2><blockquote>
<p>Focus on where you’re going 专注于你的方向</p>
</blockquote>
<p>1.判断工作进度最好的是看实际花费的时间,而不是估计的时间.</p>
<p>2.时间表很难真实地反应工作的完成状况,因此它不可以用来进行项目计划,评估或表现评估.</p>
<p>3.我们不应该去计算工作量完成的百分比,而应该测定还剩下多少工作量没有完成.</p>
<p>4.在你最后真正完成一项任务时,要清楚知道完成这个任务真正花费的时间,并在下一次评估任务时作为参考.</p>
<p>5.如果能一直让下一步工作是可见的,会有助于进度的度量.最好的做法就是使用待办事项.(bakclog)通过待办事项就可以随时知道下一步最重要的任务是什么.</p>
<p>6.<strong>不要用不巧当的度量来欺骗自己或者团队</strong></p>
<p>7.10分钟作为一个时间单位,它的颗粒度实在太细了.一周或者一个月的时间单元,它的颗粒度太粗了.一般以一天或者半天作为时间单位.</p>
<p>8.一周工作40小时,不是说你就有40小时的编码时间.</p>
<h2 id="倾听用户的声音">倾听用户的声音</h2><blockquote>
<p>It is a bug! 这是一个bug.</p>
</blockquote>
<p>1.每一个抱怨的背后都隐藏一个事实,找出真相,修复真正的问题.</p>
<p>2.没有愚蠢的用户,只有愚蠢的自大的开发人员.</p>
<p>3.当除了问题,你要尽可能地提供详细的信息.</p>
<p>4.不管是产品的bug,还是文档的bug,或者是对用户社区理解的bug,他都是团队的问题,而不是用户的问题.</p>
<p>5.我们花费了很大精力从单元测试之类的代码中获得反馈,但却容易忽略最终用户的反馈.</p>
<p>6.不仅需要和真实的用户进行交谈,还需要耐心地倾听.</p>
<p>7.如果代码解决不了问题,也许可以考虑通过修改文档或者培训来弥补.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Agile-Develop.png" alt="敏捷开发之道"></p>]]>
    
    </summary>
    
      <category term="敏捷开发" scheme="http://www.devwiki.net/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
      <category term="高效程序员" scheme="http://www.devwiki.net/tags/%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="高效程序员的45个习惯" scheme="http://www.devwiki.net/categories/%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8445%E4%B8%AA%E4%B9%A0%E6%83%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[七牛简易上传工具的制作]]></title>
    <link href="http://www.devwiki.net/2015/06/25/Qiniu-Upload-Tool/"/>
    <id>http://www.devwiki.net/2015/06/25/Qiniu-Upload-Tool/</id>
    <published>2015-06-25T10:24:47.000Z</published>
    <updated>2015-08-05T12:17:50.272Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/qiniu-logo.png" alt="七牛LOGO"></p>
<a id="more"></a>
<p>最近刚弄博客,存放图片是个问题.想到网公司项目用的是七牛云存储,就想为何不把自己的图片也存到七牛云存储呢?</p>
<p>说做就做,跑到七牛官网,注册账号,激活账号,终于弄好了.上传文件时才发现,只能网页在线上传和Qsync GUI两种界面上传.觉得不太友好,看到了官网给了那么多SDK,为什么不自己做一个简易的上传工具呢?</p>
<h2 id="开工">开工</h2><p>说做就做,下载SDK,新建工程,开始码代码.上传工具功能很简单,<strong>以后慢慢添加功能</strong>.先上图:</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-01.png" alt="主界面"></p>
<p>项目代码一览:</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-00.png" alt="项目代码界面"></p>
<h2 id="依赖包">依赖包</h2><p>项目依赖的包有:</p>
<ol>
<li><p><a href="http://search.maven.org/remotecontent?filepath=com/qiniu/qiniu-java-sdk/7.0.3/qiniu-java-sdk-7.0.3.jar" target="_blank" rel="external">qiniu-java-sdk-7</a></p>
</li>
<li><p><a href="http://search.maven.org/remotecontent?filepath=com/google/code/gson/gson/2.3.1/gson-2.3.1.jar" target="_blank" rel="external">Google Gson</a></p>
</li>
<li><p><a href="http://search.maven.org/remotecontent?filepath=com/squareup/okhttp/okhttp/2.4.0/okhttp-2.4.0.jar" target="_blank" rel="external">okhttp (JDK1.7 及以上)</a></p>
</li>
<li><p><a href="http://search.maven.org/remotecontent?filepath=com/squareup/okio/okio/1.5.0/okio-1.5.0.jar" target="_blank" rel="external">okio (JDK1.7 及以上)</a></p>
</li>
</ol>
<h2 id="配置">配置</h2><p>因为急着使用,所以就把配置写死在代码里了,等增加功能时在改为动态.配置代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Config</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCESS_KEY = <span class="string">"你的AccessKey"</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECRET_KEY = <span class="string">"你的SecretKey"</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BUCKET = <span class="string">"你的Bucket名称"</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"你的外链前缀"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="上传">上传</h2><p>上传部分目前采用官方的简易上传,key值为文件名称.以后再增加其他上传功能.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadHelper</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	Auth auth = Auth.create(Config.ACCESS_KEY, Config.SECRET_KEY);</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String filePath, String key)</span></span>&#123;</span><br><span class="line">		UploadManager uploadManager = <span class="keyword">new</span> UploadManager();</span><br><span class="line">	    String token = auth.uploadToken(Config.BUCKET);</span><br><span class="line">	    <span class="keyword">try</span> &#123;</span><br><span class="line">			Response response = uploadManager.put(filePath, key, token);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (QiniuException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="界面">界面</h2><p>使用Swing写的纯Java界面,很简单:</p>
<ol>
<li>一个选择文件按钮</li>
<li>一个显示文本框</li>
<li>一个文件选择器</li>
<li>一个上传按钮</li>
</ol>
<p>代码如下所示:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> JFrame rootFrame;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> JButton chooseButton;</span><br><span class="line">	<span class="keyword">private</span> JFileChooser fileChooser;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> TextArea uploadInfoArea;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> JButton uploadButtton;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> File selectedFile;</span><br><span class="line">	<span class="keyword">private</span> String filePath;</span><br><span class="line">	<span class="keyword">private</span> String fileName;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">		initRootLayout();</span><br><span class="line">		</span><br><span class="line">		initFileChooserLayout();</span><br><span class="line"></span><br><span class="line">		initUploadResultLayout();</span><br><span class="line">		</span><br><span class="line">		initUploadLayout();</span><br><span class="line">		</span><br><span class="line">		rootFrame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initRootLayout</span><span class="params">()</span></span>&#123;</span><br><span class="line">		rootFrame = <span class="keyword">new</span> JFrame(<span class="string">"Qiniu Upload Tool"</span>);</span><br><span class="line">		rootFrame.setBounds(<span class="number">660</span>, <span class="number">340</span>, <span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line">		rootFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFileChooserLayout</span><span class="params">()</span></span>&#123;</span><br><span class="line">		fileChooser = <span class="keyword">new</span> JFileChooser();</span><br><span class="line">		fileChooser.setApproveButtonText(<span class="string">"打开"</span>);</span><br><span class="line">		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);</span><br><span class="line">		fileChooser.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">		</span><br><span class="line">		chooseButton = <span class="keyword">new</span> JButton(<span class="string">"打开"</span>);</span><br><span class="line">		chooseButton.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUploadResultLayout</span><span class="params">()</span></span>&#123;</span><br><span class="line">		uploadInfoArea = <span class="keyword">new</span> TextArea();</span><br><span class="line">		</span><br><span class="line">		JPanel uploadInfoPanel = <span class="keyword">new</span> JPanel();</span><br><span class="line">		uploadInfoPanel.add(uploadInfoArea);</span><br><span class="line">		</span><br><span class="line">		rootFrame.add(uploadInfoPanel, BorderLayout.CENTER);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUploadLayout</span><span class="params">()</span></span>&#123;</span><br><span class="line">		uploadButtton = <span class="keyword">new</span> JButton(<span class="string">"上传"</span>);</span><br><span class="line">		uploadButtton.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">		</span><br><span class="line">		JPanel uploadPanel = <span class="keyword">new</span> JPanel();</span><br><span class="line">		uploadPanel.add(chooseButton);</span><br><span class="line">		uploadPanel.add(uploadButtton);</span><br><span class="line">		</span><br><span class="line">		rootFrame.add(uploadPanel, BorderLayout.SOUTH);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">		String text = e.getActionCommand();</span><br><span class="line">		<span class="keyword">int</span> result ;</span><br><span class="line">		<span class="keyword">switch</span> (text) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"打开"</span>:</span><br><span class="line">			result = fileChooser.showOpenDialog(<span class="keyword">null</span>);</span><br><span class="line">			<span class="keyword">if</span> (result == JFileChooser.APPROVE_OPTION)&#123;</span><br><span class="line">				selectedFile = fileChooser.getSelectedFile();</span><br><span class="line">				filePath = selectedFile.getAbsolutePath();</span><br><span class="line">				fileName = selectedFile.getName();</span><br><span class="line">				uploadInfoArea.append(filePath + <span class="string">"\n"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"上传"</span>:</span><br><span class="line">			<span class="keyword">if</span> (filePath != <span class="keyword">null</span>) &#123;</span><br><span class="line">				uploadInfoArea.append(<span class="string">"上传中..."</span> + <span class="string">"\n"</span>);</span><br><span class="line">				<span class="keyword">new</span> UploadHelper().uploadFile(filePath, fileName);</span><br><span class="line">				uploadInfoArea.append(<span class="string">"Success"</span> + <span class="string">"\n"</span>);</span><br><span class="line">				uploadInfoArea.append(<span class="string">"外链为:"</span> + Config.URL + fileName + <span class="string">"\n"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="编译打包">编译打包</h2><p>编译打包需要一个工具:<a href="http://samyon.newhua.com:82/down/exe4j_windows-x64_5_0_1.zip" target="_blank" rel="external">exe4j-X64</a></p>
<p>此过程需要两步:</p>
<ol>
<li>用Eclipse导出Jar包</li>
<li>用exe4j打包成可运行的exe文件</li>
</ol>
<h3 id="导出jar包">导出jar包</h3><p>步骤如下:<br>对项目右键—&gt;export</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-05.png" alt="导包步骤01"></p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-06.png" alt="导包步骤02"></p>
<h3 id="打包为exe文件">打包为exe文件</h3><p>首先安装exe4j,安装完成后启动,如下图,然后直接下一步(next);</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-07.png" alt="打包为exe步骤01"></p>
<p>选择红框处,然后下一步</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-08.png" alt="打包为exe步骤02"></p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-09.png" alt="打包为exe步骤03"></p>
<p>选择打包为32位还是64位</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-10.png" alt="打包为exe步骤04"></p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-11.png" alt="打包为exe步骤05"></p>
<p>填写相关信息</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-12.png" alt="打包为exe步骤06"></p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-13.png" alt="打包为exe步骤07"></p>
<p>选择jre的兼容版本</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-14.png" alt="打包为exe步骤08"></p>
<p>一直下一步到:</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-15.png" alt="打包为exe步骤10"></p>
<h2 id="测试工具">测试工具</h2><p>打开工具:</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-01.png" alt="测试步骤01"></p>
<p>选择文件</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-02.png" alt="测试步骤02"></p>
<p>选择文件完成</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-03.png" alt="测试步骤03"></p>
<p>开始上传</p>
<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Qiniu-Upload-Tool-04.png" alt="测试步骤04"></p>
<h2 id="总结">总结</h2><p>目前功能十分单一,但是解决了文件上传的问题.以后再慢慢更新.<br>如有问题请在下面留言,我会尽快回复的.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/qiniu-logo.png" alt="七牛LOGO"></p>]]>
    
    </summary>
    
      <category term="七牛" scheme="http://www.devwiki.net/tags/%E4%B8%83%E7%89%9B/"/>
    
      <category term="上传工具" scheme="http://www.devwiki.net/tags/%E4%B8%8A%E4%BC%A0%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CleanCode笔记---格式]]></title>
    <link href="http://www.devwiki.net/2015/06/24/CleanCode-Note-Formatter/"/>
    <id>http://www.devwiki.net/2015/06/24/CleanCode-Note-Formatter/</id>
    <published>2015-06-24T15:46:05.000Z</published>
    <updated>2015-07-06T04:56:02.497Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Clean-Code-LOGO.png" alt="CleanCode"></p>
<a id="more"></a>
<p>我本人算是一个有洁癖的程序猿,喜欢整齐格式的代码.</p>
<h2 id="格式的意义">格式的意义</h2><p>让代码能工作不是编程的头等大事,因为代码首先是给人看的,其次才是给计算机看的.</p>
<p>代码是团队沟通的桥梁,乱糟糟的代码是没有人想看的.</p>
<h2 id="垂直格式">垂直格式</h2><p>一个Java类文件应该有多长?这是个问题.有人可能说100行,有人可能说1000行.</p>
<p>但是人们倾向于短的代码文件,所以一个类文件应该越短越好,尽量不要超过1000行.</p>
<h3 id="向报纸学习">向报纸学习</h3><p>代码排版应该像报纸一样.从上往下读,在顶部应该有个类似标题一样的东西,告诉读者大致内容是什么,再往下是章节,告诉读者代码有哪些部分组成,章节下面是细节,如果读者感兴趣可以了解这部分实现的细节.</p>
<p>比如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Button backButton;</span><br><span class="line"><span class="keyword">private</span> TextView titleView;</span><br><span class="line"><span class="keyword">private</span> Button settingButton;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    initUtil();</span><br><span class="line">    initUI();</span><br><span class="line">    initData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUtil</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUI</span><span class="params">()</span></span>&#123;</span><br><span class="line">    initNavigationView();</span><br><span class="line">    </span><br><span class="line">    initContentView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initNavigationView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    backButton = (Button) findViewById(R.id.btn_back);</span><br><span class="line">    backButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    titleView = (TextView) findViewById(R.id.tv_title);</span><br><span class="line">    settingButton = (Button) findViewById(R.id.btn_setting);</span><br><span class="line">    settingButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initNavigationView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initContentView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="垂直方向上的分割">垂直方向上的分割</h3><p>几乎所有的代码都是从上往下读,从左往右读.每行展现一个表达式或者一个字句或者一个方法调用,每组代码行展示一条完整的思路.这些思路都是用空白行分隔开来.</p>
<p>就像上面的initUI()方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUI</span><span class="params">()</span></span>&#123;</span><br><span class="line">    initNavigationView();</span><br><span class="line">    </span><br><span class="line">    initContentView();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>空白行让我们很容易明白初始化界面的步骤:</p>
<ol>
<li>初始化导航栏组件</li>
<li>初始化内容视图</li>
</ol>
<h3 id="垂直距离">垂直距离</h3><p>从上面的代码可以看出,关系密切的方法应该靠近;关系不密切的要分隔开来.这样很容易理解系统要做什么,怎么去做,不需要你去记住查找和记住代码碎片在哪里.</p>
<p>如何做到靠近与分隔呢?</p>
<ol>
<li>方法内的局部变量声明放在方法的顶部.</li>
<li>对象变量的声明放在类的顶部.</li>
<li>相关的函数应靠近放置.</li>
<li>概念相近的代码应该放在一起.</li>
</ol>
<h3 id="垂直顺序">垂直顺序</h3><p>一般而言,我们都想自上而下展示函数的依赖调用.也就是说被调用的函数在执行函数的下面.</p>
<h2 id="横向格式">横向格式</h2><p>一般而言,一行代码不应多于100个字符.</p>
<h3 id="水平方向上的分隔与靠近">水平方向上的分隔与靠近</h3><p>赋值语句的等号左右空一格,可以起到强调的作用.</p>
<p>多参方法中,参数的逗号后空一格,表明参数的独立性.</p>
<p>所以水平方向上也应遵循关系密切的靠近,关系交远的分隔.</p>
<h3 id="水平对齐">水平对齐</h3><p><strong>不需要水平方向上的有意识的对齐</strong>,比如下面:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Button   backButton;</span><br><span class="line"><span class="keyword">private</span> TextView titleView;</span><br><span class="line"><span class="keyword">private</span> Button   settingButton;</span><br></pre></td></tr></table></figure></p>
<p>如果出现名称更长的类型,所有的变量又得重新对齐.所以不推荐此种方式.</p>
<h3 id="缩进">缩进</h3><p><strong>缩进表明的代码的影响范围!</strong></p>
<p>缩进有利于代码的阅读,明确代码之间的等级关系和影响范围.</p>
<p>切记:单行也要缩进.不要违反缩进规则.</p>
<p>每个人都有不同的写代码的风格,个人建议按照Google的Java代码风格来编写代码.详情请点击此处查看:<br><a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="external">Google Java编程风格</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Clean-Code-LOGO.png" alt="CleanCode"></p>]]>
    
    </summary>
    
      <category term="CleanCode" scheme="http://www.devwiki.net/tags/CleanCode/"/>
    
      <category term="代码整洁之道" scheme="http://www.devwiki.net/tags/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
      <category term="CleanCode-代码整洁之道" scheme="http://www.devwiki.net/categories/CleanCode-%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android调试Log二次包装]]></title>
    <link href="http://www.devwiki.net/2015/06/24/Android-New-Log/"/>
    <id>http://www.devwiki.net/2015/06/24/Android-New-Log/</id>
    <published>2015-06-24T11:16:22.000Z</published>
    <updated>2015-07-08T04:41:21.633Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Android-New-Log-Logo.png" alt=""></p>
<a id="more"></a>
<p>在Android开发过程中经常使用Log打印一些调试的信息,比如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.d(TAG, <span class="string">"xxxxx"</span>);</span><br></pre></td></tr></table></figure></p>
<p>但是,每一个类都要定义一个TAG,一般TAG等于类名本身,比较繁琐.更重要的是,每次还要带上这个参数.如果打印的信息比较多或者一个类的代码数量比较长时,不太方便查找Log的位置.那么有没有一种方法,解决上面的问题呢?</p>
<h2 id="问题分析">问题分析</h2><blockquote>
<ol>
<li>每个类的TAG等于类名,那么能不能自己去寻找类名呢?</li>
<li>能不能找到打印log所在的位置呢?</li>
</ol>
</blockquote>
<h2 id="解决问题">解决问题</h2><p>答案是肯定的!在Java中可以使用Throwable类获取栈的信息.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StackTraceElement[] elements = <span class="keyword">new</span> Throwable().getStackTrace();</span><br><span class="line">String className = elements[<span class="number">1</span>].getFileName();</span><br><span class="line">String methodName = elements[<span class="number">1</span>].getMethodName();</span><br><span class="line"><span class="keyword">int</span> lineNumber = elements[<span class="number">1</span>].getLineNumber();</span><br></pre></td></tr></table></figure></p>
<p>通过此方法可以获取类名,方法名,行号信息.获取到信息后还需在包装一下,因为是Debug时的Log就取名DLog吧.<br>那么Dlog中肯定要有一个Log的实例,还要与Log方法同名的方法,比如v(),d(),e(),w(),i()等.如下所示:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DLog</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String className;			<span class="comment">//所在的类名</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String methodName;			<span class="comment">//所在的方法名</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> lineNumber;				<span class="comment">//所在行号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">	 * 私有化构造器</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">DLog</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 是否处于调试模式</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDebuggable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> BuildConfig.DEBUG;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 创建Log信息</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">createLog</span><span class="params">(String log)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		buffer.append(<span class="string">"["</span>);</span><br><span class="line">		buffer.append(methodName);</span><br><span class="line">		buffer.append(<span class="string">":"</span>);</span><br><span class="line">		buffer.append(lineNumber);</span><br><span class="line">		buffer.append(<span class="string">"]"</span>);</span><br><span class="line">		buffer.append(log);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> buffer.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 获取类名,方法名,行号</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMethodNames</span><span class="params">(StackTraceElement[] sElements)</span> </span>&#123;</span><br><span class="line">		className = sElements[<span class="number">1</span>].getFileName();</span><br><span class="line">		methodName = sElements[<span class="number">1</span>].getMethodName();</span><br><span class="line">		lineNumber = sElements[<span class="number">1</span>].getLineNumber();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">		Log.v(className, createLog(message));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">		Log.d(className, createLog(message));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">		Log.i(className, createLog(message));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">		Log.w(className, createLog(message));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">		Log.e(className, createLog(message));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="再次优化">再次优化</h2><p>这样好了,即能自己找到类名,又能打印出Log信息所在的位置.且慢,还有一个问题:</p>
<blockquote>
<p>如果一个项目中使用了很多Log输出,项目结束时又不允许在打印这些信息怎么办?难道要一个一个删除?</p>
</blockquote>
<p>一个一个删除太麻烦了,谁让我们都想偷懒呢!为何我们不在上面的那个类加个控制,不想输出可以一键屏蔽多好呀.</p>
<blockquote>
<p>Log中的信息是有类别的,我们可以给每个类别分个序号,在来一个控制序号的级别,这样就可以控制显示的类别,</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 包装后的Log输出,可控制显示哪些级别的LOG</span><br><span class="line"> * <span class="doctag">@author</span> Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DLog</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String className;			<span class="comment">//所在的类名</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String methodName;			<span class="comment">//所在的方法名</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> lineNumber;				<span class="comment">//所在行号</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERBOSE = <span class="number">1</span>;		  <span class="comment">//显示Verbose及以上的Log</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEBUG = <span class="number">2</span>;			<span class="comment">//显示Debug及以上的Log</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INFO = <span class="number">3</span>;			<span class="comment">//显示Info及以上的Log</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WARN = <span class="number">4</span>;			<span class="comment">//显示Warn及以上的Log</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ERROR = <span class="number">5</span>;			<span class="comment">//显示Error及以上的Log</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOTHING = <span class="number">6</span>;		<span class="comment">//全部不显示</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LEVEL = VERBOSE;	<span class="comment">//控制显示的级别</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">DLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDebuggable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> BuildConfig.DEBUG;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">createLog</span><span class="params">(String log)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		buffer.append(<span class="string">"["</span>);</span><br><span class="line">		buffer.append(methodName);</span><br><span class="line">		buffer.append(<span class="string">":"</span>);</span><br><span class="line">		buffer.append(lineNumber);</span><br><span class="line">		buffer.append(<span class="string">"]"</span>);</span><br><span class="line">		buffer.append(log);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> buffer.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMethodNames</span><span class="params">(StackTraceElement[] sElements)</span> </span>&#123;</span><br><span class="line">		className = sElements[<span class="number">1</span>].getFileName();</span><br><span class="line">		methodName = sElements[<span class="number">1</span>].getMethodName();</span><br><span class="line">		lineNumber = sElements[<span class="number">1</span>].getLineNumber();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (LEVEL &lt;= VERBOSE) &#123;</span><br><span class="line">			getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">			Log.v(className, createLog(message));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (LEVEL &lt;= DEBUG) &#123;</span><br><span class="line">			getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">			Log.d(className, createLog(message));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (LEVEL &lt;= INFO) &#123;</span><br><span class="line">			getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">			Log.i(className, createLog(message));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (LEVEL &lt;= WARN) &#123;</span><br><span class="line">			getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">			Log.w(className, createLog(message));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (LEVEL &lt;= ERROR) &#123;</span><br><span class="line">			getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">			Log.e(className, createLog(message));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用方法">使用方法</h2><p>Dlog和Android自带的Log类一样,直接打印信息.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Dlog.d(<span class="string">"Test Dlog"</span>);</span><br><span class="line">Dlog.e(<span class="string">"Test Dlog"</span>);</span><br><span class="line">Dlog.v(<span class="string">"Test Dlog"</span>);</span><br><span class="line">Dlog.i(<span class="string">"Test Dlog"</span>);</span><br><span class="line">Dlog.w(<span class="string">"Test Dlog"</span>);</span><br></pre></td></tr></table></figure></p>
<p>显示效果如下:<br><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Android-New-Log-Pic01.png" alt="打印效果"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Android-New-Log-Logo.png" alt=""></p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://www.devwiki.net/tags/Android/"/>
    
      <category term="Log" scheme="http://www.devwiki.net/tags/Log/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP学习笔记---状态码]]></title>
    <link href="http://www.devwiki.net/2015/06/24/Http-Status-Code/"/>
    <id>http://www.devwiki.net/2015/06/24/Http-Status-Code/</id>
    <published>2015-06-24T11:06:15.000Z</published>
    <updated>2015-07-02T12:47:05.417Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Learn-HTTP-With-Image.png" alt="HTTP"></p>
<a id="more"></a>
<h2 id="定义">定义</h2><blockquote>
<p>状态码:客户端访问服务器时返回的结果状态.</p>
</blockquote>
<h2 id="格式">格式</h2><p>通常状态码是三位数字和原因短语组成,其中第一位数字为响应类别.比如</p>
<blockquote>
<p>200 OK</p>
</blockquote>
<h2 id="类别">类别</h2><p>响应类别有以下5种:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>类别</th>
<th>原因短语</th>
</tr>
</thead>
<tbody>
<tr>
<td>1XX</td>
<td>Information(信息性状态码)</td>
<td>接收的请求长在处理</td>
</tr>
<tr>
<td>2XX</td>
<td>Success(成功状态码)</td>
<td>请求正常处理完毕</td>
</tr>
<tr>
<td>3XX</td>
<td>Redirection(重定向状态码)</td>
<td>需要进行附加操作以完成请求</td>
</tr>
<tr>
<td>4XX</td>
<td>Client Error(客户端错误状态码)</td>
<td>服务器无法处理请求</td>
</tr>
<tr>
<td>5XX</td>
<td>Server Error(服务器错误窗台吗)</td>
<td>服务器处理请求出错</td>
</tr>
</tbody>
</table>
<h2 id="常用状态码">常用状态码</h2><h3 id="2XX_成功">2XX 成功</h3><blockquote>
<ul>
<li>200 OK 表示客户端发来的请求在服务器被正常处理了.</li>
<li>204 No Content 服务器接收的请求已经成功处理,但返回的响应报文中不含实体的主体部分.</li>
<li>206 Partial Content 客户端进行了范围请求,服务器成功执行了这部分的GET请求.</li>
</ul>
</blockquote>
<h3 id="3XX_重定向">3XX 重定向</h3><blockquote>
<ul>
<li>301 Moved Permanently 永久性重定向</li>
<li>302 Found 临时性重定向</li>
<li>303 See Other 请求对应的资源存在着另一个URI,应使用GET方法重新获取请求的资源.</li>
<li>304 Not Modify 客户端发送附加条件的请求时,服务器端允许请求访问资源.</li>
<li>307 Temporary Redirect 临时重定向</li>
</ul>
</blockquote>
<h3 id="4XX_客户端错误">4XX 客户端错误</h3><blockquote>
<ul>
<li>400 Bad Request 请求报文中存在语法错误.</li>
<li>401 Unauthorized 权鉴失败,需要有HTTP认证的认证信息.</li>
<li>403 Forbidden 请求的资源被服务器拒绝了</li>
<li>404 Not Fount 服务器无法找到该资源.</li>
</ul>
</blockquote>
<h3 id="5XX_服务器错误">5XX 服务器错误</h3><blockquote>
<ul>
<li>500 Internal Server Error 服务器执行请求时发生错误</li>
<li>503 Service Unavailable 服务器暂时处于超负载或正在进行停机维护,现在无法处理请求.</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Learn-HTTP-With-Image.png" alt="HTTP"></p>]]>
    
    </summary>
    
      <category term="HTTP" scheme="http://www.devwiki.net/tags/HTTP/"/>
    
      <category term="HTTP状态码" scheme="http://www.devwiki.net/tags/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    
      <category term="HTTP学习笔记" scheme="http://www.devwiki.net/categories/HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CleanCode笔记---注释]]></title>
    <link href="http://www.devwiki.net/2015/06/24/CleanCode-Note-Comments/"/>
    <id>http://www.devwiki.net/2015/06/24/CleanCode-Note-Comments/</id>
    <published>2015-06-24T01:02:25.000Z</published>
    <updated>2015-07-06T04:55:48.014Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Clean-Code-LOGO.png" alt="CleanCode"></p>
<a id="more"></a>
<blockquote>
<p>什么也比不上放置良好的注释来的有用,什么也不会比乱七八糟的注释更有本事搞乱一个模块!</p>
</blockquote>
<p>如果我们擅长用开发语言来表达意图,就不那么需要注释,甚至根本不需要!</p>
<p>注释的巧当用法是弥补我们在代码表达意图时遭遇失败.</p>
<p>如果你发现自己需要写注释,在想想看是否有办法不写注释.</p>
<p>程序员应当负责将注释保持在可维护,有关联,精确的高度.</p>
<h2 id="注释不能美化代码">注释不能美化代码</h2><p>写注释的常见动机之一是糟糕代码的存在.与其花时间编写注释不如花时间清洁糟糕的代码.</p>
<h2 id="用代码来阐述">用代码来阐述</h2><p>比如以下代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//check to see if the employee is eligible for full benfits</span></span><br><span class="line"><span class="keyword">if</span>((employee.flag &amp; HOURLY_FLAG) &amp;&amp; (employee.age &gt; <span class="number">65</span>))</span><br></pre></td></tr></table></figure></p>
<p>为何不改为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(employee.isEligibleForFullBenefits())</span><br></pre></td></tr></table></figure></p>
<p>只需要几秒钟,就能用代码解释大部分的意图.</p>
<h2 id="好注释">好注释</h2><p>好注释有以下几项:</p>
<ol>
<li>法律信息</li>
<li>提供信息的注释</li>
<li>对意图的解释</li>
<li>阐释</li>
<li>警示</li>
<li>TODO注释</li>
<li>放大</li>
<li>公共API中的javadoc</li>
</ol>
<h2 id="坏注释">坏注释</h2><p>坏注释包括以下:</p>
<ol>
<li>呐呐自语</li>
<li>多余的注释</li>
<li>误导性注释</li>
<li>循规式注释</li>
<li>日志式注释</li>
<li>位置标记</li>
<li>括号后的注释</li>
<li>归属与署名</li>
<li>注释掉的代码</li>
<li>HTML注释</li>
<li>非本地信息</li>
<li>信息过多</li>
<li>不明显的联系</li>
<li>函数头</li>
<li>非公共代码中的javadoc</li>
</ol>
<p>切记<strong>能用函数或变量就别用注释</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Clean-Code-LOGO.png" alt="CleanCode"></p>]]>
    
    </summary>
    
      <category term="CleanCode" scheme="http://www.devwiki.net/tags/CleanCode/"/>
    
      <category term="代码整洁之道" scheme="http://www.devwiki.net/tags/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
      <category term="CleanCode-代码整洁之道" scheme="http://www.devwiki.net/categories/CleanCode-%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CleanCode笔记---函数]]></title>
    <link href="http://www.devwiki.net/2015/06/24/CleanCode-Note-Function/"/>
    <id>http://www.devwiki.net/2015/06/24/CleanCode-Note-Function/</id>
    <published>2015-06-24T00:47:35.000Z</published>
    <updated>2015-07-06T04:56:02.495Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Clean-Code-LOGO.png" alt="CleanCode"></p>
<a id="more"></a>
<h2 id="函数要短小">函数要短小</h2><p><strong>函数第一原则要短小,第二原则还是要短小</strong></p>
<p>如果函数需要翻页,就有拆分的必要了.翻页往往会导致看着下面忘了上面.</p>
<p>一个函数不要太长,一般每行不超过100个字符,行数不超过30行.</p>
<p>if, else, while, case语句中代码应只有一行,该行要描述特定条件下要做的事情.</p>
<h2 id="只做一件事">只做一件事</h2><p>函数也应该遵守单一职责原则,即一个函数只做一件事情.比如一个检查登陆账户的函数:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isAccountAccess = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(userName.isAccess() &amp;&amp; password.isAcces())&#123;</span><br><span class="line">        isAccountAccess = <span class="keyword">true</span>;</span><br><span class="line">        login();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        isAccountAccess = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>函数名称为checkAccount,意为检查账户;而里面当账户可用是却请求登录.</p>
<p>如果开发人员未仔细检查代码,只看函数名,很容易出现问题.检查账户的函数就应该只检查账户,而不应该在做其他事情.</p>
<h2 id="每个函数一个抽象层次">每个函数一个抽象层次</h2><p>一个函数不应该既有抽象又有细节!</p>
<p>我们经常写Android的Activity时这样:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    </span><br><span class="line">    ToastUtil.init(<span class="keyword">this</span>);</span><br><span class="line">        </span><br><span class="line">    startButton = findViewById(R.id.start_button);</span><br><span class="line">    resultView= findViewById(R.id.result_view);</span><br><span class="line">    startButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    resultView.setText(<span class="string">"结果为:"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>抛去2,3两行不说.第5行为抽象,而第7~10行为细节,这样读下来,突然发生了变化,会误入到细节之中.<br>不如改为下面这样:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    </span><br><span class="line">    ToastUtil.init(<span class="keyword">this</span>);</span><br><span class="line">        </span><br><span class="line">    initView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    startButton = findViewById(R.id.start_button);</span><br><span class="line">    resultView= findViewById(R.id.result_view);</span><br><span class="line">    startButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    resultView.setText(<span class="string">"结果为:"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样只需阅读在onCreate中做了哪些事情,而不需要去知道具体怎么做的.所以一个函数应保持同一抽象层次.</p>
<h2 id="switch语句">switch语句</h2><p>我们一般写switch语句往往如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当有多个分支时,switch语句往往会很长.可以通过以下来改善:</p>
<ol>
<li>每个case下只有一行代码.</li>
<li>使用策略模式分解.</li>
</ol>
<h2 id="使用描述性的名称">使用描述性的名称</h2><p>函数的名称应该看到名字就知道该函数要做什么事情<br>比如上面的checkAccount(),看到改名称就应该知道该函数做的事情是检查账户,其返回值为boolean类型,则返回值应该是账户合法或者不合法.</p>
<h2 id="函数参数">函数参数</h2><p>关于函数的参数个数:</p>
<blockquote>
<p>零个最佳,其次是一参,再次是二参,尽量避免三参或更过</p>
</blockquote>
<h3 id="零个最佳">零个最佳</h3><p>最理想的函数是没有参数,直接调用,不考虑其需要的条件.因为函数自己已经拥有相应的条件.<br>比如Android中的Activity的onStart(), onResume()等</p>
<h3 id="其次是一参">其次是一参</h3><p>一个参数是最普遍的形式.<br>比如常用的setter和getter方法.一个参数可以明确函数运行必要的条件.</p>
<h3 id="再次是二参">再次是二参</h3><p>两个参数已经可以出现混淆了.<br>比如String类有个方法replace(String oldChar, String newChar)如果不是参数的名称,很容易混淆是用谁代替谁.</p>
<p>所以当函数出现两个参数时,务必给参数取个好的名称,以区分参数的意义.</p>
<p>举个返利,放我们给一个对象集合排序时,会实现Comparator接口,如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCompar</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String lhs, String rhs)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span> Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>你知道lhs与rhs的含义么?他们两个比较的结果是什么意思?</p>
<h3 id="避免三参或更多">避免三参或更多</h3><p>三个参数更容易出现问题.特别是三个参数类型一样时,往往会顺序错误.<br>比如求梯形的面积,我们都知道梯形面积S = (上底a + 下底b) * 高h /2;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">calculateArea</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b)*c/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果不看细节,你能一下子就看出参数的含义么?</p>
<p>有需要三个或者更多参数时就应该抽象为一个类了.<br>上面的方法可以改为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">calculateArea</span><span class="params">(Trapezoid trapezoid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (trapezoid.getTopWidth() + trapezoid.getBottomWidth()) * trapezoid.getHeight / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="标志参数(boolean值)">标志参数(boolean值)</h3><p><strong>不要使用boolean类型的参数!!!</strong><br>传入boolean类型的参数,那么该函数必定违反单一职责原则!<br>为何不拆分为两个函数呢?</p>
<h2 id="无副作用">无副作用</h2><p>上面有个checkAccount()函数其实就是一个有副作用的函数!</p>
<p>方法名为checkAccount(),且函数值也是boolean类型的.但是它却在账户可用时做了登录操作!!!</p>
<p>如果不知道该函数的细节,多次调用会导致重复登陆!!!</p>
<p>所以函数内容一定要和函数名称相同.</p>
<h2 id="分割指令与查询">分割指令与查询</h2><p>函数要么做什么事,要么回答什么事情,但二者不可兼得.</p>
<p>函数应该修改某对象的状态或者返回该对象的有关信息.</p>
<p>例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String attribute, String value)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>该函数用于修改属性,如果成功返回true,如果不存在那个属性则返回false.这样会导致:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(set(<span class="string">"username"</span>, <span class="string">"jack"</span>))..</span><br></pre></td></tr></table></figure></p>
<p>这句是什么意思呢?意思是设置username为jack成功呢?还是设置username之前检查username是否为jack呢?</p>
<p>所以要分割指令和查询:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAttrExists</span><span class="params">(String attr)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="使用异常代替返回错误码">使用异常代替返回错误码</h2><p>我们经常这样写:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deletePage</span><span class="params">(Page page)</span>；</span><br><span class="line"></span><br><span class="line"><span class="title">if</span><span class="params">(deletePage(page)</span> </span>== E_OK)...</span><br></pre></td></tr></table></figure></p>
<p>但是这样会导致深层次的嵌套:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(deletePage() == E_OK)&#123;</span><br><span class="line">    <span class="keyword">if</span>(registy.deleteReference(page.name) == E_OK)&#123;</span><br><span class="line">        <span class="keyword">if</span>(configKeys.deleteKey(page.name.makeKey()) == E_OK) &#123;</span><br><span class="line">            logger.log(<span class="string">"page deleted"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.log(<span class="string">"configkey not delete"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.log(delteReference from registry failed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    logger.log(<span class="string">"delete failed"</span>);</span><br><span class="line">    <span class="keyword">return</span> E_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果改为返回异常,错误处理就能从主路径中分离出来:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    deletePage(page);</span><br><span class="line">    registry.deleteReference(page.name);</span><br><span class="line">    configKeys.deleteKey(page.name.makeKey());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="抽离Try/Catch代码块">抽离Try/Catch代码块</h3><p>代码处理直接放在try..catch中,要抽离出来,另外形成函数:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletePage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        deletePageAndReferences(page);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        logError(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="处理错误就是一件事">处理错误就是一件事</h3><p>一个函数只做一件事,处理错误就是一件事,所以错误处理要抽离单独的函数.</p>
<p>使用异常代替错误码,新的异常可以从异常类中派生,无需重新编译或重新部署.</p>
<h2 id="别重复自己">别重复自己</h2><p>代码混乱最直接的原因就是代码重复.重复可能是软件中一切邪恶的根源.所以别重复自己!!!</p>
<h2 id="结构化编程">结构化编程</h2><p>结构化编程规范:</p>
<blockquote>
<p>每个函数,函数中的每个代码块应该只有一个入口,一个出口.</p>
</blockquote>
<p>函数应遵守此规范,但是对于小函数,这些规则助益不大,只有在大函数中才有明显的好处.</p>
<p>只要函数短小,偶尔出现的return, break或 continue语句就没坏处,甚至比单入单出原则更有表达力.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Clean-Code-LOGO.png" alt="CleanCode"></p>]]>
    
    </summary>
    
      <category term="CleanCode" scheme="http://www.devwiki.net/tags/CleanCode/"/>
    
      <category term="代码整洁之道" scheme="http://www.devwiki.net/tags/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
      <category term="CleanCode-代码整洁之道" scheme="http://www.devwiki.net/categories/CleanCode-%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android中Pcm文件转Amr文件]]></title>
    <link href="http://www.devwiki.net/2015/06/23/Android-Pcm2Amr/"/>
    <id>http://www.devwiki.net/2015/06/23/Android-Pcm2Amr/</id>
    <published>2015-06-23T09:45:09.000Z</published>
    <updated>2015-07-08T04:41:21.649Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Android-Pcm2Amr-Logo.png" alt=""></p>
<a id="more"></a>
<p>最近在做一个聊天的模块,聊天的模块很简单:</p>
<blockquote>
<p>录音-上传-接收-播放</p>
</blockquote>
<h2 id="录音">录音</h2><p>录音部分可以采用MediaRecord和AudioRecord两个类进行录音.但是各有优缺点.</p>
<p>MediaRecord已经封装了很多方法,方便使用.<br>AudioRecord能获取录音的原生数据,以便对录音二次加工.</p>
<p>在录音过程我采用的是AudioRecord.但是AudioRecord录音数据是PCM格式,数据占用存储空间很大.必须压缩后才能传输.项目中的压缩是项目其他成员写的一个so库进行压缩的,有点不太方便.在网上翻阅了下,其实Android系统内部已经携带有压缩的库文件了.</p>
<h2 id="压缩库">压缩库</h2><p>Android自带的有一个Pcm转amr的库:<strong>media_jni.so</strong>.<br>但是由于是Android系统内部的库,无法直接使用.根据网上的说明,最终终于弄明白如何使用了.</p>
<h3 id="AmrInputStream">AmrInputStream</h3><p>在要使用压缩库的项目中新建包:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.android.media</span><br></pre></td></tr></table></figure></p>
<p>在此包中新建AmrInputStream类,代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AmrInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"media_jni"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"AmrInputStream"</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">// frame is 20 msec at 8.000 khz</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> SAMPLES_PER_FRAME = <span class="number">8000</span> * <span class="number">20</span> / <span class="number">1000</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">// pcm input stream</span></span><br><span class="line">    <span class="keyword">private</span> InputStream mInputStream;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">// native handle</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mGae;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">// result amr stream</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] mBuf = <span class="keyword">new</span> <span class="keyword">byte</span>[SAMPLES_PER_FRAME * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBufIn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBufOut = <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// helper for bytewise read()</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] mOneByte = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1</span>];</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Create a new AmrInputStream, which converts 16 bit PCM to AMR</span><br><span class="line">     * <span class="doctag">@param</span> inputStream InputStream containing 16 bit PCM.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AmrInputStream</span><span class="params">(InputStream inputStream)</span> </span>&#123;</span><br><span class="line">        mInputStream = inputStream;</span><br><span class="line">        mGae = GsmAmrEncoderNew();</span><br><span class="line">        GsmAmrEncoderInitialize(mGae);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rtn = read(mOneByte, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> rtn == <span class="number">1</span> ? (<span class="number">0xff</span> &amp; mOneByte[<span class="number">0</span>]) : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> read(b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGae == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"not open"</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// local buffer of amr encoded audio empty</span></span><br><span class="line">        <span class="keyword">if</span> (mBufOut &gt;= mBufIn) &#123;</span><br><span class="line">            <span class="comment">// reset the buffer</span></span><br><span class="line">            mBufOut = <span class="number">0</span>;</span><br><span class="line">            mBufIn = <span class="number">0</span>;</span><br><span class="line">           </span><br><span class="line">            <span class="comment">// fetch a 20 msec frame of pcm</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLES_PER_FRAME * <span class="number">2</span>; ) &#123;</span><br><span class="line">                <span class="keyword">int</span> n = mInputStream.read(mBuf, i, SAMPLES_PER_FRAME * <span class="number">2</span> - i);</span><br><span class="line">                <span class="keyword">if</span> (n == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                i += n;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">            <span class="comment">// encode it</span></span><br><span class="line">            mBufIn = GsmAmrEncoderEncode(mGae, mBuf, <span class="number">0</span>, mBuf, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// return encoded audio to user</span></span><br><span class="line">        <span class="keyword">if</span> (length &gt; mBufIn - mBufOut) length = mBufIn - mBufOut;</span><br><span class="line">        System.arraycopy(mBuf, mBufOut, b, offset, length);</span><br><span class="line">        mBufOut += length;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mInputStream != <span class="keyword">null</span>) mInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mInputStream = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mGae != <span class="number">0</span>) GsmAmrEncoderCleanup(mGae);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mGae != <span class="number">0</span>) GsmAmrEncoderDelete(mGae);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    mGae = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGae != <span class="number">0</span>) &#123;</span><br><span class="line">            close();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"someone forgot to close AmrInputStream"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// AudioRecord JNI interface</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">GsmAmrEncoderNew</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">GsmAmrEncoderInitialize</span><span class="params">(<span class="keyword">int</span> gae)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">GsmAmrEncoderEncode</span><span class="params">(<span class="keyword">int</span> gae,</span><br><span class="line">           <span class="keyword">byte</span>[] pcm, <span class="keyword">int</span> pcmOffset, <span class="keyword">byte</span>[] amr, <span class="keyword">int</span> amrOffset)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">GsmAmrEncoderCleanup</span><span class="params">(<span class="keyword">int</span> gae)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">GsmAmrEncoderDelete</span><span class="params">(<span class="keyword">int</span> gae)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="AmrEmcoder">AmrEmcoder</h3><p>只有AmrInputStream类是不够,还需要一个转码的类AmrEncoder,代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmrEncoder</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pcm2Amr</span><span class="params">(String pcmPath , String amrPath)</span> </span>&#123;</span><br><span class="line">    	FileInputStream fis;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			fis = <span class="keyword">new</span> FileInputStream(pcmPath);</span><br><span class="line">			pcm2Amr(fis, amrPath);</span><br><span class="line">			fis.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e1) &#123;</span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pcm2Amr</span><span class="params">(InputStream pcmStream, String amrPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AmrInputStream ais = <span class="keyword">new</span> AmrInputStream(pcmStream);</span><br><span class="line">            OutputStream out = <span class="keyword">new</span> FileOutputStream(amrPath);</span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">/*</span><br><span class="line">             * 下面的AMR的文件头,缺少这几个字节是不行的</span><br><span class="line">             */</span></span><br><span class="line">            out.write(<span class="number">0x23</span>);</span><br><span class="line">            out.write(<span class="number">0x21</span>);</span><br><span class="line">            out.write(<span class="number">0x41</span>);</span><br><span class="line">            out.write(<span class="number">0x4D</span>);</span><br><span class="line">            out.write(<span class="number">0x52</span>);</span><br><span class="line">            out.write(<span class="number">0x0A</span>);   </span><br><span class="line">            <span class="keyword">while</span>((len = ais.read(buf)) &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                out.write(buf,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            out.close();</span><br><span class="line">            ais.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里有两个方法:</p>
<ol>
<li>pcm2Amr(String pcmPath , String amrPath): 将pcm文件转为amr文件</li>
<li>pcm2Amr(InputStream pcmStream, String amrPath): 将pcm数据流转为amr文件</li>
</ol>
<h2 id="测试">测试</h2><h3 id="测试的界面">测试的界面</h3><p>测试的界面很简单,就一个按钮一个文本显示,布局界面就不再给出,下面是MainActivity代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        </span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TextView hintView;</span><br><span class="line">    <span class="keyword">private</span> Button startButton;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		startButton = (Button) findViewById(R.id.btn_start);</span><br><span class="line">		startButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">		hintView = (TextView) findViewById(R.id.hint);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (v.getId() == R.id.btn_start) &#123;</span><br><span class="line">			transferButtonClicked();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transferButtonClicked</span><span class="params">()</span></span>&#123;</span><br><span class="line">		showWaitDialog();</span><br><span class="line">		startTransfer();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> ProgressDialog waitDialog;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showWaitDialog</span><span class="params">()</span></span>&#123;</span><br><span class="line">		waitDialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</span><br><span class="line">		waitDialog.setTitle(getResources().getString(R.string.transfer_wait_title));</span><br><span class="line">		waitDialog.setMessage(getResources().getString(R.string.transfer_wait_message));</span><br><span class="line">		waitDialog.show();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startTransfer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> TransferThread(<span class="keyword">this</span>, <span class="keyword">new</span> TransferCallback() &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				transferSuccess();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;).start();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transferSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				waitDialog.dismiss();</span><br><span class="line">				hintView.setText(getResources().getString(R.string.transfer_result));</span><br><span class="line">				ToastUtil.showShort(MainActivity.<span class="keyword">this</span>, R.string.success_hint);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="转换线程">转换线程</h3><p>由于文件转换是耗时操作,所以需要一个转换线程来实现文件转换.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> TransferCallback callback;</span><br><span class="line">	<span class="keyword">private</span> Context context;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TransferThread</span><span class="params">(Context context, TransferCallback callback)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.callback = callback;</span><br><span class="line">		<span class="keyword">this</span>.context = context;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		transfer();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span></span>&#123;</span><br><span class="line">		String rootPath = Environment.getExternalStorageDirectory().getPath();</span><br><span class="line">        String amrPath = rootPath + <span class="string">"/test.amr"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream pcmStream = context.getAssets().open(<span class="string">"test.pcm"</span>);</span><br><span class="line">            AmrEncoder.pcm2Amr(pcmStream, amrPath);</span><br><span class="line">            callback.onSuccess();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        	callback.onFailed();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransferCallback</span></span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span></span>;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">onFailed</span><span class="params">()</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="测试结果">测试结果</h3><p>经过测试,160KB的test.pcm压缩后的amr文件大小为15KB,且可以正常播放.</p>
<p>本文的项目文件在此:<a href="https://github.com/Dev-Wiki/Pcm2Amr" target="_blank" rel="external">Pcm2Amr</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Android-Pcm2Amr-Logo.png" alt=""></p>]]>
    
    </summary>
    
      <category term="Amr" scheme="http://www.devwiki.net/tags/Amr/"/>
    
      <category term="Android" scheme="http://www.devwiki.net/tags/Android/"/>
    
      <category term="Pcm" scheme="http://www.devwiki.net/tags/Pcm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android自定义组合控件---简单导航栏]]></title>
    <link href="http://www.devwiki.net/2015/06/18/Android-View-Custom-Navigation/"/>
    <id>http://www.devwiki.net/2015/06/18/Android-View-Custom-Navigation/</id>
    <published>2015-06-18T13:23:55.000Z</published>
    <updated>2015-06-25T13:30:22.046Z</updated>
    <content type="html"><![CDATA[<p>最近在做项目的过程中,发现项目中好多界面的导航栏都很类似或者一样,但是每次都要重复写同样的代码,觉得很不爽,所以就简单地自定义了一下导航栏控件.<br>先上图:<br><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Android-View-Custom-Navigation-01.png" alt="导航栏"></p>
<p>导航栏包括:</p>
<ul>
<li>返回按钮</li>
<li>标题</li>
<li>右侧按钮(功能不确定)</li>
</ul>
<a id="more"></a>
<p>首先是布局文件,如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">RelativeLayout</span> </span><br><span class="line">	<span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">	<span class="attribute">android:id</span>=<span class="value">"@+id/rl_chat_title"</span></span><br><span class="line">	<span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">	<span class="attribute">android:layout_height</span>=<span class="value">"50dp"</span></span><br><span class="line">	<span class="attribute">android:background</span>=<span class="value">"@drawable/land_navigation"</span></span><br><span class="line">	<span class="attribute">android:layout_alignParentTop</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ImageView</span> </span><br><span class="line">	    <span class="attribute">android:id</span>=<span class="value">"@+id/iv_nav_back"</span></span><br><span class="line">	    <span class="attribute">android:layout_width</span>=<span class="value">"50dp"</span></span><br><span class="line">	    <span class="attribute">android:layout_height</span>=<span class="value">"50dp"</span></span><br><span class="line">	    <span class="attribute">android:padding</span>=<span class="value">"13dp"</span></span><br><span class="line">	    <span class="attribute">android:layout_alignParentLeft</span>=<span class="value">"true"</span></span><br><span class="line">	    <span class="attribute">android:layout_centerVertical</span>=<span class="value">"true"</span></span><br><span class="line">	    <span class="attribute">android:src</span>=<span class="value">"@drawable/icon_back"</span>/&gt;</span></span><br><span class="line">		</span><br><span class="line">  	<span class="tag">&lt;<span class="title">TextView</span> </span><br><span class="line">    	<span class="attribute">android:id</span>=<span class="value">"@+id/tv_nav_title"</span></span><br><span class="line">     	<span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">	  	<span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">	  	<span class="attribute">android:gravity</span>=<span class="value">"center_vertical"</span></span><br><span class="line">	  	<span class="attribute">android:layout_centerHorizontal</span>=<span class="value">"true"</span></span><br><span class="line">	  	<span class="attribute">android:layout_centerVertical</span>=<span class="value">"true"</span></span><br><span class="line">	  	<span class="attribute">android:text</span>=<span class="value">"@string/app_name"</span>/&gt;</span></span><br><span class="line">      	</span><br><span class="line">  	<span class="tag">&lt;<span class="title">ImageView</span> </span><br><span class="line">	  	<span class="attribute">android:id</span>=<span class="value">"@+id/iv_nav_right"</span></span><br><span class="line">	  	<span class="attribute">android:layout_width</span>=<span class="value">"50dp"</span></span><br><span class="line">	  	<span class="attribute">android:layout_height</span>=<span class="value">"50dp"</span></span><br><span class="line">	  	<span class="attribute">android:padding</span>=<span class="value">"13dp"</span></span><br><span class="line">	  	<span class="attribute">android:layout_alignParentRight</span>=<span class="value">"true"</span></span><br><span class="line">	  	<span class="attribute">android:layout_centerVertical</span>=<span class="value">"true"</span></span><br><span class="line">	  	<span class="attribute">android:src</span>=<span class="value">"@drawable/icon_setting1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>布局包含两个ImageView和一个TextView.</p>
<p>然后自定义类NavigationView继承RelativeLayout并实现OnClickListener接口.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 导航栏组件,目前包括返回键,标题,右侧按钮.其中:</span><br><span class="line"> * &lt;/br&gt;返回键已经实现按键监听</span><br><span class="line"> * &lt;/br&gt;右侧按钮已实现按键监听</span><br><span class="line"> * &lt;/br&gt;标题默认不可点击</span><br><span class="line"> * <span class="doctag">@author</span> Asia</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NavigationView</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NavigationView</span><span class="params">(Context context)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ImageView backView;</span><br><span class="line">    <span class="keyword">private</span> TextView titleView;</span><br><span class="line">    <span class="keyword">private</span> ImageView rightView;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NavigationView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        View view = LayoutInflater.from(context).inflate(R.layout.navigation_view, <span class="keyword">this</span>, <span class="keyword">true</span>);</span><br><span class="line">        backView = (ImageView) view.findViewById(R.id.iv_nav_back);</span><br><span class="line">        backView.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        titleView = (TextView) view.findViewById(R.id.tv_nav_title);</span><br><span class="line">        rightView = (ImageView) view.findViewById(R.id.iv_nav_right);</span><br><span class="line">        rightView.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取返回按钮</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ImageView <span class="title">getBackView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> backView;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取标题控件</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TextView <span class="title">getTitleView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> titleView;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 设置标题</span><br><span class="line">     * <span class="doctag">@param</span> title</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        titleView.setText(title);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取右侧按钮,默认不显示</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ImageView <span class="title">getRightView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rightView;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ClickCallback callback;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 设置按钮点击回调接口</span><br><span class="line">     * <span class="doctag">@param</span> callback</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickCallback</span><span class="params">(ClickCallback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.callback = callback;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 导航栏点击回调接口</span><br><span class="line">     * &lt;/br&gt;如若需要标题可点击,可再添加</span><br><span class="line">     * <span class="doctag">@author</span> Asia</span><br><span class="line">     *</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClickCallback</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * 点击返回按钮回调</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onBackClick</span><span class="params">()</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onRightClick</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = v.getId();</span><br><span class="line">        <span class="keyword">if</span> (id == R.id.iv_nav_back) &#123;</span><br><span class="line">            callback.onBackClick();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (id == R.id.iv_nav_right) &#123;</span><br><span class="line">            callback.onRightClick();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>NavigationView中包含一个回调接口,在使用时设置一个此接口即可.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 导航栏点击回调接口</span><br><span class="line"> * &lt;/br&gt;如若需要标题可点击,可再添加</span><br><span class="line"> * <span class="doctag">@author</span> Asia</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClickCallback</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 点击返回按钮回调</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onBackClick</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onRightClick</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如何使用呢?下面实际使用的过程.</p>
<p><strong>主界面布局</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">    <span class="tag">&lt;<span class="title">com.asi.customview.view.NavigationView</span> </span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/nav_main"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"@string/hello_world"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>主界面Java代码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NavigationView navigationView;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        navigationView = (NavigationView) <span class="keyword">super</span>.findViewById(R.id.nav_main);</span><br><span class="line">        navigationView.setTitle(<span class="string">"Title"</span>);</span><br><span class="line">        navigationView.setClickCallback(<span class="keyword">new</span> ClickCallback() &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRightClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                DLog.d(<span class="string">"点击了右侧按钮!"</span>);</span><br><span class="line">                ToastUtil.showShort(MainActivity.<span class="keyword">this</span>, <span class="string">"点击了右侧按钮!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                DLog.d(<span class="string">"点击了返回按钮!"</span>);</span><br><span class="line">                ToastUtil.showShort(MainActivity.<span class="keyword">this</span>, <span class="string">"点击了返回按钮!"</span>);</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注:</strong>主界面中的<strong>Dlog</strong>类为Android的Log打印输出类,参见此处:<a href="http://www.devwiki.net/2015/06/24/Android-New-Log/">Android调试Lo二次g包装</a></p>
<p>这样就完成了简单的自定义导航栏.完成的项目代码在<a href="https://github.com/devwiki" target="_blank" rel="external">我的GitHub</a>中的<br><a href="https://github.com/devwiki/CustomView" target="_blank" rel="external">自定义组件</a>.此项目后期会不定期更新.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在做项目的过程中,发现项目中好多界面的导航栏都很类似或者一样,但是每次都要重复写同样的代码,觉得很不爽,所以就简单地自定义了一下导航栏控件.<br>先上图:<br><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Android-View-Custom-Navigation-01.png" alt="导航栏"></p>
<p>导航栏包括:</p>
<ul>
<li>返回按钮</li>
<li>标题</li>
<li>右侧按钮(功能不确定)</li>
</ul>]]>
    
    </summary>
    
      <category term="Android" scheme="http://www.devwiki.net/tags/Android/"/>
    
      <category term="View" scheme="http://www.devwiki.net/tags/View/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java设计模式---设计原则]]></title>
    <link href="http://www.devwiki.net/2015/06/18/Java-Design-Pattern-Principle/"/>
    <id>http://www.devwiki.net/2015/06/18/Java-Design-Pattern-Principle/</id>
    <published>2015-06-18T13:16:42.000Z</published>
    <updated>2015-07-08T04:41:21.649Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Java-Design-Patterns-Logo.png" alt=""></p>
<a id="more"></a>
<p>最近看了Head First 设计模式一书,开篇的故事讲述了设计模式的原则:<strong>封装变化</strong>与<strong>面向接口编程</strong>.</p>
<h2 id="基本需求">基本需求</h2><p>故事从编写一个模拟鸭子的游戏开始,游戏要求:</p>
<blockquote>
<p>游戏里有许多鸭子,一边游泳戏水,一边呱呱叫…</p>
</blockquote>
<p>该游戏内部使用面向对象设计,有一个鸭子的超类Duck:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//游泳的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//呱呱叫的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//子类要实现的显示的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<!-- more -->
<p>因为所有的鸭子都会游泳和叫,所以在超类中实现了swim()和qucak()方法,而具体显示出什么样和具体的鸭子有关,所以display()方法为抽象方法.</p>
<p>现在有种鸭子是红头鸭RedHeadDuck和绿头鸭MallardDuck.<br>红头RedHeadDuck代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedHeadDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是红头鸭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>绿头鸭MallardDuck代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是绿头鸭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="需求变化">需求变化</h2><p>现在需求发生了变化,想要鸭子能飞行…那不是很简单嘛,给Duck类加个飞行的方法不就可以了,如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//游泳的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//呱呱叫的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//飞行的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//子类要实现的显示的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样一来,确实绿头鸭和红头鸭都会飞行了.</p>
<h2 id="出现问题">出现问题</h2><p>由于公司业务需要,增加橡皮鸭这一角色RubberDuck,如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RubberDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是橡皮鸭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>等等,上面的橡皮鸭貌似不对啊,橡皮鸭不会飞啊!而且橡皮鸭是吱吱叫不是呱呱叫.这该怎么办呢?</p>
<p>这还不简单,直接覆盖方法不就行了.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RubberDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qucak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//吱吱叫...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//什么也不做...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是橡皮鸭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样貌似是解决了,但是问题又来来,如果后来需要增加诱饵鸭DecoyDuck,诱饵鸭不会叫不会飞.怎么办?难道还要继续覆盖方法么?</p>
<h2 id="解决问题">解决问题</h2><p>既然无法确定以后的鸭子是什么类型,干脆抽取公共的部分,不同的写成接口.<br>比如会飞的实现Flyable接口,会叫的实现Qucakable接口.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会飞的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//会叫的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Quackable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新的Duck类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//游泳的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> class <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//显示的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新的绿头鸭</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="title">extend</span> <span class="title">Duck</span> <span class="keyword">implements</span> <span class="title">Flyable</span>, <span class="title">Qucakable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我会飞...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我会呱呱叫...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我是绿头鸭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新的红头鸭类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedHeadDuck</span> <span class="title">extend</span> <span class="title">Duck</span> <span class="keyword">implements</span> <span class="title">Flyable</span>, <span class="title">Qucakable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我会飞...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我会呱呱叫...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我是红头鸭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//橡皮鸭</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RubberDuck</span> <span class="title">extend</span> <span class="title">Duck</span> <span class="keyword">implements</span> <span class="title">Quackable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我会吱吱叫...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我是橡皮鸭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//诱饵鸭</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoyDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我是诱饵鸭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样一来,问题就解决了.</p>
<h2 id="新问题">新问题</h2><p>上面的问题是解决了,好像代码有重复:<br><strong>绿头鸭和红头鸭的会飞的方法和会呱呱叫的方法是重复的</strong>.</p>
<p>如果以后有更多类型的方法,重复的代码会更多,而且会埋下一个隐患:</p>
<blockquote>
<p>如果以后飞行的动作有所改变,难道一个一个类的去修改?<br>如果需求还有变化,不是更难维护吗?</p>
</blockquote>
<h2 id="解决问题-1">解决问题</h2><p>有没有好的方法解决这个问题呢?答案是肯定的.我们需要将代码中的变化的部分与不变的部分拆分出来.这就是<strong>封装变化的原则</strong></p>
<h3 id="封装变化">封装变化</h3><blockquote>
<p>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</p>
</blockquote>
<p>下面就建立两组类,变化的和不会变化的.</p>
<p>上面的案例中什么是变化的呢?<br><strong>飞行</strong>和<strong>叫声</strong>是变化的.那么就将飞行和叫声与Duck类分开.</p>
<p>如何设计鸭子的飞行行为和叫声行为呢?<br>我们希望一切有弹性,因为你无法确定以后的飞行行为会有什么变化,也无法确定以后的绿头鸭会有什么行为.</p>
<p>这就涉及到第二个原则:<strong>面向接口编程</strong></p>
<h3 id="面向接口编程">面向接口编程</h3><blockquote>
<p>针对接口编程，而不是针对实现编程</p>
</blockquote>
<p>那么现在的需求有两个行为:飞和叫.<br>接口就为飞行行为接口和叫的行为接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//飞行行为接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehaviour</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//叫的行为接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehaviour</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在飞行有种不同的行为:飞和不会飞.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通的飞</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">implements</span> <span class="title">FlyBehaviour</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我会飞..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不会飞</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">implements</span> <span class="title">FlyBehaviour</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我不会飞...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在叫也有三种行为:呱呱叫和吱吱叫和不会叫<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//呱呱叫</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehaviour</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我会呱呱叫..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//吱吱叫</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Squack</span> <span class="keyword">implements</span> <span class="title">QuackBehaviour</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我会吱吱叫..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不会叫</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> <span class="keyword">implements</span> <span class="title">QuackBehaviour</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我不会叫...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样写的好处就在于,使用飞行行为时只需指定会飞行,不需绑定具体飞行的动作,弹性空间较大.而且此处的面向接口编程,并不是狭义上指Java中的接口,而是指超类型,可以是接口也可以是抽象类.</p>
<p>那么如何将行为和Duck类组合到一起呢?</p>
<blockquote>
<p>将行为转为属性</p>
</blockquote>
<p>即将飞行和叫的行转为鸭子的一个变量<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="comment">//鸭子不处理飞的行为,将飞的行为委托给FlyBehaviour接口</span></span><br><span class="line">    FlyBehaviour flyBehaviour;</span><br><span class="line">    <span class="comment">//鸭子不处理叫的行为,将飞的行为委托给QucakBehaviour接口</span></span><br><span class="line">    QucakBehaviour quackBehaviour;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        flyBehaviour.fly();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        quackBehaviour.quack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我会游泳..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>再来看看绿头鸭,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MallardDuck</span><span class="params">()</span></span>&#123;</span><br><span class="line">        flyBehaviour = <span class="keyword">new</span> FlyWithWings();</span><br><span class="line">        quackBehaviour = <span class="keyword">new</span> Quack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> class <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是绿头鸭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在测试一下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Duck duck = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">        duck.display();</span><br><span class="line">        duck.performFly();</span><br><span class="line">        duck.performQuack();</span><br><span class="line">        duck.swim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行后结果如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我是绿头鸭...</span><br><span class="line">我会飞...</span><br><span class="line">我会呱呱叫...</span><br><span class="line">我会游泳...</span><br></pre></td></tr></table></figure></p>
<p>如何实现动态改变鸭子的行为呢?修改Duck类如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="comment">//鸭子不处理飞的行为,将飞的行为委托给FlyBehaviour接口</span></span><br><span class="line">    FlyBehaviour flyBehaviour;</span><br><span class="line">    <span class="comment">//鸭子不处理叫的行为,将飞的行为委托给QucakBehaviour接口</span></span><br><span class="line">    QucakBehaviour quackBehaviour;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlyBehaviour</span><span class="params">(FlyBehaviour flyBehaviour)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flyBehaviour = flyBehaviour;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQucakBehaviour</span><span class="params">(QucakBehaviour quackBehaviour)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.quackBehaviour = quackBehaviour;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        flyBehaviour.fly();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        quackBehaviour.quack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我会游泳..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在构建一个模型鸭ModelDuck<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ModelDuck</span><span class="params">()</span></span>&#123;</span><br><span class="line">        flyBehaviour = <span class="keyword">new</span> FlyNoWay();  <span class="comment">//一开始不会飞</span></span><br><span class="line">        quackBehaviour = <span class="keyword">new</span> Quack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是模型鸭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>新建一个新的飞行行为:FlyRocketPowered<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyRocketPowered</span> <span class="keyword">implements</span> <span class="title">FlyBehaviour</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我能像火箭一样飞..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在测试一下动态改变飞行行为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Duck duck = <span class="keyword">new</span> ModelDuck();</span><br><span class="line">        duck.display();</span><br><span class="line">        duck.performFly();</span><br><span class="line">        duck.setFlyBehaviour(<span class="keyword">new</span> FlyRocketPowered());</span><br><span class="line">        duck.performFly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试结果:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我是模型鸭...</span><br><span class="line"></span><br><span class="line">我会向火箭一样飞...</span><br></pre></td></tr></table></figure></p>
<p>这样就实现了行为与类分开,及变化的部分与不变化的部分分开了.</p>
<h3 id="小总结">小总结</h3><p><strong>变化的部分</strong><br>飞行的行为和叫的行为</p>
<p><strong>不变的部分</strong><br>鸭子会有用,拥有飞行和叫的行为.</p>
<h2 id="总结">总结</h2><p>封装变化和面向接口编程能让代码有很大的弹性,在代码不变或者很小的改变的情况下满足需求的变化,也易于维护.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Java-Design-Patterns-Logo.png" alt=""></p>]]>
    
    </summary>
    
      <category term="设计原则" scheme="http://www.devwiki.net/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
      <category term="设计模式" scheme="http://www.devwiki.net/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java设计模式" scheme="http://www.devwiki.net/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JDK源码学习之String]]></title>
    <link href="http://www.devwiki.net/2015/06/18/JDK-Source-String/"/>
    <id>http://www.devwiki.net/2015/06/18/JDK-Source-String/</id>
    <published>2015-06-18T12:55:49.000Z</published>
    <updated>2015-06-24T04:48:11.642Z</updated>
    <content type="html"><![CDATA[<p>String类是最常用的类之一了.</p>
<h2 id="定义">定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Serializable</span>,</span><br><span class="line">	<span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span></span></span><br></pre></td></tr></table></figure>
<h3 id="关键字">关键字</h3><h4 id="public">public</h4><p>被public修饰的类为全局可访问的类</p>
<h4 id="final">final</h4><p>被final修饰的类为终类,不可被继承不可被覆盖</p>
<a id="more"></a>
<h3 id="继承的父类">继承的父类</h3><h4 id="Object">Object</h4><p>直接继承于Object类,Object类为所有Java类的间接或直接父类</p>
<h3 id="实现的接口">实现的接口</h3><h4 id="Serializable">Serializable</h4><p>实现此接口,说明String类能被序列化</p>
<h4 id="Comparable">Comparable</h4><p>实现此接口,说明String类的对象可以被排序</p>
<h4 id="CharSequence">CharSequence</h4><p>实现此接口,说明String类是一种字符序列</p>
<h2 id="Field字段">Field字段</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6849794470754667710L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectStreamField[] serialPersistentFields =</span><br><span class="line">        <span class="keyword">new</span> ObjectStreamField[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<h3 id="value[]">value[]</h3><p>用于存放String类对象的值的字符数组,比如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure></p>
<p>那么value[]数组就等于:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value[] = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="hash">hash</h3><p>String类对象的哈希值</p>
<h3 id="serialVersionUID">serialVersionUID</h3><p>String类运行时序列化的版本号</p>
<h3 id="ObjectStreamField[]">ObjectStreamField[]</h3><p>用于String类序列化的描述</p>
<h2 id="构造方法">构造方法</h2><h3 id="String()">String()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建一个新的String对象,默认字符串长度为0.</p>
<h3 id="String(String_original)">String(String original)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = original.value;</span><br><span class="line">    <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用一个已有的String对象创建一个新的String对象.将参数对象的字符数组和哈希值赋值给新的对象.</p>
<h3 id="String(char_value[])">String(char value[])</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用一个字符数组创建一个String对象.内部不是直接赋值,而是使用了Arrays.copyOf()方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] copyOf(<span class="keyword">char</span>[] original, <span class="keyword">int</span> newLength) &#123;</span><br><span class="line">    <span class="keyword">char</span>[] copy = <span class="keyword">new</span> <span class="keyword">char</span>[newLength];</span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Arrays.copyOf内部新建了一个与参数长度相同的方法,并调用System.arrayscopy()方法复制.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,  <span class="keyword">int</span>  srcPos,</span><br><span class="line">                                    Object dest, <span class="keyword">int</span> destPos,</span><br><span class="line">                                    <span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>System.arrayscopy()方法是使用的操作系统底层实现复制的.</p>
<h3 id="String(char_value[],_int_offset,_int_count)">String(char value[], int offset, int count)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.(2147483647)</span></span><br><span class="line">    <span class="keyword">if</span> (offset &gt; value.length - count) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>截取字符数组一部分创建一个新的String对象.<br>如果起始偏移量或者截取的数量或者起始偏移量与截取数量之和大于字符数组的长度时会抛出StringIndexOutOfBoundsException异常.<br>而value[]是使用的Arrays.copyOfRange方法截取复制<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] copyOfRange(<span class="keyword">char</span>[] original, <span class="keyword">int</span> from, <span class="keyword">int</span> to) &#123;</span><br><span class="line">    <span class="keyword">int</span> newLength = to - from;</span><br><span class="line">    <span class="keyword">if</span> (newLength &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(from + <span class="string">" &gt; "</span> + to);</span><br><span class="line">    <span class="keyword">char</span>[] copy = <span class="keyword">new</span> <span class="keyword">char</span>[newLength];</span><br><span class="line">    System.arraycopy(original, from, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length - from, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在Arrays.copyOfRange中创建新的字符数组,并调用系统底层的数组复制方法System.arraycopy.</p>
<h3 id="String(int[]_codePoints,_int_offset,_int_count)">String(int[] codePoints, int offset, int count)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">int</span>[] codePoints, <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> (offset &gt; codePoints.length - count) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> end = offset + count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pass 1: Compute precise size of char[]</span></span><br><span class="line">    <span class="keyword">int</span> n = count;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = offset; i &lt; end; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = codePoints[i];</span><br><span class="line">        <span class="keyword">if</span> (Character.isBmpCodePoint(c))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Character.isValidCodePoint(c))</span><br><span class="line">            n++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(Integer.toString(c));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pass 2: Allocate and fill in char[]</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">char</span>[] v = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = offset, j = <span class="number">0</span>; i &lt; end; i++, j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = codePoints[i];</span><br><span class="line">        <span class="keyword">if</span> (Character.isBmpCodePoint(c))</span><br><span class="line">            v[j] = (<span class="keyword">char</span>)c;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Character.toSurrogates(c, v, j++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.value = v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>截取int型数组的一部分创建新的String对象,新的String对象为Unicode码组成,即将int数组的值转为Unicode码.<br>如果起始偏移量或者截取的数量或者起始偏移量与截取数量之和大于字符数组的长度时会抛出StringIndexOutOfBoundsException异常.<br>创建分为两步:<br>第一步:计算char[]数组的长度<br>1.先判断int值是否为BMP代码点,是则跳过.<br>2.判断指定的代码点是否为从 0x0000 到 0x10FFFF 范围之内的有效 Unicode 代码点值,是则加一</p>
<p>第二步:截取赋值字符</p>
<h3 id="String(byte_bytes[],_int_offset,_int_length,_String_charsetName)">String(byte bytes[], int offset, int length, String charsetName)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length, String charsetName)</span></span><br><span class="line">        <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (charsetName == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"charsetName"</span>);</span><br><span class="line">    checkBounds(bytes, offset, length);</span><br><span class="line">    <span class="keyword">this</span>.value = StringCoding.decode(charsetName, bytes, offset, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用指定的 charset 解码指定的 byte 子数组，构造一个新的 String。<br>如果未指定charsetName则报空指向异常<br>checkBounds()方法是检查offset和length是否超过数组边界,此方法是为了复用提取的内部私有方法.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkBounds</span><span class="params">(<span class="keyword">byte</span>[] bytes, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (length &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(length);</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</span><br><span class="line">    <span class="keyword">if</span> (offset &gt; bytes.length - length)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后使用StringCode进行解码,如果编码方式为null,则默认使用ISO-8859-1编码.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span>[] decode(String charsetName, <span class="keyword">byte</span>[] ba, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span><br><span class="line">        <span class="keyword">throws</span> UnsupportedEncodingException</span><br><span class="line">    &#123;</span><br><span class="line">        StringDecoder sd = deref(decoder);</span><br><span class="line">        String csn = (charsetName == <span class="keyword">null</span>) ? <span class="string">"ISO-8859-1"</span> : charsetName;</span><br><span class="line">        <span class="keyword">if</span> ((sd == <span class="keyword">null</span>) || !(csn.equals(sd.requestedCharsetName())</span><br><span class="line">                              || csn.equals(sd.charsetName()))) &#123;</span><br><span class="line">            sd = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Charset cs = lookupCharset(csn);</span><br><span class="line">                <span class="keyword">if</span> (cs != <span class="keyword">null</span>)</span><br><span class="line">                    sd = <span class="keyword">new</span> StringDecoder(cs, csn);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalCharsetNameException x) &#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> (sd == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedEncodingException(csn);</span><br><span class="line">            set(decoder, sd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sd.decode(ba, off, len);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>StringCoding类为java.lang包内部的字符编码和解码的工具类;StringDecoder和StringEncoder类是StringCoding类内部的解码和编码类.</p>
<h3 id="String(byte_bytes[],_String_charsetName)">String(byte bytes[], String charsetName)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], String charsetName)</span></span><br><span class="line">        <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length, charsetName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用byte数组和指定的编码方式创建一个String对象.</p>
<h3 id="String(byte_bytes[],_int_offset,_int_length)">String(byte bytes[], int offset, int length)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    checkBounds(bytes, offset, length);</span><br><span class="line">    <span class="keyword">this</span>.value = StringCoding.decode(bytes, offset, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>截取byte数组一部分创建一个String对象.<br>先检查数组边界,在调用了StringCoding编码.</p>
<h3 id="String(byte_bytes[])">String(byte bytes[])</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用byte数组创建一个String对象,内部调用的是String(byte bytes[], int offset, int length)方法.</p>
<h3 id="String(StringBuffer_buffer)">String(StringBuffer buffer)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(buffer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = Arrays.copyOf(buffer.getValue(), buffer.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用一个StringBuffer对象创建一个String对象,采用<strong>同步操作</strong>,多线程对buffer的操作不会影响String对象的值.内部使用Arrays.copyOf方法复制字符数组.</p>
<h3 id="String(StringBuilder_builder)">String(StringBuilder builder)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuilder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOf(builder.getValue(), builder.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用一个StringBuilder对象创建一个String对象.内部使用Arrays.copyOf复制字符数组.</p>
<h3 id="String(char[]_value,_boolean_share)">String(char[] value, boolean share)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span>[] value, <span class="keyword">boolean</span> share)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert share : "unshared not supported";</span></span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用一个char数组创建一个String对象,直接将char数组的引用传递给内部的value数组.</p>
<h2 id="类方法">类方法</h2><h3 id="copyValueOf(char_data[])">copyValueOf(char data[])</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">copyValueOf</span><span class="params">(<span class="keyword">char</span> data[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回指定数组中表示该字符序列的 String。即调用构造方法用数组生成一个String对象.比如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] data = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>&#125;;</span><br><span class="line">String str = String.coprValueOf(data);</span><br></pre></td></tr></table></figure></p>
<p>结果为:123</p>
<h3 id="copyValueOf(char_data[],_int_offset,_int_count)">copyValueOf(char data[], int offset, int count)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">copyValueOf</span><span class="params">(<span class="keyword">char</span> data[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(data, offset, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回指定数组中一份表示该字符序列的 String。即调用构造方法用数组生成一个String对象.比如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] data = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>&#125;;</span><br><span class="line">String str = String.coprValueOf(data, <span class="number">0</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></p>
<p>结果为:123</p>
<h3 id="format(String_format,_Object…_args)">format(String format, Object… args)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(String format, Object... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Formatter().format(format, args).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用指定的格式字符串和参数返回一个格式化字符串。内部调用Formatter类的format方法.<br>Formatter类是printf 风格的格式字符串的解释程序.使用了Formatter的无参构造方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Formatter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(Locale.getDefault(Locale.Category.FORMAT), <span class="keyword">new</span> StringBuilder());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>而此方法内部默认调用两个参数的构造方法.其中的Local对象为系统获取当前运行系统的默认区域并新建了一个StringBuilder对象,StringBuilder的父类实现了Appendable接口,说明StringBuilder是可以继续拼接修改的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Local local = Locale.getDefault(Locale.Category.FORMAT);</span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure></p>
<p>在调用Formatter类的format方法时默认使用默认的区域格式.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Formatter <span class="title">format</span><span class="params">(String format, Object ... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> format(l, format, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>内部又调用了format(Locale l, String format, Object … args)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Formatter <span class="title">format</span><span class="params">(Locale l, String format, Object ... args)</span> </span>&#123;</span><br><span class="line">    ensureOpen();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// index of last argument referenced</span></span><br><span class="line">    <span class="keyword">int</span> last = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// last ordinary index</span></span><br><span class="line">    <span class="keyword">int</span> lasto = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    FormatString[] fsa = parse(format);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fsa.length; i++) &#123;</span><br><span class="line">        FormatString fs = fsa[i];</span><br><span class="line">        <span class="keyword">int</span> index = fs.index();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">2</span>:  <span class="comment">// fixed string, "%n", or "%%"</span></span><br><span class="line">                fs.print(<span class="keyword">null</span>, l);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1</span>:  <span class="comment">// relative index</span></span><br><span class="line">                <span class="keyword">if</span> (last &lt; <span class="number">0</span> || (args != <span class="keyword">null</span> &amp;&amp; last &gt; args.length - <span class="number">1</span>))</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> MissingFormatArgumentException(fs.toString());</span><br><span class="line">                fs.print((args == <span class="keyword">null</span> ? <span class="keyword">null</span> : args[last]), l);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:  <span class="comment">// ordinary index</span></span><br><span class="line">                lasto++;</span><br><span class="line">                last = lasto;</span><br><span class="line">                <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; lasto &gt; args.length - <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> MissingFormatArgumentException(fs.toString());</span><br><span class="line">                fs.print((args == <span class="keyword">null</span> ? <span class="keyword">null</span> : args[lasto]), l);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:  <span class="comment">// explicit index</span></span><br><span class="line">                last = index - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; last &gt; args.length - <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> MissingFormatArgumentException(fs.toString());</span><br><span class="line">                fs.print((args == <span class="keyword">null</span> ? <span class="keyword">null</span> : args[last]), l);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">            lastException = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此方法返回的是一个Formatter对象,然后调用了toString方法,将a打印输出.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ensureOpen();</span><br><span class="line">    <span class="keyword">return</span> a.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="String_valueOf(Object_obj)">String valueOf(Object obj)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (obj == <span class="keyword">null</span>) ? <span class="string">"null"</span> : obj.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将一个对象转为String对象,调用该对象的toString方法.</p>
<h3 id="String_valueOf(char[]_data)">String valueOf(char[] data)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span>[] data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(data, <span class="number">0</span>, data.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用String的构造方法创建一个String对象.</p>
<h3 id="String_valueOf(char[]_data,_int_start,_int_length)">String valueOf(char[] data, int start, int length)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span>[] data, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(data, start, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用String的构造方法创建一个String对象.<br>此系列的方法还有:<br><strong>String valueOf(boolean b)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="string">"true"</span> : <span class="string">"false"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>String valueOf(char value)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> data[] = &#123;c&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(data, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一以下方法均是调用相应的包装类的toString方法.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span> c)</span></span><br><span class="line">String <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span></span><br><span class="line">String <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span> l)</span></span><br><span class="line">String <span class="title">valueOf</span><span class="params">(<span class="keyword">float</span> f)</span> </span><br><span class="line">String <span class="title">valueOf</span><span class="params">(<span class="keyword">double</span> d)</span></span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>String类是最常用的类之一了.</p>
<h2 id="定义">定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Serializable</span>,</span><br><span class="line">	<span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span></span></span><br></pre></td></tr></table></figure>
<h3 id="关键字">关键字</h3><h4 id="public">public</h4><p>被public修饰的类为全局可访问的类</p>
<h4 id="final">final</h4><p>被final修饰的类为终类,不可被继承不可被覆盖</p>]]>
    
    </summary>
    
      <category term="Java" scheme="http://www.devwiki.net/tags/Java/"/>
    
      <category term="String" scheme="http://www.devwiki.net/tags/String/"/>
    
      <category term="JDK源码学习" scheme="http://www.devwiki.net/categories/JDK%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[View的Click,LongClick,Touch事件的研究]]></title>
    <link href="http://www.devwiki.net/2015/06/18/Android-View-Click-Event/"/>
    <id>http://www.devwiki.net/2015/06/18/Android-View-Click-Event/</id>
    <published>2015-06-18T12:43:48.000Z</published>
    <updated>2015-06-25T13:28:14.703Z</updated>
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>我们都知道一个View有以下三个事件监听方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setOnClickListener();</span><br><span class="line">setOnLongClickListener();</span><br><span class="line">setOnTouchListener();</span><br></pre></td></tr></table></figure></p>
<p>每一个方法代表着用户不同的操作,分别为:短按,长按和触摸操作.</p>
<a id="more"></a>
<p><strong>短按事件</strong><br>通常一个View设置短按事件监听的代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">view.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>长按事件</strong><br>通常一个View设置长按事件监听的代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ttttButton.setOnLongClickListener(<span class="keyword">new</span> OnLongClickListener() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这里有一个返回值:</p>
<blockquote>
<p>true if the callback consumed the long click, false otherwise.</p>
</blockquote>
<p>意思是说:如果时间被消费了返回true,否则返回false.</p>
<p><strong>触摸事件</strong><br>通常一个View设置触摸事件监听的代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ttttButton.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> action = event.getAction();</span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="comment">//do something</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_MOVE) &#123;</span><br><span class="line">            <span class="comment">//do something</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_UP) &#123;</span><br><span class="line">            <span class="comment">//do something</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这里每一个动作都有一个返回值,返回值会影响触摸事件.一个View如果只设置了onTouchListener事件监听.<br>只有Down返回值为true时,Move和Up动作才能监听到.</p>
<p>如果给一个View同时设置以上三个方法,会出现怎样的结果呢?</p>
<hr>
<h2 id="测试">测试</h2><h3 id="1-测试界面">1.测试界面</h3><p>先附上测试界面的效果图,如下:<br><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Android-View-Click-Event-01.png" alt="HomePage"><br>上图有8个按钮,全部都是设置了onClickListener,onLongClickListener,onTouchListener.正如图中所示,按钮上的字母代表不同的含义.点击不同的按钮进行测试.</p>
<h3 id="2-测试结果">2.测试结果</h3><p>最终的测试结果列表如下:</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>Click</th>
<th>LongClick</th>
<th>Down</th>
<th>Move</th>
<th>Up</th>
<th>短按</th>
<th>长按</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>无</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>down-move-up</td>
<td>down-move-up</td>
</tr>
<tr>
<td>2</td>
<td>无</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>down-move-up-longClick</td>
<td>down-move-longClick-move-up</td>
<td>按钮不抬起</td>
</tr>
<tr>
<td>3</td>
<td>无</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>down-move-up</td>
<td>down-move-up</td>
</tr>
<tr>
<td>4</td>
<td>无</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>down-move-up-click</td>
<td>down-move-longClick-move-up</td>
</tr>
<tr>
<td>5</td>
<td>无</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>down-move-up</td>
<td>down-move-up</td>
</tr>
<tr>
<td>6</td>
<td>无</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>down-move-up-longClick</td>
<td>down-move-longClick-move-up</td>
<td>按钮不抬起</td>
</tr>
<tr>
<td>7</td>
<td>无</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>down-move-up</td>
<td>down-move-up</td>
</tr>
<tr>
<td>8</td>
<td>无</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>down-move-up-click</td>
<td>down-move-longClick-move-up-click</td>
</tr>
</tbody>
</table>
<p>其中上表中的第2项结果如下图(上为短按,下为长按),按钮不会弹起:<br><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Android-View-Click-Event-02.png" alt="短按"><br><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Android-View-Click-Event-03.png" alt="长按"></p>
<p>第6项结果如下图(上为短按,下为长按),按钮不会弹起:<br><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Android-View-Click-Event-04.png" alt="短按"><br><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Android-View-Click-Event-05.png" alt="长按"></p>
<h3 id="3-结论">3.结论</h3><p>测试结果因返回值不同而不同.所以尽管onTouchListener中down返回true时move和up才起作用,但是如果设置了onlongclciklistener,即使down返回false也能触发move和up事件.<br><strong>一般地,View的onTouchListener优先级高于onClickListener和onLongClickListener.</strong><br>可以根据需要使用不同的事件监听进行组合.</p>
<h3 id="4-源码">4.源码</h3><p>源码在我的GitHub中:<a href="https://github.com/sn10086/ViewClickDemo" target="_blank" rel="external">DevWiki的GitHub:ViewClickDemo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="概述">概述</h2><p>我们都知道一个View有以下三个事件监听方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setOnClickListener();</span><br><span class="line">setOnLongClickListener();</span><br><span class="line">setOnTouchListener();</span><br></pre></td></tr></table></figure></p>
<p>每一个方法代表着用户不同的操作,分别为:短按,长按和触摸操作.</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://www.devwiki.net/tags/Android/"/>
    
      <category term="View" scheme="http://www.devwiki.net/tags/View/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[交付用户想要的软件---高效程序员的45个习惯读书笔记]]></title>
    <link href="http://www.devwiki.net/2015/06/18/Agile-Develop-Delivering-What-Users-Want/"/>
    <id>http://www.devwiki.net/2015/06/18/Agile-Develop-Delivering-What-Users-Want/</id>
    <published>2015-06-18T12:42:39.000Z</published>
    <updated>2015-07-01T10:57:03.623Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Agile-Develop.png" alt="敏捷开发之道"></p>
<a id="more"></a>
<h2 id="让用户做决定">让用户做决定</h2><p>在设计方面,做决定的时候必须有开发者参与.</p>
<p>在一个项目中,开发者不应该做所有的决定,特别是业务方面的决定.</p>
<blockquote>
<p>决定什么不该决定.<br>让客户做决定.开发者,经理或者业务分析师不应该做业务方面的决定.</p>
</blockquote>
<p>业务应用需要开发者和业务负责人互相配合来开发.</p>
<p>平衡的艺术</p>
<blockquote>
<p>记录客户做出的决定.<br>不要用过于具体和没有价值的问题打扰繁忙的业务人员.<br>不要假设具体的问题不会影响业务人员的业务.<br>如果业务负责人回答”我不知道”,这也是一个称心如意的答案.</p>
</blockquote>
<h2 id="让设计指导而不是操纵开发">让设计指导而不是操纵开发</h2><blockquote>
<p>设计是软件开发过程不可缺少的步骤.</p>
</blockquote>
<p>开发之前画关键工作图是必不可少的,在做设计时你需要花时间去考虑各种不同选择的缺陷和溢出,以及如何权衡.然后下一步才考虑开始编码.</p>
<p>严格的需求-设计-代码-测试开发流程源于理想化的<strong>瀑布式</strong>开发方法,它导致在前面进行了过度的设计.</p>
<p>设计可以分为两层:<strong>战略</strong>和<strong>战术</strong>.</p>
<ol>
<li>前期的设计属于战略,通常只有在么有深入理解需求的时候需要这样设计.</li>
<li>战术设计重点是集中在单个的方法或数据类型上.这时更合适讨论如何设计类的职责.</li>
</ol>
<blockquote>
<p>CRC(类-职责-协作)卡片的设计方法就是用来做这个事情的.</p>
<ul>
<li>类名</li>
<li>职责:它应该做什么?</li>
<li>协作者:要完成工作它需要与其他的什么对象一起工作?</li>
</ul>
</blockquote>
<p>什么是好的设计?</p>
<blockquote>
<p>如果需求有了小变化,它仍能容易去实现,那么它就是好的设计.</p>
</blockquote>
<p>好的设计应该是正确的而不是精确的.</p>
<p>平衡的艺术</p>
<ul>
<li>不要在前期做大量的设计,并不是说不要设计.</li>
<li>计时初始的设计到后期不在管用,你仍需设计.</li>
<li>白板,草图,便利贴都是非常好的设计工具.</li>
</ul>
<h2 id="合理地使用技术">合理地使用技术</h2><blockquote>
<p>根据需要选择技术.</p>
</blockquote>
<p>在考虑使用新技术之前,先要把你需要解决的问题找出来.找到了需要解决的问题,接下来就要考虑:</p>
<ol>
<li>这个技术框架真能解决这个问题吗?</li>
<li>你将会被他拴住吗?</li>
<li>维护成本是多少?</li>
</ol>
<blockquote>
<p><strong>不要开发你能容易下载到的东西</strong></p>
</blockquote>
<p><strong>写的代码越少,需要维护的东西就越少!</strong></p>
<blockquote>
<p>新技术就应该像是新工具,可以帮助你更好地工作,它自己不应该成为你的工作.</p>
</blockquote>
<p>平衡的艺术</p>
<ol>
<li>也许在项目中真正评估技术方案还为时太早.</li>
<li>每一门技术都会有有点和缺点.</li>
</ol>
<h2 id="保持可以发布">保持可以发布</h2><blockquote>
<p>已经提交的代码应该随时可以行动.</p>
</blockquote>
<p>任何时候只要你没有准备好,就是敌人进攻你最佳的时机.</p>
<p>在团队工作中,修改一些东西的时候必须很谨慎.</p>
<p>如何防止你提交的代码破坏系统的代码?</p>
<ol>
<li>在本地测试运行.</li>
<li>检出最新的代码</li>
<li>提交代码</li>
</ol>
<p><strong>保持你的项目时刻可以发布.</strong>保证你的系统随时可以编译,运行,测试并立即部署.</p>
<p>平衡的艺术</p>
<ol>
<li>有时候,做一些大的改动后,你无法花费太多的时间和精力去保证系统一直可以发布.但是这只是例外,不能养成习惯.</li>
<li>如果你不得不让系统长期不可发布,那就做一个分支版本,你可以继续进行自己的试验.如果不行,还可以撤销,从头再来.</li>
<li>千万不能让系统既不可以发布,有不可以插销.</li>
</ol>
<h2 id="提早集成,频繁集成">提早集成,频繁集成</h2><p>在产品的开发过程中,集成是一个主要的<strong>风险区域</strong>.</p>
<p><strong>独立开发</strong>和<strong>早期集成</strong>之间是具有张力的.</p>
<blockquote>
<p>当你独立开发时,会发现开发速度更快,生产效率更高,你可以有效地解决出现的问题.<br>但并不意味着你避免或者延迟集成.一般需要每天集成几次,最好不要2~3天集成一次.</p>
</blockquote>
<p><strong>绝不要做大爆发式的集成.</strong></p>
<p>平衡的艺术</p>
<ol>
<li>成功的集成就意味着所有的单元测试不停地通过.</li>
<li>每天要和团队其他成员一起集成好几次.</li>
<li>如果你集成的不频繁,也许救会发现整天在解决代码集成带来的问题,而不是专心写代码.</li>
<li>独立开发很好,但是不能独立开发太久,一旦你有了经验就要快速地开始集成.</li>
</ol>
<h2 id="提早实现自动化部署">提早实现自动化部署</h2><blockquote>
<p>如果现在你还是在手工帮助质量保证人员安装应用,花些时间,考虑如何将安装过程自动化.</p>
</blockquote>
<p>质量保证人员应该<strong>测试部署过程</strong></p>
<blockquote>
<p>在项目一开始就应该实现<strong>自动化部署</strong>.</p>
</blockquote>
<p>平衡的艺术</p>
<ol>
<li>一般产品在安装的时候,都需要有相应的软硬件环境.这些环境的不同可能会导致很多问题,所以检查依赖关系,也是安装过程的一部分.</li>
<li>在没有征得用户的统一之前,安装程序绝不能删除用户的数据.</li>
<li>部署一个紧急修复的bug应该很简单,特别是在生产服务器的环境中.</li>
<li>用户应该可以安全且完整地卸载安装程序.</li>
<li>如果维护安装脚本变得很困难,那可能是一个早起警告.</li>
</ol>
<h2 id="使用演示获得频繁的反馈">使用演示获得频繁的反馈</h2><blockquote>
<p>需求就像流动的油墨.</p>
</blockquote>
<p>你无法冻结需求,正如你无法冻结市场,竞争,知识,进化或者成长一样.</p>
<p>没有人的思想和观点可以及时冻结,特别是项目的客户.</p>
<blockquote>
<p>不管是什么事情,我们都能做好,不过是以缓慢而逐步的方式.</p>
</blockquote>
<p>软件开发的成功就在于最后你离客户的期望有多远.</p>
<p>应该定期的每隔一段时间,与客户进行演示反馈.</p>
<p>如果你能频繁地和用户协商,根据他们的反馈,每个人都可以从中收益.</p>
<blockquote>
<p>不一致的术语是导致需求误解的一个主要原因.所以需要维护一个项目术语表.</p>
</blockquote>
<p>项目开发应该是清晰可见的开发.</p>
<p>平衡的艺术</p>
<p><strong>演示是用来让客户提出反馈,有助于驾驭项目的方向.</strong></p>
<h2 id="使用段迭代,增量发布">使用段迭代,增量发布</h2><blockquote>
<p><strong>统一过程和敏捷开发都使用迭代和增量开发.</strong></p>
</blockquote>
<p>迭代开发是<em>你在小且重复的周期里完成各种开发任务.</em></p>
<blockquote>
<p>对付大项目,最理想的办法就是小步前进,这也是敏捷开发的核心.</p>
</blockquote>
<p>大部分用户都是希望现在就有一个够用的软件,而不是在一年之后得到一个超级软件.</p>
<blockquote>
<p>询问用户哪些是产品的可用且不可少的核心功能.<br>不要为所有可能需要华丽功能而分心,不要沉迷于你的想象,而去做那些华而不实的界面.<br>尽快发布你的应用,迟了也许它就没有作用了.<br>使用段迭代和增量开发,可以让开发者更加专注于自己的工作.</p>
</blockquote>
<p><strong>段迭代让人感觉非常专注且具效率</strong></p>
<p>平衡的艺术</p>
<ol>
<li>如果每个迭代的时间都不够用,要么任务太大,要么因为迭代时间太短,把握好自己的开发节奏.</li>
<li>如果发布的功能背离了用户的需求,多半是因为迭代的周期太长了.</li>
<li>增量的发布必须是可用的,并且能为用户提供价值.</li>
</ol>
<h2 id="固定的价格就意味着背叛承诺">固定的价格就意味着背叛承诺</h2><blockquote>
<p>软件项目天生就是变化无常的,不可能重复.</p>
</blockquote>
<p> 开发项目时如何与客户交流?</p>
<ol>
<li>主动提议先构建系统最小,小的和有用的部分.</li>
<li>第一个迭代结束时客户有两个选择:可以选择一系列新的功能,继承进入下一个迭代.或者可以取消合同.</li>
<li>如果他们选择继续前进,那么这时候,应该就能很好地预测下一个迭代工作.</li>
</ol>
<blockquote>
<p>基于真实工作的评估.</p>
</blockquote>
<p>平衡的艺术</p>
<ol>
<li>如果你对答案不满意,那么看看你是否可以改变问题.</li>
<li>如果你在完成第一个迭代开发之前,拒绝做任何评估,也许你会失去这个合同.</li>
<li>敏捷不是意味着开始编码,我们最终会知道合适可以完成.你需要根据当前的知识和猜想,做一个大致的评估.</li>
<li>如果你别无选择,你不得不提供一个固定的价格,那么你需要学到真正好的评估.</li>
<li>也许你会考虑在合同中确定每一个迭代的固定的价格,但迭代的数量是可以商量的,它可以根据当前的工作状况进行调整.</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Agile-Develop.png" alt="敏捷开发之道"></p>]]>
    
    </summary>
    
      <category term="敏捷开发" scheme="http://www.devwiki.net/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
      <category term="高效程序员" scheme="http://www.devwiki.net/tags/%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="高效程序员的45个习惯" scheme="http://www.devwiki.net/categories/%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8445%E4%B8%AA%E4%B9%A0%E6%83%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学无止境---高效程序员的45个习惯读书笔记]]></title>
    <link href="http://www.devwiki.net/2015/06/18/Agile-Develop-Feeding-Agility/"/>
    <id>http://www.devwiki.net/2015/06/18/Agile-Develop-Feeding-Agility/</id>
    <published>2015-06-18T12:40:05.000Z</published>
    <updated>2015-07-01T10:57:26.896Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Agile-Develop.png" alt="敏捷开发之道"></p>
<a id="more"></a>
<h2 id="跟踪变化">跟踪变化</h2><blockquote>
<p>你不需要精通所有技术,但需要清除知道行业的动向,从而规划你的项目和职业生涯.</p>
</blockquote>
<p>如何才能跟上技术变化的步伐?</p>
<blockquote>
<ol>
<li>迭代和增量式的学习</li>
<li>了解最新行情</li>
<li>参加本地的用户组活动</li>
<li>参加研讨会议</li>
<li>如饥似渴地阅读</li>
</ol>
</blockquote>
<p>平衡的艺术</p>
<blockquote>
<ol>
<li>许多新想法从未变的羽翼丰满,成为有用的技术.</li>
<li>你不可能精通每一样技术,没有必要去尝试.</li>
<li>你要明白为什么需要一项新技术—-它试图解决什么样的问题?</li>
<li>避免在一时冲动的情况下,只是因为想学习而将应用切换到新的技术,框架或开发语言.</li>
</ol>
</blockquote>
<h2 id="对团队投资">对团队投资</h2><ol>
<li><p>在一个团队中,如果只是你个人技术很好远远不够.</p>
</li>
<li><p>一个学习型的团队才是较好的团队.</p>
</li>
<li><p>所学的知识不用,往往会忘记.</p>
</li>
<li><p>你需要和团队的其他成员分享所学的知识,把这些知识引入团队中.</p>
</li>
</ol>
<blockquote>
<p>“午餐会议”是团队中分享知识的非常好的方式.</p>
</blockquote>
<p>平衡的艺术</p>
<blockquote>
<ol>
<li>读书小组逐章一起阅读一本书,会非常有用,但是要选好书.</li>
<li>不是所有的讲座都能引人入胜,有些甚是显得不合时宜.</li>
<li>尽量让讲座走入团队中.</li>
<li>坚持有计划有规律地举行讲座.</li>
<li>不要局限纯技术的图书和主题,相关的非技术主题也会对团队有帮助!</li>
<li>午餐会议不是设计会议.</li>
</ol>
</blockquote>
<h2 id="懂得丢弃">懂得丢弃</h2><blockquote>
<p>根深蒂固的习惯不可轻易地就丢弃掉!Expensive  mental models aren’t discarded lightly.</p>
</blockquote>
<ol>
<li><p>敏捷的根本之一就是拥抱变化.</p>
</li>
<li><p>开发者的时间才是紧缺和昂贵的资源.</p>
</li>
<li><p>在学习一门新技术的时候,多问问自己,是否把太多的旧的态度和方法用在了新的技术上.</p>
</li>
</ol>
<blockquote>
<p>打破旧习惯很难,更难的是自己还没意识到这个问题.</p>
</blockquote>
<p>应该力求尽可能地完全转入新的开发环境.</p>
<p>平衡的艺术</p>
<blockquote>
<p>要果断丢弃旧的习惯,一味地遵循过时的旧习惯会危害你的职业生涯.<br>不是完全忘记旧习惯,而是只在使用适当的技术时才使用它.<br>对于所使用的语言,要总结熟悉的语言特性,并且比较这些特性在新语言或新版本中的变化.</p>
</blockquote>
<h2 id="打破沙锅问到底">打破沙锅问到底</h2><blockquote>
<p>不能只满足于别人告诉你的表面现象,要不停地提问直到你明白问题的根源.</p>
</blockquote>
<ol>
<li>为了解决问题,你需要很好地了解系统的全局.</li>
<li>问”为什么”,但是要问到点子上.</li>
<li>当你问为什么的时候,也许你会被反问为什么你问这个问题,在提问之前,想好你问的理由,这会有助于你问出巧当的问题.</li>
<li>“这个,我不知道.”是一个好的起点,应该由此进行更进一步的调查,而不是在此戛然而止.</li>
</ol>
<h2 id="把握开发的节奏">把握开发的节奏</h2><blockquote>
<p>项目开打需要有一致和稳定的节奏.</p>
</blockquote>
<p>敏捷项目会有一个节奏和循环,让开发更加轻松.</p>
<p>设定一个短时的期限,为任务设定不能延长的最终期限.</p>
<blockquote>
<p>解决问题,在事情变得一团糟之前.</p>
</blockquote>
<p>平衡的艺术</p>
<blockquote>
<p>在每天结束的时候,测试代码,提交代码,没有残留任何代码.<br>不要搞的经常加班.<br>以固定,有规律的长度运行迭代.<br>如果开发节奏过于密集,你会精疲力尽的.<br>有规律的开发节奏会暴露很多问题,让你有更多的鼓起勇气的接口.<br>就像减肥一样,一点点的成功也是一个很大的激励.</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Agile-Develop.png" alt="敏捷开发之道"></p>]]>
    
    </summary>
    
      <category term="敏捷开发" scheme="http://www.devwiki.net/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
      <category term="高效程序员" scheme="http://www.devwiki.net/tags/%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="高效程序员的45个习惯" scheme="http://www.devwiki.net/categories/%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8445%E4%B8%AA%E4%B9%A0%E6%83%AF/"/>
    
  </entry>
  
</feed>