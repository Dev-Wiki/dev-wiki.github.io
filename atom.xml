<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[DevWiki's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.devwiki.net//"/>
  <updated>2015-06-25T00:22:10.890Z</updated>
  <id>http://www.devwiki.net//</id>
  
  <author>
    <name><![CDATA[DevWiki]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[CleanCode笔记---格式]]></title>
    <link href="http://www.devwiki.net/2015/06/24/CleanCode-Note-Formatter/"/>
    <id>http://www.devwiki.net/2015/06/24/CleanCode-Note-Formatter/</id>
    <published>2015-06-24T15:46:05.000Z</published>
    <updated>2015-06-25T00:22:10.890Z</updated>
    <content type="html"><![CDATA[<p>我本人算是一个有洁癖的程序猿,喜欢整齐格式的代码.</p>
<h2 id="格式的意义">格式的意义</h2><p>让代码能工作不是编程的头等大事,因为代码首先是给人看的,其次才是给计算机看的.</p>
<p>代码是团队沟通的桥梁,乱糟糟的代码是没有人想看的.</p>
<a id="more"></a>
<h2 id="垂直格式">垂直格式</h2><p>一个Java类文件应该有多长?这是个问题.有人可能说100行,有人可能说1000行.</p>
<p>但是人们倾向于短的代码文件,所以一个类文件应该越短越好,尽量不要超过1000行.</p>
<h3 id="向报纸学习">向报纸学习</h3><p>代码排版应该像报纸一样.从上往下读,在顶部应该有个类似标题一样的东西,告诉读者大致内容是什么,再往下是章节,告诉读者代码有哪些部分组成,章节下面是细节,如果读者感兴趣可以了解这部分实现的细节.</p>
<p>比如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Button backButton;</span><br><span class="line"><span class="keyword">private</span> TextView titleView;</span><br><span class="line"><span class="keyword">private</span> Button settingButton;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    initUtil();</span><br><span class="line">    initUI();</span><br><span class="line">    initData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUtil</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUI</span><span class="params">()</span></span>&#123;</span><br><span class="line">    initNavigationView();</span><br><span class="line">    </span><br><span class="line">    initContentView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initNavigationView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    backButton = (Button) findViewById(R.id.btn_back);</span><br><span class="line">    backButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    titleView = (TextView) findViewById(R.id.tv_title);</span><br><span class="line">    settingButton = (Button) findViewById(R.id.btn_setting);</span><br><span class="line">    settingButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initNavigationView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initContentView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="垂直方向上的分割">垂直方向上的分割</h3><p>几乎所有的代码都是从上往下读,从左往右读.每行展现一个表达式或者一个字句或者一个方法调用,每组代码行展示一条完整的思路.这些思路都是用空白行分隔开来.</p>
<p>就像上面的initUI()方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUI</span><span class="params">()</span></span>&#123;</span><br><span class="line">    initNavigationView();</span><br><span class="line">    </span><br><span class="line">    initContentView();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>空白行让我们很容易明白初始化界面的步骤:</p>
<ol>
<li>初始化导航栏组件</li>
<li>初始化内容视图</li>
</ol>
<h3 id="垂直距离">垂直距离</h3><p>从上面的代码可以看出,关系密切的方法应该靠近;关系不密切的要分隔开来.这样很容易理解系统要做什么,怎么去做,不需要你去记住查找和记住代码碎片在哪里.</p>
<p>如何做到靠近与分隔呢?</p>
<ol>
<li>方法内的局部变量声明放在方法的顶部.</li>
<li>对象变量的声明放在类的顶部.</li>
<li>相关的函数应靠近放置.</li>
<li>概念相近的代码应该放在一起.</li>
</ol>
<h3 id="垂直顺序">垂直顺序</h3><p>一般而言,我们都想自上而下展示函数的依赖调用.也就是说被调用的函数在执行函数的下面.</p>
<h2 id="横向格式">横向格式</h2><p>一般而言,一行代码不应多于100个字符.</p>
<h3 id="水平方向上的分隔与靠近">水平方向上的分隔与靠近</h3><p>赋值语句的等号左右空一格,可以起到强调的作用.</p>
<p>多参方法中,参数的逗号后空一格,表明参数的独立性.</p>
<p>所以水平方向上也应遵循关系密切的靠近,关系交远的分隔.</p>
<h3 id="水平对齐">水平对齐</h3><p><strong>不需要水平方向上的有意识的对齐</strong>,比如下面:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Button   backButton;</span><br><span class="line"><span class="keyword">private</span> TextView titleView;</span><br><span class="line"><span class="keyword">private</span> Button   settingButton;</span><br></pre></td></tr></table></figure></p>
<p>如果出现名称更长的类型,所有的变量又得重新对齐.所以不推荐此种方式.</p>
<h3 id="缩进">缩进</h3><p><strong>缩进表明的代码的影响范围!</strong></p>
<p>缩进有利于代码的阅读,明确代码之间的等级关系和影响范围.</p>
<p>切记:单行也要缩进.不要违反缩进规则.</p>
<p>每个人都有不同的写代码的风格,个人建议按照Google的Java代码风格来编写代码.详情请点击此处查看:<br><a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="external">Google Java编程风格</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我本人算是一个有洁癖的程序猿,喜欢整齐格式的代码.</p>
<h2 id="格式的意义">格式的意义</h2><p>让代码能工作不是编程的头等大事,因为代码首先是给人看的,其次才是给计算机看的.</p>
<p>代码是团队沟通的桥梁,乱糟糟的代码是没有人想看的.</p>]]>
    
    </summary>
    
      <category term="CleanCode" scheme="http://www.devwiki.net/tags/CleanCode/"/>
    
      <category term="代码整洁之道" scheme="http://www.devwiki.net/tags/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
      <category term="CleanCode-代码整洁之道" scheme="http://www.devwiki.net/categories/CleanCode-%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android调试Log二次包装]]></title>
    <link href="http://www.devwiki.net/2015/06/24/Android-New-Log/"/>
    <id>http://www.devwiki.net/2015/06/24/Android-New-Log/</id>
    <published>2015-06-24T11:16:22.000Z</published>
    <updated>2015-06-25T00:32:50.548Z</updated>
    <content type="html"><![CDATA[<p>在Android开发过程中经常使用Log打印一些调试的信息,比如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.d(TAG, <span class="string">"xxxxx"</span>);</span><br></pre></td></tr></table></figure></p>
<p>但是,每一个类都要定义一个TAG,一般TAG等于类名本身,比较繁琐.更重要的是,每次还要带上这个参数.如果打印的信息比较多或者一个类的代码数量比较长时,不太方便查找Log的位置.那么有没有一种方法,解决上面的问题呢?</p>
<a id="more"></a>
<h2 id="问题分析">问题分析</h2><blockquote>
<ol>
<li>每个类的TAG等于类名,那么能不能自己去寻找类名呢?</li>
<li>能不能找到打印log所在的位置呢?</li>
</ol>
</blockquote>
<h2 id="解决问题">解决问题</h2><p>答案是肯定的!在Java中可以使用Throwable类获取栈的信息.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StackTraceElement[] elements = <span class="keyword">new</span> Throwable().getStackTrace();</span><br><span class="line">String className = elements[<span class="number">1</span>].getFileName();</span><br><span class="line">String methodName = elements[<span class="number">1</span>].getMethodName();</span><br><span class="line"><span class="keyword">int</span> lineNumber = elements[<span class="number">1</span>].getLineNumber();</span><br></pre></td></tr></table></figure></p>
<p>通过此方法可以获取类名,方法名,行号信息.获取到信息后还需在包装一下,因为是Debug时的Log就取名DLog吧.<br>那么Dlog中肯定要有一个Log的实例,还要与Log方法同名的方法,比如v(),d(),e(),w(),i()等.如下所示:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DLog</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String className;			<span class="comment">//所在的类名</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String methodName;			<span class="comment">//所在的方法名</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> lineNumber;				<span class="comment">//所在行号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">	 * 私有化构造器</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">DLog</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 是否处于调试模式</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDebuggable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> BuildConfig.DEBUG;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 创建Log信息</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">createLog</span><span class="params">(String log)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		buffer.append(<span class="string">"["</span>);</span><br><span class="line">		buffer.append(methodName);</span><br><span class="line">		buffer.append(<span class="string">":"</span>);</span><br><span class="line">		buffer.append(lineNumber);</span><br><span class="line">		buffer.append(<span class="string">"]"</span>);</span><br><span class="line">		buffer.append(log);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> buffer.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 获取类名,方法名,行号</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMethodNames</span><span class="params">(StackTraceElement[] sElements)</span> </span>&#123;</span><br><span class="line">		className = sElements[<span class="number">1</span>].getFileName();</span><br><span class="line">		methodName = sElements[<span class="number">1</span>].getMethodName();</span><br><span class="line">		lineNumber = sElements[<span class="number">1</span>].getLineNumber();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">		Log.v(className, createLog(message));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">		Log.d(className, createLog(message));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">		Log.i(className, createLog(message));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">		Log.w(className, createLog(message));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">		Log.e(className, createLog(message));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="再次优化">再次优化</h2><p>这样好了,即能自己找到类名,又能打印出Log信息所在的位置.且慢,还有一个问题:</p>
<blockquote>
<p>如果一个项目中使用了很多Log输出,项目结束时又不允许在打印这些信息怎么办?难道要一个一个删除?</p>
</blockquote>
<p>一个一个删除太麻烦了,谁让我们都想偷懒呢!为何我们不在上面的那个类加个控制,不想输出可以一键屏蔽多好呀.</p>
<blockquote>
<p>Log中的信息是有类别的,我们可以给每个类别分个序号,在来一个控制序号的级别,这样就可以控制显示的类别,</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 包装后的Log输出,可控制显示哪些级别的LOG</span><br><span class="line"> * <span class="doctag">@author</span> Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DLog</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String className;			<span class="comment">//所在的类名</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String methodName;			<span class="comment">//所在的方法名</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> lineNumber;				<span class="comment">//所在行号</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERBOSE = <span class="number">1</span>;		  <span class="comment">//显示Verbose及以上的Log</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEBUG = <span class="number">2</span>;			<span class="comment">//显示Debug及以上的Log</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INFO = <span class="number">3</span>;			<span class="comment">//显示Info及以上的Log</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WARN = <span class="number">4</span>;			<span class="comment">//显示Warn及以上的Log</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ERROR = <span class="number">5</span>;			<span class="comment">//显示Error及以上的Log</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOTHING = <span class="number">6</span>;		<span class="comment">//全部不显示</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LEVEL = VERBOSE;	<span class="comment">//控制显示的级别</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">DLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDebuggable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> BuildConfig.DEBUG;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">createLog</span><span class="params">(String log)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		buffer.append(<span class="string">"["</span>);</span><br><span class="line">		buffer.append(methodName);</span><br><span class="line">		buffer.append(<span class="string">":"</span>);</span><br><span class="line">		buffer.append(lineNumber);</span><br><span class="line">		buffer.append(<span class="string">"]"</span>);</span><br><span class="line">		buffer.append(log);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> buffer.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMethodNames</span><span class="params">(StackTraceElement[] sElements)</span> </span>&#123;</span><br><span class="line">		className = sElements[<span class="number">1</span>].getFileName();</span><br><span class="line">		methodName = sElements[<span class="number">1</span>].getMethodName();</span><br><span class="line">		lineNumber = sElements[<span class="number">1</span>].getLineNumber();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (LEVEL &lt;= VERBOSE) &#123;</span><br><span class="line">			getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">			Log.v(className, createLog(message));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (LEVEL &lt;= DEBUG) &#123;</span><br><span class="line">			getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">			Log.d(className, createLog(message));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (LEVEL &lt;= INFO) &#123;</span><br><span class="line">			getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">			Log.i(className, createLog(message));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (LEVEL &lt;= WARN) &#123;</span><br><span class="line">			getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">			Log.w(className, createLog(message));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isDebuggable()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (LEVEL &lt;= ERROR) &#123;</span><br><span class="line">			getMethodNames(<span class="keyword">new</span> Throwable().getStackTrace());</span><br><span class="line">			Log.e(className, createLog(message));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用方法">使用方法</h2><p>Dlog和Android自带的Log类一样,直接打印信息.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Dlog.d(<span class="string">"Test Dlog"</span>);</span><br><span class="line">Dlog.e(<span class="string">"Test Dlog"</span>);</span><br><span class="line">Dlog.v(<span class="string">"Test Dlog"</span>);</span><br><span class="line">Dlog.i(<span class="string">"Test Dlog"</span>);</span><br><span class="line">Dlog.w(<span class="string">"Test Dlog"</span>);</span><br></pre></td></tr></table></figure></p>
<p>显示效果如下:<br><img src="http://7xjhi6.com1.z0.glb.clouddn.com/Android-New-Log-Pic01.png" alt="打印效果"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Android开发过程中经常使用Log打印一些调试的信息,比如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.d(TAG, <span class="string">"xxxxx"</span>);</span><br></pre></td></tr></table></figure></p>
<p>但是,每一个类都要定义一个TAG,一般TAG等于类名本身,比较繁琐.更重要的是,每次还要带上这个参数.如果打印的信息比较多或者一个类的代码数量比较长时,不太方便查找Log的位置.那么有没有一种方法,解决上面的问题呢?</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://www.devwiki.net/tags/Android/"/>
    
      <category term="Log" scheme="http://www.devwiki.net/tags/Log/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP学习笔记---状态码]]></title>
    <link href="http://www.devwiki.net/2015/06/24/Http-Status-Code/"/>
    <id>http://www.devwiki.net/2015/06/24/Http-Status-Code/</id>
    <published>2015-06-24T11:06:15.000Z</published>
    <updated>2015-06-24T11:09:21.578Z</updated>
    <content type="html"><![CDATA[<h2 id="定义">定义</h2><blockquote>
<p>状态码:客户端访问服务器时返回的结果状态.</p>
</blockquote>
<h2 id="格式">格式</h2><p>通常状态码是三位数字和原因短语组成,其中第一位数字为响应类别.比如</p>
<blockquote>
<p>200 OK</p>
</blockquote>
<a id="more"></a>
<h2 id="类别">类别</h2><p>响应类别有以下5种:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>类别</th>
<th>原因短语</th>
</tr>
</thead>
<tbody>
<tr>
<td>1XX</td>
<td>Information(信息性状态码)</td>
<td>接收的请求长在处理</td>
</tr>
<tr>
<td>2XX</td>
<td>Success(成功状态码)</td>
<td>请求正常处理完毕</td>
</tr>
<tr>
<td>3XX</td>
<td>Redirection(重定向状态码)</td>
<td>需要进行附加操作以完成请求</td>
</tr>
<tr>
<td>4XX</td>
<td>Client Error(客户端错误状态码)</td>
<td>服务器无法处理请求</td>
</tr>
<tr>
<td>5XX</td>
<td>Server Error(服务器错误窗台吗)</td>
<td>服务器处理请求出错</td>
</tr>
</tbody>
</table>
<h2 id="常用状态码">常用状态码</h2><h3 id="2XX_成功">2XX 成功</h3><blockquote>
<ul>
<li>200 OK 表示客户端发来的请求在服务器被正常处理了.</li>
<li>204 No Content 服务器接收的请求已经成功处理,但返回的响应报文中不含实体的主体部分.</li>
<li>206 Partial Content 客户端进行了范围请求,服务器成功执行了这部分的GET请求.</li>
</ul>
</blockquote>
<h3 id="3XX_重定向">3XX 重定向</h3><blockquote>
<ul>
<li>301 Moved Permanently 永久性重定向</li>
<li>302 Found 临时性重定向</li>
<li>303 See Other 请求对应的资源存在着另一个URI,应使用GET方法重新获取请求的资源.</li>
<li>304 Not Modify 客户端发送附加条件的请求时,服务器端允许请求访问资源.</li>
<li>307 Temporary Redirect 临时重定向</li>
</ul>
</blockquote>
<h3 id="4XX_客户端错误">4XX 客户端错误</h3><blockquote>
<ul>
<li>400 Bad Request 请求报文中存在语法错误.</li>
<li>401 Unauthorized 权鉴失败,需要有HTTP认证的认证信息.</li>
<li>403 Forbidden 请求的资源被服务器拒绝了</li>
<li>404 Not Fount 服务器无法找到该资源.</li>
</ul>
</blockquote>
<h3 id="5XX_服务器错误">5XX 服务器错误</h3><blockquote>
<ul>
<li>500 Internal Server Error 服务器执行请求时发生错误</li>
<li>503 Service Unavailable 服务器暂时处于超负载或正在进行停机维护,现在无法处理请求.</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="定义">定义</h2><blockquote>
<p>状态码:客户端访问服务器时返回的结果状态.</p>
</blockquote>
<h2 id="格式">格式</h2><p>通常状态码是三位数字和原因短语组成,其中第一位数字为响应类别.比如</p>
<blockquote>
<p>200 OK</p>
</blockquote>]]>
    
    </summary>
    
      <category term="HTTP" scheme="http://www.devwiki.net/tags/HTTP/"/>
    
      <category term="HTTP状态码" scheme="http://www.devwiki.net/tags/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    
      <category term="HTTP学习笔记" scheme="http://www.devwiki.net/categories/HTTP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CleanCode笔记---注释]]></title>
    <link href="http://www.devwiki.net/2015/06/24/CleanCode-Note-Comments/"/>
    <id>http://www.devwiki.net/2015/06/24/CleanCode-Note-Comments/</id>
    <published>2015-06-24T01:02:25.000Z</published>
    <updated>2015-06-24T04:48:33.501Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>什么也比不上放置良好的注释来的有用,什么也不会比乱七八糟的注释更有本事搞乱一个模块!</p>
</blockquote>
<p>如果我们擅长用开发语言来表达意图,就不那么需要注释,甚至根本不需要!</p>
<p>注释的巧当用法是弥补我们在代码表达意图时遭遇失败.</p>
<p>如果你发现自己需要写注释,在想想看是否有办法不写注释.</p>
<p>程序员应当负责将注释保持在可维护,有关联,精确的高度.</p>
<a id="more"></a>
<h2 id="注释不能美化代码">注释不能美化代码</h2><p>写注释的常见动机之一是糟糕代码的存在.与其花时间编写注释不如花时间清洁糟糕的代码.</p>
<h2 id="用代码来阐述">用代码来阐述</h2><p>比如以下代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//check to see if the employee is eligible for full benfits</span></span><br><span class="line"><span class="keyword">if</span>((employee.flag &amp; HOURLY_FLAG) &amp;&amp; (employee.age &gt; <span class="number">65</span>))</span><br></pre></td></tr></table></figure></p>
<p>为何不改为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(employee.isEligibleForFullBenefits())</span><br></pre></td></tr></table></figure></p>
<p>只需要几秒钟,就能用代码解释大部分的意图.</p>
<h2 id="好注释">好注释</h2><p>好注释有以下几项:</p>
<ol>
<li>法律信息</li>
<li>提供信息的注释</li>
<li>对意图的解释</li>
<li>阐释</li>
<li>警示</li>
<li>TODO注释</li>
<li>放大</li>
<li>公共API中的javadoc</li>
</ol>
<h2 id="坏注释">坏注释</h2><p>坏注释包括以下:</p>
<ol>
<li>呐呐自语</li>
<li>多余的注释</li>
<li>误导性注释</li>
<li>循规式注释</li>
<li>日志式注释</li>
<li>位置标记</li>
<li>括号后的注释</li>
<li>归属与署名</li>
<li>注释掉的代码</li>
<li>HTML注释</li>
<li>非本地信息</li>
<li>信息过多</li>
<li>不明显的联系</li>
<li>函数头</li>
<li>非公共代码中的javadoc</li>
</ol>
<p>切记<strong>能用函数或变量就别用注释</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>什么也比不上放置良好的注释来的有用,什么也不会比乱七八糟的注释更有本事搞乱一个模块!</p>
</blockquote>
<p>如果我们擅长用开发语言来表达意图,就不那么需要注释,甚至根本不需要!</p>
<p>注释的巧当用法是弥补我们在代码表达意图时遭遇失败.</p>
<p>如果你发现自己需要写注释,在想想看是否有办法不写注释.</p>
<p>程序员应当负责将注释保持在可维护,有关联,精确的高度.</p>]]>
    
    </summary>
    
      <category term="CleanCode" scheme="http://www.devwiki.net/tags/CleanCode/"/>
    
      <category term="代码整洁之道" scheme="http://www.devwiki.net/tags/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
      <category term="CleanCode-代码整洁之道" scheme="http://www.devwiki.net/categories/CleanCode-%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CleanCode笔记---函数]]></title>
    <link href="http://www.devwiki.net/2015/06/24/CleanCode-Note-Function/"/>
    <id>http://www.devwiki.net/2015/06/24/CleanCode-Note-Function/</id>
    <published>2015-06-24T00:47:35.000Z</published>
    <updated>2015-06-24T04:48:30.224Z</updated>
    <content type="html"><![CDATA[<h2 id="函数要短小">函数要短小</h2><p><strong>函数第一原则要短小,第二原则还是要短小</strong></p>
<p>如果函数需要翻页,就有拆分的必要了.翻页往往会导致看着下面忘了上面.</p>
<p>一个函数不要太长,一般每行不超过100个字符,行数不超过30行.</p>
<p>if, else, while, case语句中代码应只有一行,该行要描述特定条件下要做的事情.</p>
<a id="more"></a>
<h2 id="只做一件事">只做一件事</h2><p>函数也应该遵守单一职责原则,即一个函数只做一件事情.比如一个检查登陆账户的函数:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isAccountAccess = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(userName.isAccess() &amp;&amp; password.isAcces())&#123;</span><br><span class="line">        isAccountAccess = <span class="keyword">true</span>;</span><br><span class="line">        login();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        isAccountAccess = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>函数名称为checkAccount,意为检查账户;而里面当账户可用是却请求登录.</p>
<p>如果开发人员未仔细检查代码,只看函数名,很容易出现问题.检查账户的函数就应该只检查账户,而不应该在做其他事情.</p>
<h2 id="每个函数一个抽象层次">每个函数一个抽象层次</h2><p>一个函数不应该既有抽象又有细节!</p>
<p>我们经常写Android的Activity时这样:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    </span><br><span class="line">    ToastUtil.init(<span class="keyword">this</span>);</span><br><span class="line">        </span><br><span class="line">    startButton = findViewById(R.id.start_button);</span><br><span class="line">    resultView= findViewById(R.id.result_view);</span><br><span class="line">    startButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    resultView.setText(<span class="string">"结果为:"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>抛去2,3两行不说.第5行为抽象,而第7~10行为细节,这样读下来,突然发生了变化,会误入到细节之中.<br>不如改为下面这样:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    </span><br><span class="line">    ToastUtil.init(<span class="keyword">this</span>);</span><br><span class="line">        </span><br><span class="line">    initView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    startButton = findViewById(R.id.start_button);</span><br><span class="line">    resultView= findViewById(R.id.result_view);</span><br><span class="line">    startButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    resultView.setText(<span class="string">"结果为:"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样只需阅读在onCreate中做了哪些事情,而不需要去知道具体怎么做的.所以一个函数应保持同一抽象层次.</p>
<h2 id="switch语句">switch语句</h2><p>我们一般写switch语句往往如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当有多个分支时,switch语句往往会很长.可以通过以下来改善:</p>
<ol>
<li>每个case下只有一行代码.</li>
<li>使用策略模式分解.</li>
</ol>
<h2 id="使用描述性的名称">使用描述性的名称</h2><p>函数的名称应该看到名字就知道该函数要做什么事情<br>比如上面的checkAccount(),看到改名称就应该知道该函数做的事情是检查账户,其返回值为boolean类型,则返回值应该是账户合法或者不合法.</p>
<h2 id="函数参数">函数参数</h2><p>关于函数的参数个数:</p>
<blockquote>
<p>零个最佳,其次是一参,再次是二参,尽量避免三参或更过</p>
</blockquote>
<h3 id="零个最佳">零个最佳</h3><p>最理想的函数是没有参数,直接调用,不考虑其需要的条件.因为函数自己已经拥有相应的条件.<br>比如Android中的Activity的onStart(), onResume()等</p>
<h3 id="其次是一参">其次是一参</h3><p>一个参数是最普遍的形式.<br>比如常用的setter和getter方法.一个参数可以明确函数运行必要的条件.</p>
<h3 id="再次是二参">再次是二参</h3><p>两个参数已经可以出现混淆了.<br>比如String类有个方法replace(String oldChar, String newChar)如果不是参数的名称,很容易混淆是用谁代替谁.</p>
<p>所以当函数出现两个参数时,务必给参数取个好的名称,以区分参数的意义.</p>
<p>举个返利,放我们给一个对象集合排序时,会实现Comparator接口,如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCompar</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String lhs, String rhs)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span> Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>你知道lhs与rhs的含义么?他们两个比较的结果是什么意思?</p>
<h3 id="避免三参或更多">避免三参或更多</h3><p>三个参数更容易出现问题.特别是三个参数类型一样时,往往会顺序错误.<br>比如求梯形的面积,我们都知道梯形面积S = (上底a + 下底b) * 高h /2;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">calculateArea</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b)*c/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果不看细节,你能一下子就看出参数的含义么?</p>
<p>有需要三个或者更多参数时就应该抽象为一个类了.<br>上面的方法可以改为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">calculateArea</span><span class="params">(Trapezoid trapezoid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (trapezoid.getTopWidth() + trapezoid.getBottomWidth()) * trapezoid.getHeight / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="标志参数(boolean值)">标志参数(boolean值)</h3><p><strong>不要使用boolean类型的参数!!!</strong><br>传入boolean类型的参数,那么该函数必定违反单一职责原则!<br>为何不拆分为两个函数呢?</p>
<h2 id="无副作用">无副作用</h2><p>上面有个checkAccount()函数其实就是一个有副作用的函数!</p>
<p>方法名为checkAccount(),且函数值也是boolean类型的.但是它却在账户可用时做了登录操作!!!</p>
<p>如果不知道该函数的细节,多次调用会导致重复登陆!!!</p>
<p>所以函数内容一定要和函数名称相同.</p>
<h2 id="分割指令与查询">分割指令与查询</h2><p>函数要么做什么事,要么回答什么事情,但二者不可兼得.</p>
<p>函数应该修改某对象的状态或者返回该对象的有关信息.</p>
<p>例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String attribute, String value)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>该函数用于修改属性,如果成功返回true,如果不存在那个属性则返回false.这样会导致:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(set(<span class="string">"username"</span>, <span class="string">"jack"</span>))..</span><br></pre></td></tr></table></figure></p>
<p>这句是什么意思呢?意思是设置username为jack成功呢?还是设置username之前检查username是否为jack呢?</p>
<p>所以要分割指令和查询:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAttrExists</span><span class="params">(String attr)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="使用异常代替返回错误码">使用异常代替返回错误码</h2><p>我们经常这样写:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deletePage</span><span class="params">(Page page)</span>；</span><br><span class="line"></span><br><span class="line"><span class="title">if</span><span class="params">(deletePage(page)</span> </span>== E_OK)...</span><br></pre></td></tr></table></figure></p>
<p>但是这样会导致深层次的嵌套:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(deletePage() == E_OK)&#123;</span><br><span class="line">    <span class="keyword">if</span>(registy.deleteReference(page.name) == E_OK)&#123;</span><br><span class="line">        <span class="keyword">if</span>(configKeys.deleteKey(page.name.makeKey()) == E_OK) &#123;</span><br><span class="line">            logger.log(<span class="string">"page deleted"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.log(<span class="string">"configkey not delete"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.log(delteReference from registry failed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    logger.log(<span class="string">"delete failed"</span>);</span><br><span class="line">    <span class="keyword">return</span> E_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果改为返回异常,错误处理就能从主路径中分离出来:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    deletePage(page);</span><br><span class="line">    registry.deleteReference(page.name);</span><br><span class="line">    configKeys.deleteKey(page.name.makeKey());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="抽离Try/Catch代码块">抽离Try/Catch代码块</h3><p>代码处理直接放在try..catch中,要抽离出来,另外形成函数:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletePage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        deletePageAndReferences(page);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        logError(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="处理错误就是一件事">处理错误就是一件事</h3><p>一个函数只做一件事,处理错误就是一件事,所以错误处理要抽离单独的函数.</p>
<p>使用异常代替错误码,新的异常可以从异常类中派生,无需重新编译或重新部署.</p>
<h2 id="别重复自己">别重复自己</h2><p>代码混乱最直接的原因就是代码重复.重复可能是软件中一切邪恶的根源.所以别重复自己!!!</p>
<h2 id="结构化编程">结构化编程</h2><p>结构化编程规范:</p>
<blockquote>
<p>每个函数,函数中的每个代码块应该只有一个入口,一个出口.</p>
</blockquote>
<p>函数应遵守此规范,但是对于小函数,这些规则助益不大,只有在大函数中才有明显的好处.</p>
<p>只要函数短小,偶尔出现的return, break或 continue语句就没坏处,甚至比单入单出原则更有表达力.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="函数要短小">函数要短小</h2><p><strong>函数第一原则要短小,第二原则还是要短小</strong></p>
<p>如果函数需要翻页,就有拆分的必要了.翻页往往会导致看着下面忘了上面.</p>
<p>一个函数不要太长,一般每行不超过100个字符,行数不超过30行.</p>
<p>if, else, while, case语句中代码应只有一行,该行要描述特定条件下要做的事情.</p>]]>
    
    </summary>
    
      <category term="CleanCode" scheme="http://www.devwiki.net/tags/CleanCode/"/>
    
      <category term="代码整洁之道" scheme="http://www.devwiki.net/tags/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
      <category term="CleanCode-代码整洁之道" scheme="http://www.devwiki.net/categories/CleanCode-%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android中Pcm文件转Amr文件]]></title>
    <link href="http://www.devwiki.net/2015/06/23/Android-Pcm2Amr/"/>
    <id>http://www.devwiki.net/2015/06/23/Android-Pcm2Amr/</id>
    <published>2015-06-23T09:45:09.000Z</published>
    <updated>2015-06-24T04:48:50.705Z</updated>
    <content type="html"><![CDATA[<p>最近在做一个聊天的模块,聊天的模块很简单:</p>
<blockquote>
<p>录音-上传-接收-播放</p>
</blockquote>
<h2 id="录音">录音</h2><p>录音部分可以采用MediaRecord和AudioRecord两个类进行录音.但是各有优缺点.</p>
<p>MediaRecord已经封装了很多方法,方便使用.<br>AudioRecord能获取录音的原生数据,以便对录音二次加工.</p>
<p>在录音过程我采用的是AudioRecord.但是AudioRecord录音数据是PCM格式,数据占用存储空间很大.必须压缩后才能传输.项目中的压缩是项目其他成员写的一个so库进行压缩的,有点不太方便.在网上翻阅了下,其实Android系统内部已经携带有压缩的库文件了.</p>
<a id="more"></a>
<h2 id="压缩库">压缩库</h2><p>Android自带的有一个Pcm转amr的库:<strong>media_jni.so</strong>.<br>但是由于是Android系统内部的库,无法直接使用.根据网上的说明,最终终于弄明白如何使用了.</p>
<h3 id="AmrInputStream">AmrInputStream</h3><p>在要使用压缩库的项目中新建包:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.android.media</span><br></pre></td></tr></table></figure></p>
<p>在此包中新建AmrInputStream类,代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AmrInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"media_jni"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"AmrInputStream"</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">// frame is 20 msec at 8.000 khz</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> SAMPLES_PER_FRAME = <span class="number">8000</span> * <span class="number">20</span> / <span class="number">1000</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">// pcm input stream</span></span><br><span class="line">    <span class="keyword">private</span> InputStream mInputStream;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">// native handle</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mGae;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">// result amr stream</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] mBuf = <span class="keyword">new</span> <span class="keyword">byte</span>[SAMPLES_PER_FRAME * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBufIn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBufOut = <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// helper for bytewise read()</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] mOneByte = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1</span>];</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Create a new AmrInputStream, which converts 16 bit PCM to AMR</span><br><span class="line">     * <span class="doctag">@param</span> inputStream InputStream containing 16 bit PCM.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AmrInputStream</span><span class="params">(InputStream inputStream)</span> </span>&#123;</span><br><span class="line">        mInputStream = inputStream;</span><br><span class="line">        mGae = GsmAmrEncoderNew();</span><br><span class="line">        GsmAmrEncoderInitialize(mGae);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rtn = read(mOneByte, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> rtn == <span class="number">1</span> ? (<span class="number">0xff</span> &amp; mOneByte[<span class="number">0</span>]) : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> read(b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGae == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"not open"</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// local buffer of amr encoded audio empty</span></span><br><span class="line">        <span class="keyword">if</span> (mBufOut &gt;= mBufIn) &#123;</span><br><span class="line">            <span class="comment">// reset the buffer</span></span><br><span class="line">            mBufOut = <span class="number">0</span>;</span><br><span class="line">            mBufIn = <span class="number">0</span>;</span><br><span class="line">           </span><br><span class="line">            <span class="comment">// fetch a 20 msec frame of pcm</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLES_PER_FRAME * <span class="number">2</span>; ) &#123;</span><br><span class="line">                <span class="keyword">int</span> n = mInputStream.read(mBuf, i, SAMPLES_PER_FRAME * <span class="number">2</span> - i);</span><br><span class="line">                <span class="keyword">if</span> (n == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                i += n;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">            <span class="comment">// encode it</span></span><br><span class="line">            mBufIn = GsmAmrEncoderEncode(mGae, mBuf, <span class="number">0</span>, mBuf, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// return encoded audio to user</span></span><br><span class="line">        <span class="keyword">if</span> (length &gt; mBufIn - mBufOut) length = mBufIn - mBufOut;</span><br><span class="line">        System.arraycopy(mBuf, mBufOut, b, offset, length);</span><br><span class="line">        mBufOut += length;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mInputStream != <span class="keyword">null</span>) mInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mInputStream = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mGae != <span class="number">0</span>) GsmAmrEncoderCleanup(mGae);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mGae != <span class="number">0</span>) GsmAmrEncoderDelete(mGae);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    mGae = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGae != <span class="number">0</span>) &#123;</span><br><span class="line">            close();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"someone forgot to close AmrInputStream"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// AudioRecord JNI interface</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">GsmAmrEncoderNew</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">GsmAmrEncoderInitialize</span><span class="params">(<span class="keyword">int</span> gae)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">GsmAmrEncoderEncode</span><span class="params">(<span class="keyword">int</span> gae,</span><br><span class="line">           <span class="keyword">byte</span>[] pcm, <span class="keyword">int</span> pcmOffset, <span class="keyword">byte</span>[] amr, <span class="keyword">int</span> amrOffset)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">GsmAmrEncoderCleanup</span><span class="params">(<span class="keyword">int</span> gae)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">GsmAmrEncoderDelete</span><span class="params">(<span class="keyword">int</span> gae)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="AmrEmcoder">AmrEmcoder</h3><p>只有AmrInputStream类是不够,还需要一个转码的类AmrEncoder,代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmrEncoder</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pcm2Amr</span><span class="params">(String pcmPath , String amrPath)</span> </span>&#123;</span><br><span class="line">    	FileInputStream fis;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			fis = <span class="keyword">new</span> FileInputStream(pcmPath);</span><br><span class="line">			pcm2Amr(fis, amrPath);</span><br><span class="line">			fis.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e1) &#123;</span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pcm2Amr</span><span class="params">(InputStream pcmStream, String amrPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AmrInputStream ais = <span class="keyword">new</span> AmrInputStream(pcmStream);</span><br><span class="line">            OutputStream out = <span class="keyword">new</span> FileOutputStream(amrPath);</span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">/*</span><br><span class="line">             * 下面的AMR的文件头,缺少这几个字节是不行的</span><br><span class="line">             */</span></span><br><span class="line">            out.write(<span class="number">0x23</span>);</span><br><span class="line">            out.write(<span class="number">0x21</span>);</span><br><span class="line">            out.write(<span class="number">0x41</span>);</span><br><span class="line">            out.write(<span class="number">0x4D</span>);</span><br><span class="line">            out.write(<span class="number">0x52</span>);</span><br><span class="line">            out.write(<span class="number">0x0A</span>);   </span><br><span class="line">            <span class="keyword">while</span>((len = ais.read(buf)) &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                out.write(buf,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            out.close();</span><br><span class="line">            ais.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里有两个方法:</p>
<ol>
<li>pcm2Amr(String pcmPath , String amrPath): 将pcm文件转为amr文件</li>
<li>pcm2Amr(InputStream pcmStream, String amrPath): 将pcm数据流转为amr文件</li>
</ol>
<h2 id="测试">测试</h2><h3 id="测试的界面">测试的界面</h3><p>测试的界面很简单,就一个按钮一个文本显示,布局界面就不再给出,下面是MainActivity代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        </span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TextView hintView;</span><br><span class="line">    <span class="keyword">private</span> Button startButton;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		startButton = (Button) findViewById(R.id.btn_start);</span><br><span class="line">		startButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">		hintView = (TextView) findViewById(R.id.hint);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (v.getId() == R.id.btn_start) &#123;</span><br><span class="line">			transferButtonClicked();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transferButtonClicked</span><span class="params">()</span></span>&#123;</span><br><span class="line">		showWaitDialog();</span><br><span class="line">		startTransfer();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> ProgressDialog waitDialog;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showWaitDialog</span><span class="params">()</span></span>&#123;</span><br><span class="line">		waitDialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</span><br><span class="line">		waitDialog.setTitle(getResources().getString(R.string.transfer_wait_title));</span><br><span class="line">		waitDialog.setMessage(getResources().getString(R.string.transfer_wait_message));</span><br><span class="line">		waitDialog.show();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startTransfer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> TransferThread(<span class="keyword">this</span>, <span class="keyword">new</span> TransferCallback() &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				transferSuccess();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;).start();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transferSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				waitDialog.dismiss();</span><br><span class="line">				hintView.setText(getResources().getString(R.string.transfer_result));</span><br><span class="line">				ToastUtil.showShort(MainActivity.<span class="keyword">this</span>, R.string.success_hint);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="转换线程">转换线程</h3><p>由于文件转换是耗时操作,所以需要一个转换线程来实现文件转换.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> TransferCallback callback;</span><br><span class="line">	<span class="keyword">private</span> Context context;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TransferThread</span><span class="params">(Context context, TransferCallback callback)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.callback = callback;</span><br><span class="line">		<span class="keyword">this</span>.context = context;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		transfer();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">()</span></span>&#123;</span><br><span class="line">		String rootPath = Environment.getExternalStorageDirectory().getPath();</span><br><span class="line">        String amrPath = rootPath + <span class="string">"/test.amr"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream pcmStream = context.getAssets().open(<span class="string">"test.pcm"</span>);</span><br><span class="line">            AmrEncoder.pcm2Amr(pcmStream, amrPath);</span><br><span class="line">            callback.onSuccess();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        	callback.onFailed();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransferCallback</span></span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span></span>;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">onFailed</span><span class="params">()</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="测试结果">测试结果</h3><p>经过测试,160KB的test.pcm压缩后的amr文件大小为15KB,且可以正常播放.</p>
<p>本文的项目文件在此:<a href="https://github.com/Dev-Wiki/Pcm2Amr" target="_blank" rel="external">Pcm2Amr</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在做一个聊天的模块,聊天的模块很简单:</p>
<blockquote>
<p>录音-上传-接收-播放</p>
</blockquote>
<h2 id="录音">录音</h2><p>录音部分可以采用MediaRecord和AudioRecord两个类进行录音.但是各有优缺点.</p>
<p>MediaRecord已经封装了很多方法,方便使用.<br>AudioRecord能获取录音的原生数据,以便对录音二次加工.</p>
<p>在录音过程我采用的是AudioRecord.但是AudioRecord录音数据是PCM格式,数据占用存储空间很大.必须压缩后才能传输.项目中的压缩是项目其他成员写的一个so库进行压缩的,有点不太方便.在网上翻阅了下,其实Android系统内部已经携带有压缩的库文件了.</p>]]>
    
    </summary>
    
      <category term="Amr" scheme="http://www.devwiki.net/tags/Amr/"/>
    
      <category term="Android" scheme="http://www.devwiki.net/tags/Android/"/>
    
      <category term="Pcm" scheme="http://www.devwiki.net/tags/Pcm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android自定义组合控件---简单导航栏]]></title>
    <link href="http://www.devwiki.net/2015/06/18/Android-View-Custom-Navigation/"/>
    <id>http://www.devwiki.net/2015/06/18/Android-View-Custom-Navigation/</id>
    <published>2015-06-18T13:23:55.000Z</published>
    <updated>2015-06-24T04:48:38.106Z</updated>
    <content type="html"><![CDATA[<p>最近在做项目的过程中,发现项目中好多界面的导航栏都很类似或者一样,但是每次都要重复写同样的代码,觉得很不爽,所以就简单地自定义了一下导航栏控件.<br>先上图:<br><img src="http://img.blog.csdn.net/20150519123549066" alt="导航栏"></p>
<p>导航栏包括:</p>
<ul>
<li>返回按钮</li>
<li>标题</li>
<li>右侧按钮(功能不确定)</li>
</ul>
<a id="more"></a>
<p>首先是布局文件,如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">RelativeLayout</span> </span><br><span class="line">	<span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">	<span class="attribute">android:id</span>=<span class="value">"@+id/rl_chat_title"</span></span><br><span class="line">	<span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">	<span class="attribute">android:layout_height</span>=<span class="value">"50dp"</span></span><br><span class="line">	<span class="attribute">android:background</span>=<span class="value">"@drawable/land_navigation"</span></span><br><span class="line">	<span class="attribute">android:layout_alignParentTop</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ImageView</span> </span><br><span class="line">	    <span class="attribute">android:id</span>=<span class="value">"@+id/iv_nav_back"</span></span><br><span class="line">	    <span class="attribute">android:layout_width</span>=<span class="value">"50dp"</span></span><br><span class="line">	    <span class="attribute">android:layout_height</span>=<span class="value">"50dp"</span></span><br><span class="line">	    <span class="attribute">android:padding</span>=<span class="value">"13dp"</span></span><br><span class="line">	    <span class="attribute">android:layout_alignParentLeft</span>=<span class="value">"true"</span></span><br><span class="line">	    <span class="attribute">android:layout_centerVertical</span>=<span class="value">"true"</span></span><br><span class="line">	    <span class="attribute">android:src</span>=<span class="value">"@drawable/icon_back"</span>/&gt;</span></span><br><span class="line">		</span><br><span class="line">  	<span class="tag">&lt;<span class="title">TextView</span> </span><br><span class="line">    	<span class="attribute">android:id</span>=<span class="value">"@+id/tv_nav_title"</span></span><br><span class="line">     	<span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">	  	<span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">	  	<span class="attribute">android:gravity</span>=<span class="value">"center_vertical"</span></span><br><span class="line">	  	<span class="attribute">android:layout_centerHorizontal</span>=<span class="value">"true"</span></span><br><span class="line">	  	<span class="attribute">android:layout_centerVertical</span>=<span class="value">"true"</span></span><br><span class="line">	  	<span class="attribute">android:text</span>=<span class="value">"@string/app_name"</span>/&gt;</span></span><br><span class="line">      	</span><br><span class="line">  	<span class="tag">&lt;<span class="title">ImageView</span> </span><br><span class="line">	  	<span class="attribute">android:id</span>=<span class="value">"@+id/iv_nav_right"</span></span><br><span class="line">	  	<span class="attribute">android:layout_width</span>=<span class="value">"50dp"</span></span><br><span class="line">	  	<span class="attribute">android:layout_height</span>=<span class="value">"50dp"</span></span><br><span class="line">	  	<span class="attribute">android:padding</span>=<span class="value">"13dp"</span></span><br><span class="line">	  	<span class="attribute">android:layout_alignParentRight</span>=<span class="value">"true"</span></span><br><span class="line">	  	<span class="attribute">android:layout_centerVertical</span>=<span class="value">"true"</span></span><br><span class="line">	  	<span class="attribute">android:src</span>=<span class="value">"@drawable/icon_setting1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>布局包含两个ImageView和一个TextView.</p>
<p>然后自定义类NavigationView继承RelativeLayout并实现OnClickListener接口.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 导航栏组件,目前包括返回键,标题,右侧按钮.其中:</span><br><span class="line"> * &lt;/br&gt;返回键已经实现按键监听</span><br><span class="line"> * &lt;/br&gt;右侧按钮已实现按键监听</span><br><span class="line"> * &lt;/br&gt;标题默认不可点击</span><br><span class="line"> * <span class="doctag">@author</span> Asia</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NavigationView</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NavigationView</span><span class="params">(Context context)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ImageView backView;</span><br><span class="line">    <span class="keyword">private</span> TextView titleView;</span><br><span class="line">    <span class="keyword">private</span> ImageView rightView;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NavigationView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        View view = LayoutInflater.from(context).inflate(R.layout.navigation_view, <span class="keyword">this</span>, <span class="keyword">true</span>);</span><br><span class="line">        backView = (ImageView) view.findViewById(R.id.iv_nav_back);</span><br><span class="line">        backView.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        titleView = (TextView) view.findViewById(R.id.tv_nav_title);</span><br><span class="line">        rightView = (ImageView) view.findViewById(R.id.iv_nav_right);</span><br><span class="line">        rightView.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取返回按钮</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ImageView <span class="title">getBackView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> backView;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取标题控件</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TextView <span class="title">getTitleView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> titleView;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 设置标题</span><br><span class="line">     * <span class="doctag">@param</span> title</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        titleView.setText(title);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取右侧按钮,默认不显示</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ImageView <span class="title">getRightView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rightView;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ClickCallback callback;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 设置按钮点击回调接口</span><br><span class="line">     * <span class="doctag">@param</span> callback</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickCallback</span><span class="params">(ClickCallback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.callback = callback;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 导航栏点击回调接口</span><br><span class="line">     * &lt;/br&gt;如若需要标题可点击,可再添加</span><br><span class="line">     * <span class="doctag">@author</span> Asia</span><br><span class="line">     *</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClickCallback</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * 点击返回按钮回调</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onBackClick</span><span class="params">()</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onRightClick</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = v.getId();</span><br><span class="line">        <span class="keyword">if</span> (id == R.id.iv_nav_back) &#123;</span><br><span class="line">            callback.onBackClick();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (id == R.id.iv_nav_right) &#123;</span><br><span class="line">            callback.onRightClick();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>NavigationView中包含一个回调接口,在使用时设置一个此接口即可.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 导航栏点击回调接口</span><br><span class="line"> * &lt;/br&gt;如若需要标题可点击,可再添加</span><br><span class="line"> * <span class="doctag">@author</span> Asia</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClickCallback</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 点击返回按钮回调</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onBackClick</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onRightClick</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如何使用呢?下面实际使用的过程.</p>
<p><strong>主界面布局</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">    <span class="tag">&lt;<span class="title">com.asi.customview.view.NavigationView</span> </span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/nav_main"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"@string/hello_world"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>主界面Java代码</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NavigationView navigationView;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        navigationView = (NavigationView) <span class="keyword">super</span>.findViewById(R.id.nav_main);</span><br><span class="line">        navigationView.setTitle(<span class="string">"Title"</span>);</span><br><span class="line">        navigationView.setClickCallback(<span class="keyword">new</span> ClickCallback() &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRightClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                DLog.d(<span class="string">"点击了右侧按钮!"</span>);</span><br><span class="line">                ToastUtil.showShort(MainActivity.<span class="keyword">this</span>, <span class="string">"点击了右侧按钮!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                DLog.d(<span class="string">"点击了返回按钮!"</span>);</span><br><span class="line">                ToastUtil.showShort(MainActivity.<span class="keyword">this</span>, <span class="string">"点击了返回按钮!"</span>);</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注:</strong>主界面中的<strong>Dlog</strong>类为Android的Log打印输出类,参见此处:<a href="http://blog.csdn.net/asia273360657/article/details/45479089" target="_blank" rel="external">Android的Log包装</a></p>
<p>这样就完成了简单的自定义导航栏.完成的项目代码在<a href="https://github.com/sn10086" target="_blank" rel="external">我的GitHub</a>中的<br><a href="https://github.com/sn10086/CustomView" target="_blank" rel="external">自定义组件</a>.此项目后期会不定期更新.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在做项目的过程中,发现项目中好多界面的导航栏都很类似或者一样,但是每次都要重复写同样的代码,觉得很不爽,所以就简单地自定义了一下导航栏控件.<br>先上图:<br><img src="http://img.blog.csdn.net/20150519123549066" alt="导航栏"></p>
<p>导航栏包括:</p>
<ul>
<li>返回按钮</li>
<li>标题</li>
<li>右侧按钮(功能不确定)</li>
</ul>]]>
    
    </summary>
    
      <category term="Android" scheme="http://www.devwiki.net/tags/Android/"/>
    
      <category term="View" scheme="http://www.devwiki.net/tags/View/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java设计模式---设计原则]]></title>
    <link href="http://www.devwiki.net/2015/06/18/Java-Design-Pattern-Principle/"/>
    <id>http://www.devwiki.net/2015/06/18/Java-Design-Pattern-Principle/</id>
    <published>2015-06-18T13:16:42.000Z</published>
    <updated>2015-06-24T04:48:19.259Z</updated>
    <content type="html"><![CDATA[<p>最近看了Head First 设计模式一书,开篇的故事讲述了设计模式的原则:<strong>封装变化</strong>与<strong>面向接口编程</strong>.</p>
<h2 id="基本需求">基本需求</h2><p>故事从编写一个模拟鸭子的游戏开始,游戏要求:</p>
<blockquote>
<p>游戏里有许多鸭子,一边游泳戏水,一边呱呱叫…</p>
</blockquote>
<p>该游戏内部使用面向对象设计,有一个鸭子的超类Duck:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//游泳的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//呱呱叫的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//子类要实现的显示的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>因为所有的鸭子都会游泳和叫,所以在超类中实现了swim()和qucak()方法,而具体显示出什么样和具体的鸭子有关,所以display()方法为抽象方法.</p>
<p>现在有种鸭子是红头鸭RedHeadDuck和绿头鸭MallardDuck.<br>红头RedHeadDuck代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedHeadDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是红头鸭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>绿头鸭MallardDuck代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是绿头鸭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="需求变化">需求变化</h2><p>现在需求发生了变化,想要鸭子能飞行…那不是很简单嘛,给Duck类加个飞行的方法不就可以了,如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//游泳的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//呱呱叫的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//飞行的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//子类要实现的显示的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样一来,确实绿头鸭和红头鸭都会飞行了.</p>
<h2 id="出现问题">出现问题</h2><p>由于公司业务需要,增加橡皮鸭这一角色RubberDuck,如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RubberDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是橡皮鸭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>等等,上面的橡皮鸭貌似不对啊,橡皮鸭不会飞啊!而且橡皮鸭是吱吱叫不是呱呱叫.这该怎么办呢?</p>
<p>这还不简单,直接覆盖方法不就行了.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RubberDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qucak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//吱吱叫...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//什么也不做...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是橡皮鸭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样貌似是解决了,但是问题又来来,如果后来需要增加诱饵鸭DecoyDuck,诱饵鸭不会叫不会飞.怎么办?难道还要继续覆盖方法么?</p>
<h2 id="解决问题">解决问题</h2><p>既然无法确定以后的鸭子是什么类型,干脆抽取公共的部分,不同的写成接口.<br>比如会飞的实现Flyable接口,会叫的实现Qucakable接口.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//会飞的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//会叫的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Quackable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新的Duck类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//游泳的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> class <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//显示的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新的绿头鸭</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="title">extend</span> <span class="title">Duck</span> <span class="keyword">implements</span> <span class="title">Flyable</span>, <span class="title">Qucakable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我会飞...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我会呱呱叫...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我是绿头鸭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新的红头鸭类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedHeadDuck</span> <span class="title">extend</span> <span class="title">Duck</span> <span class="keyword">implements</span> <span class="title">Flyable</span>, <span class="title">Qucakable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我会飞...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我会呱呱叫...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我是红头鸭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//橡皮鸭</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RubberDuck</span> <span class="title">extend</span> <span class="title">Duck</span> <span class="keyword">implements</span> <span class="title">Quackable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我会吱吱叫...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我是橡皮鸭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//诱饵鸭</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoyDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我是诱饵鸭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样一来,问题就解决了.</p>
<h2 id="新问题">新问题</h2><p>上面的问题是解决了,好像代码有重复:<br><strong>绿头鸭和红头鸭的会飞的方法和会呱呱叫的方法是重复的</strong>.</p>
<p>如果以后有更多类型的方法,重复的代码会更多,而且会埋下一个隐患:</p>
<blockquote>
<p>如果以后飞行的动作有所改变,难道一个一个类的去修改?<br>如果需求还有变化,不是更难维护吗?</p>
</blockquote>
<h2 id="解决问题-1">解决问题</h2><p>有没有好的方法解决这个问题呢?答案是肯定的.我们需要将代码中的变化的部分与不变的部分拆分出来.这就是<strong>封装变化的原则</strong></p>
<h3 id="封装变化">封装变化</h3><blockquote>
<p>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</p>
</blockquote>
<p>下面就建立两组类,变化的和不会变化的.</p>
<p>上面的案例中什么是变化的呢?<br><strong>飞行</strong>和<strong>叫声</strong>是变化的.那么就将飞行和叫声与Duck类分开.</p>
<p>如何设计鸭子的飞行行为和叫声行为呢?<br>我们希望一切有弹性,因为你无法确定以后的飞行行为会有什么变化,也无法确定以后的绿头鸭会有什么行为.</p>
<p>这就涉及到第二个原则:<strong>面向接口编程</strong></p>
<h3 id="面向接口编程">面向接口编程</h3><blockquote>
<p>针对接口编程，而不是针对实现编程</p>
</blockquote>
<p>那么现在的需求有两个行为:飞和叫.<br>接口就为飞行行为接口和叫的行为接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//飞行行为接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehaviour</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//叫的行为接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehaviour</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在飞行有种不同的行为:飞和不会飞.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通的飞</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">implements</span> <span class="title">FlyBehaviour</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我会飞..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不会飞</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">implements</span> <span class="title">FlyBehaviour</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我不会飞...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在叫也有三种行为:呱呱叫和吱吱叫和不会叫<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//呱呱叫</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehaviour</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我会呱呱叫..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//吱吱叫</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Squack</span> <span class="keyword">implements</span> <span class="title">QuackBehaviour</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我会吱吱叫..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不会叫</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> <span class="keyword">implements</span> <span class="title">QuackBehaviour</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//我不会叫...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样写的好处就在于,使用飞行行为时只需指定会飞行,不需绑定具体飞行的动作,弹性空间较大.而且此处的面向接口编程,并不是狭义上指Java中的接口,而是指超类型,可以是接口也可以是抽象类.</p>
<p>那么如何将行为和Duck类组合到一起呢?</p>
<blockquote>
<p>将行为转为属性</p>
</blockquote>
<p>即将飞行和叫的行转为鸭子的一个变量<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="comment">//鸭子不处理飞的行为,将飞的行为委托给FlyBehaviour接口</span></span><br><span class="line">    FlyBehaviour flyBehaviour;</span><br><span class="line">    <span class="comment">//鸭子不处理叫的行为,将飞的行为委托给QucakBehaviour接口</span></span><br><span class="line">    QucakBehaviour quackBehaviour;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        flyBehaviour.fly();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        quackBehaviour.quack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我会游泳..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>再来看看绿头鸭,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MallardDuck</span><span class="params">()</span></span>&#123;</span><br><span class="line">        flyBehaviour = <span class="keyword">new</span> FlyWithWings();</span><br><span class="line">        quackBehaviour = <span class="keyword">new</span> Quack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> class <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是绿头鸭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在测试一下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Duck duck = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">        duck.display();</span><br><span class="line">        duck.performFly();</span><br><span class="line">        duck.performQuack();</span><br><span class="line">        duck.swim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行后结果如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我是绿头鸭...</span><br><span class="line">我会飞...</span><br><span class="line">我会呱呱叫...</span><br><span class="line">我会游泳...</span><br></pre></td></tr></table></figure></p>
<p>如何实现动态改变鸭子的行为呢?修改Duck类如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="comment">//鸭子不处理飞的行为,将飞的行为委托给FlyBehaviour接口</span></span><br><span class="line">    FlyBehaviour flyBehaviour;</span><br><span class="line">    <span class="comment">//鸭子不处理叫的行为,将飞的行为委托给QucakBehaviour接口</span></span><br><span class="line">    QucakBehaviour quackBehaviour;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlyBehaviour</span><span class="params">(FlyBehaviour flyBehaviour)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flyBehaviour = flyBehaviour;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQucakBehaviour</span><span class="params">(QucakBehaviour quackBehaviour)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.quackBehaviour = quackBehaviour;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        flyBehaviour.fly();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        quackBehaviour.quack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我会游泳..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在构建一个模型鸭ModelDuck<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ModelDuck</span><span class="params">()</span></span>&#123;</span><br><span class="line">        flyBehaviour = <span class="keyword">new</span> FlyNoWay();  <span class="comment">//一开始不会飞</span></span><br><span class="line">        quackBehaviour = <span class="keyword">new</span> Quack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是模型鸭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>新建一个新的飞行行为:FlyRocketPowered<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyRocketPowered</span> <span class="keyword">implements</span> <span class="title">FlyBehaviour</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我能像火箭一样飞..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在测试一下动态改变飞行行为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Duck duck = <span class="keyword">new</span> ModelDuck();</span><br><span class="line">        duck.display();</span><br><span class="line">        duck.performFly();</span><br><span class="line">        duck.setFlyBehaviour(<span class="keyword">new</span> FlyRocketPowered());</span><br><span class="line">        duck.performFly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试结果:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我是模型鸭...</span><br><span class="line"></span><br><span class="line">我会向火箭一样飞...</span><br></pre></td></tr></table></figure></p>
<p>这样就实现了行为与类分开,及变化的部分与不变化的部分分开了.</p>
<h3 id="小总结">小总结</h3><p><strong>变化的部分</strong><br>飞行的行为和叫的行为</p>
<p><strong>不变的部分</strong><br>鸭子会有用,拥有飞行和叫的行为.</p>
<h2 id="总结">总结</h2><p>封装变化和面向接口编程能让代码有很大的弹性,在代码不变或者很小的改变的情况下满足需求的变化,也易于维护.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近看了Head First 设计模式一书,开篇的故事讲述了设计模式的原则:<strong>封装变化</strong>与<strong>面向接口编程</strong>.</p>
<h2 id="基本需求">基本需求</h2><p>故事从编写一个模拟鸭子的游戏开始,游戏要求:</p>
<blockquote>
<p>游戏里有许多鸭子,一边游泳戏水,一边呱呱叫…</p>
</blockquote>
<p>该游戏内部使用面向对象设计,有一个鸭子的超类Duck:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//游泳的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//呱呱叫的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//子类要实现的显示的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="设计原则" scheme="http://www.devwiki.net/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
      <category term="设计模式" scheme="http://www.devwiki.net/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java设计模式" scheme="http://www.devwiki.net/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JDK源码学习之String]]></title>
    <link href="http://www.devwiki.net/2015/06/18/JDK-Source-String/"/>
    <id>http://www.devwiki.net/2015/06/18/JDK-Source-String/</id>
    <published>2015-06-18T12:55:49.000Z</published>
    <updated>2015-06-24T04:48:11.642Z</updated>
    <content type="html"><![CDATA[<p>String类是最常用的类之一了.</p>
<h2 id="定义">定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Serializable</span>,</span><br><span class="line">	<span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span></span></span><br></pre></td></tr></table></figure>
<h3 id="关键字">关键字</h3><h4 id="public">public</h4><p>被public修饰的类为全局可访问的类</p>
<h4 id="final">final</h4><p>被final修饰的类为终类,不可被继承不可被覆盖</p>
<a id="more"></a>
<h3 id="继承的父类">继承的父类</h3><h4 id="Object">Object</h4><p>直接继承于Object类,Object类为所有Java类的间接或直接父类</p>
<h3 id="实现的接口">实现的接口</h3><h4 id="Serializable">Serializable</h4><p>实现此接口,说明String类能被序列化</p>
<h4 id="Comparable">Comparable</h4><p>实现此接口,说明String类的对象可以被排序</p>
<h4 id="CharSequence">CharSequence</h4><p>实现此接口,说明String类是一种字符序列</p>
<h2 id="Field字段">Field字段</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6849794470754667710L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectStreamField[] serialPersistentFields =</span><br><span class="line">        <span class="keyword">new</span> ObjectStreamField[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<h3 id="value[]">value[]</h3><p>用于存放String类对象的值的字符数组,比如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure></p>
<p>那么value[]数组就等于:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value[] = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="hash">hash</h3><p>String类对象的哈希值</p>
<h3 id="serialVersionUID">serialVersionUID</h3><p>String类运行时序列化的版本号</p>
<h3 id="ObjectStreamField[]">ObjectStreamField[]</h3><p>用于String类序列化的描述</p>
<h2 id="构造方法">构造方法</h2><h3 id="String()">String()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建一个新的String对象,默认字符串长度为0.</p>
<h3 id="String(String_original)">String(String original)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = original.value;</span><br><span class="line">    <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用一个已有的String对象创建一个新的String对象.将参数对象的字符数组和哈希值赋值给新的对象.</p>
<h3 id="String(char_value[])">String(char value[])</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用一个字符数组创建一个String对象.内部不是直接赋值,而是使用了Arrays.copyOf()方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] copyOf(<span class="keyword">char</span>[] original, <span class="keyword">int</span> newLength) &#123;</span><br><span class="line">    <span class="keyword">char</span>[] copy = <span class="keyword">new</span> <span class="keyword">char</span>[newLength];</span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Arrays.copyOf内部新建了一个与参数长度相同的方法,并调用System.arrayscopy()方法复制.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,  <span class="keyword">int</span>  srcPos,</span><br><span class="line">                                    Object dest, <span class="keyword">int</span> destPos,</span><br><span class="line">                                    <span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>System.arrayscopy()方法是使用的操作系统底层实现复制的.</p>
<h3 id="String(char_value[],_int_offset,_int_count)">String(char value[], int offset, int count)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.(2147483647)</span></span><br><span class="line">    <span class="keyword">if</span> (offset &gt; value.length - count) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>截取字符数组一部分创建一个新的String对象.<br>如果起始偏移量或者截取的数量或者起始偏移量与截取数量之和大于字符数组的长度时会抛出StringIndexOutOfBoundsException异常.<br>而value[]是使用的Arrays.copyOfRange方法截取复制<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] copyOfRange(<span class="keyword">char</span>[] original, <span class="keyword">int</span> from, <span class="keyword">int</span> to) &#123;</span><br><span class="line">    <span class="keyword">int</span> newLength = to - from;</span><br><span class="line">    <span class="keyword">if</span> (newLength &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(from + <span class="string">" &gt; "</span> + to);</span><br><span class="line">    <span class="keyword">char</span>[] copy = <span class="keyword">new</span> <span class="keyword">char</span>[newLength];</span><br><span class="line">    System.arraycopy(original, from, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length - from, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在Arrays.copyOfRange中创建新的字符数组,并调用系统底层的数组复制方法System.arraycopy.</p>
<h3 id="String(int[]_codePoints,_int_offset,_int_count)">String(int[] codePoints, int offset, int count)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">int</span>[] codePoints, <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> (offset &gt; codePoints.length - count) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> end = offset + count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pass 1: Compute precise size of char[]</span></span><br><span class="line">    <span class="keyword">int</span> n = count;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = offset; i &lt; end; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = codePoints[i];</span><br><span class="line">        <span class="keyword">if</span> (Character.isBmpCodePoint(c))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Character.isValidCodePoint(c))</span><br><span class="line">            n++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(Integer.toString(c));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pass 2: Allocate and fill in char[]</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">char</span>[] v = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = offset, j = <span class="number">0</span>; i &lt; end; i++, j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = codePoints[i];</span><br><span class="line">        <span class="keyword">if</span> (Character.isBmpCodePoint(c))</span><br><span class="line">            v[j] = (<span class="keyword">char</span>)c;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Character.toSurrogates(c, v, j++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.value = v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>截取int型数组的一部分创建新的String对象,新的String对象为Unicode码组成,即将int数组的值转为Unicode码.<br>如果起始偏移量或者截取的数量或者起始偏移量与截取数量之和大于字符数组的长度时会抛出StringIndexOutOfBoundsException异常.<br>创建分为两步:<br>第一步:计算char[]数组的长度<br>1.先判断int值是否为BMP代码点,是则跳过.<br>2.判断指定的代码点是否为从 0x0000 到 0x10FFFF 范围之内的有效 Unicode 代码点值,是则加一</p>
<p>第二步:截取赋值字符</p>
<h3 id="String(byte_bytes[],_int_offset,_int_length,_String_charsetName)">String(byte bytes[], int offset, int length, String charsetName)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length, String charsetName)</span></span><br><span class="line">        <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (charsetName == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"charsetName"</span>);</span><br><span class="line">    checkBounds(bytes, offset, length);</span><br><span class="line">    <span class="keyword">this</span>.value = StringCoding.decode(charsetName, bytes, offset, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用指定的 charset 解码指定的 byte 子数组，构造一个新的 String。<br>如果未指定charsetName则报空指向异常<br>checkBounds()方法是检查offset和length是否超过数组边界,此方法是为了复用提取的内部私有方法.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkBounds</span><span class="params">(<span class="keyword">byte</span>[] bytes, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (length &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(length);</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</span><br><span class="line">    <span class="keyword">if</span> (offset &gt; bytes.length - length)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset + length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后使用StringCode进行解码,如果编码方式为null,则默认使用ISO-8859-1编码.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span>[] decode(String charsetName, <span class="keyword">byte</span>[] ba, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span><br><span class="line">        <span class="keyword">throws</span> UnsupportedEncodingException</span><br><span class="line">    &#123;</span><br><span class="line">        StringDecoder sd = deref(decoder);</span><br><span class="line">        String csn = (charsetName == <span class="keyword">null</span>) ? <span class="string">"ISO-8859-1"</span> : charsetName;</span><br><span class="line">        <span class="keyword">if</span> ((sd == <span class="keyword">null</span>) || !(csn.equals(sd.requestedCharsetName())</span><br><span class="line">                              || csn.equals(sd.charsetName()))) &#123;</span><br><span class="line">            sd = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Charset cs = lookupCharset(csn);</span><br><span class="line">                <span class="keyword">if</span> (cs != <span class="keyword">null</span>)</span><br><span class="line">                    sd = <span class="keyword">new</span> StringDecoder(cs, csn);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalCharsetNameException x) &#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> (sd == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedEncodingException(csn);</span><br><span class="line">            set(decoder, sd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sd.decode(ba, off, len);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>StringCoding类为java.lang包内部的字符编码和解码的工具类;StringDecoder和StringEncoder类是StringCoding类内部的解码和编码类.</p>
<h3 id="String(byte_bytes[],_String_charsetName)">String(byte bytes[], String charsetName)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], String charsetName)</span></span><br><span class="line">        <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length, charsetName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用byte数组和指定的编码方式创建一个String对象.</p>
<h3 id="String(byte_bytes[],_int_offset,_int_length)">String(byte bytes[], int offset, int length)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    checkBounds(bytes, offset, length);</span><br><span class="line">    <span class="keyword">this</span>.value = StringCoding.decode(bytes, offset, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>截取byte数组一部分创建一个String对象.<br>先检查数组边界,在调用了StringCoding编码.</p>
<h3 id="String(byte_bytes[])">String(byte bytes[])</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用byte数组创建一个String对象,内部调用的是String(byte bytes[], int offset, int length)方法.</p>
<h3 id="String(StringBuffer_buffer)">String(StringBuffer buffer)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(buffer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = Arrays.copyOf(buffer.getValue(), buffer.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用一个StringBuffer对象创建一个String对象,采用<strong>同步操作</strong>,多线程对buffer的操作不会影响String对象的值.内部使用Arrays.copyOf方法复制字符数组.</p>
<h3 id="String(StringBuilder_builder)">String(StringBuilder builder)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuilder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOf(builder.getValue(), builder.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用一个StringBuilder对象创建一个String对象.内部使用Arrays.copyOf复制字符数组.</p>
<h3 id="String(char[]_value,_boolean_share)">String(char[] value, boolean share)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span>[] value, <span class="keyword">boolean</span> share)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert share : "unshared not supported";</span></span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用一个char数组创建一个String对象,直接将char数组的引用传递给内部的value数组.</p>
<h2 id="类方法">类方法</h2><h3 id="copyValueOf(char_data[])">copyValueOf(char data[])</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">copyValueOf</span><span class="params">(<span class="keyword">char</span> data[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回指定数组中表示该字符序列的 String。即调用构造方法用数组生成一个String对象.比如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] data = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>&#125;;</span><br><span class="line">String str = String.coprValueOf(data);</span><br></pre></td></tr></table></figure></p>
<p>结果为:123</p>
<h3 id="copyValueOf(char_data[],_int_offset,_int_count)">copyValueOf(char data[], int offset, int count)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">copyValueOf</span><span class="params">(<span class="keyword">char</span> data[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(data, offset, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回指定数组中一份表示该字符序列的 String。即调用构造方法用数组生成一个String对象.比如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] data = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>&#125;;</span><br><span class="line">String str = String.coprValueOf(data, <span class="number">0</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></p>
<p>结果为:123</p>
<h3 id="format(String_format,_Object…_args)">format(String format, Object… args)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(String format, Object... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Formatter().format(format, args).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用指定的格式字符串和参数返回一个格式化字符串。内部调用Formatter类的format方法.<br>Formatter类是printf 风格的格式字符串的解释程序.使用了Formatter的无参构造方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Formatter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(Locale.getDefault(Locale.Category.FORMAT), <span class="keyword">new</span> StringBuilder());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>而此方法内部默认调用两个参数的构造方法.其中的Local对象为系统获取当前运行系统的默认区域并新建了一个StringBuilder对象,StringBuilder的父类实现了Appendable接口,说明StringBuilder是可以继续拼接修改的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Local local = Locale.getDefault(Locale.Category.FORMAT);</span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure></p>
<p>在调用Formatter类的format方法时默认使用默认的区域格式.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Formatter <span class="title">format</span><span class="params">(String format, Object ... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> format(l, format, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>内部又调用了format(Locale l, String format, Object … args)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Formatter <span class="title">format</span><span class="params">(Locale l, String format, Object ... args)</span> </span>&#123;</span><br><span class="line">    ensureOpen();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// index of last argument referenced</span></span><br><span class="line">    <span class="keyword">int</span> last = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// last ordinary index</span></span><br><span class="line">    <span class="keyword">int</span> lasto = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    FormatString[] fsa = parse(format);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fsa.length; i++) &#123;</span><br><span class="line">        FormatString fs = fsa[i];</span><br><span class="line">        <span class="keyword">int</span> index = fs.index();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">2</span>:  <span class="comment">// fixed string, "%n", or "%%"</span></span><br><span class="line">                fs.print(<span class="keyword">null</span>, l);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1</span>:  <span class="comment">// relative index</span></span><br><span class="line">                <span class="keyword">if</span> (last &lt; <span class="number">0</span> || (args != <span class="keyword">null</span> &amp;&amp; last &gt; args.length - <span class="number">1</span>))</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> MissingFormatArgumentException(fs.toString());</span><br><span class="line">                fs.print((args == <span class="keyword">null</span> ? <span class="keyword">null</span> : args[last]), l);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:  <span class="comment">// ordinary index</span></span><br><span class="line">                lasto++;</span><br><span class="line">                last = lasto;</span><br><span class="line">                <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; lasto &gt; args.length - <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> MissingFormatArgumentException(fs.toString());</span><br><span class="line">                fs.print((args == <span class="keyword">null</span> ? <span class="keyword">null</span> : args[lasto]), l);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:  <span class="comment">// explicit index</span></span><br><span class="line">                last = index - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; last &gt; args.length - <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> MissingFormatArgumentException(fs.toString());</span><br><span class="line">                fs.print((args == <span class="keyword">null</span> ? <span class="keyword">null</span> : args[last]), l);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">            lastException = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此方法返回的是一个Formatter对象,然后调用了toString方法,将a打印输出.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ensureOpen();</span><br><span class="line">    <span class="keyword">return</span> a.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="String_valueOf(Object_obj)">String valueOf(Object obj)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (obj == <span class="keyword">null</span>) ? <span class="string">"null"</span> : obj.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将一个对象转为String对象,调用该对象的toString方法.</p>
<h3 id="String_valueOf(char[]_data)">String valueOf(char[] data)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span>[] data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(data, <span class="number">0</span>, data.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用String的构造方法创建一个String对象.</p>
<h3 id="String_valueOf(char[]_data,_int_start,_int_length)">String valueOf(char[] data, int start, int length)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span>[] data, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(data, start, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用String的构造方法创建一个String对象.<br>此系列的方法还有:<br><strong>String valueOf(boolean b)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="string">"true"</span> : <span class="string">"false"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>String valueOf(char value)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> data[] = &#123;c&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(data, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一以下方法均是调用相应的包装类的toString方法.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span> c)</span></span><br><span class="line">String <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span></span><br><span class="line">String <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span> l)</span></span><br><span class="line">String <span class="title">valueOf</span><span class="params">(<span class="keyword">float</span> f)</span> </span><br><span class="line">String <span class="title">valueOf</span><span class="params">(<span class="keyword">double</span> d)</span></span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>String类是最常用的类之一了.</p>
<h2 id="定义">定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Serializable</span>,</span><br><span class="line">	<span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span></span></span><br></pre></td></tr></table></figure>
<h3 id="关键字">关键字</h3><h4 id="public">public</h4><p>被public修饰的类为全局可访问的类</p>
<h4 id="final">final</h4><p>被final修饰的类为终类,不可被继承不可被覆盖</p>]]>
    
    </summary>
    
      <category term="Java" scheme="http://www.devwiki.net/tags/Java/"/>
    
      <category term="String" scheme="http://www.devwiki.net/tags/String/"/>
    
      <category term="JDK源码学习" scheme="http://www.devwiki.net/categories/JDK%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[View的Click,LongClick,Touch事件的研究]]></title>
    <link href="http://www.devwiki.net/2015/06/18/Android-View-Click-Event/"/>
    <id>http://www.devwiki.net/2015/06/18/Android-View-Click-Event/</id>
    <published>2015-06-18T12:43:48.000Z</published>
    <updated>2015-06-24T04:48:43.511Z</updated>
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>我们都知道一个View有以下三个事件监听方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setOnClickListener();</span><br><span class="line">setOnLongClickListener();</span><br><span class="line">setOnTouchListener();</span><br></pre></td></tr></table></figure></p>
<p>每一个方法代表着用户不同的操作,分别为:短按,长按和触摸操作.</p>
<a id="more"></a>
<p><strong>短按事件</strong><br>通常一个View设置短按事件监听的代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">view.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>长按事件</strong><br>通常一个View设置长按事件监听的代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ttttButton.setOnLongClickListener(<span class="keyword">new</span> OnLongClickListener() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这里有一个返回值:</p>
<blockquote>
<p>true if the callback consumed the long click, false otherwise.</p>
</blockquote>
<p>意思是说:如果时间被消费了返回true,否则返回false.</p>
<p><strong>触摸事件</strong><br>通常一个View设置触摸事件监听的代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ttttButton.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> action = event.getAction();</span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="comment">//do something</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_MOVE) &#123;</span><br><span class="line">            <span class="comment">//do something</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_UP) &#123;</span><br><span class="line">            <span class="comment">//do something</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这里每一个动作都有一个返回值,返回值会影响触摸事件.一个View如果只设置了onTouchListener事件监听.<br>只有Down返回值为true时,Move和Up动作才能监听到.</p>
<p>如果给一个View同时设置以上三个方法,会出现怎样的结果呢?</p>
<hr>
<h2 id="测试">测试</h2><h3 id="1-测试界面">1.测试界面</h3><p>先附上测试界面的效果图,如下:<br><img src="http://img.blog.csdn.net/20150525081614634" alt="HomePage"><br>上图有8个按钮,全部都是设置了onClickListener,onLongClickListener,onTouchListener.正如图中所示,按钮上的字母代表不同的含义.点击不同的按钮进行测试.</p>
<h3 id="2-测试结果">2.测试结果</h3><p>最终的测试结果列表如下:</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>Click</th>
<th>LongClick</th>
<th>Down</th>
<th>Move</th>
<th>Up</th>
<th>短按</th>
<th>长按</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>无</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>down-move-up</td>
<td>down-move-up</td>
</tr>
<tr>
<td>2</td>
<td>无</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>down-move-up-longClick</td>
<td>down-move-longClick-move-up</td>
<td>按钮不抬起</td>
</tr>
<tr>
<td>3</td>
<td>无</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>down-move-up</td>
<td>down-move-up</td>
</tr>
<tr>
<td>4</td>
<td>无</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>down-move-up-click</td>
<td>down-move-longClick-move-up</td>
</tr>
<tr>
<td>5</td>
<td>无</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>down-move-up</td>
<td>down-move-up</td>
</tr>
<tr>
<td>6</td>
<td>无</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>down-move-up-longClick</td>
<td>down-move-longClick-move-up</td>
<td>按钮不抬起</td>
</tr>
<tr>
<td>7</td>
<td>无</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>down-move-up</td>
<td>down-move-up</td>
</tr>
<tr>
<td>8</td>
<td>无</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>down-move-up-click</td>
<td>down-move-longClick-move-up-click</td>
</tr>
</tbody>
</table>
<p>其中上表中的第2项结果如下图(上为短按,下为长按),按钮不会弹起:<br><img src="http://img.blog.csdn.net/20150525082058904" alt="短按"><br><img src="http://img.blog.csdn.net/20150525082121383" alt="长按"></p>
<p>第6项结果如下图(上为短按,下为长按),按钮不会弹起:<br><img src="http://img.blog.csdn.net/20150525082532123" alt="短按"><br><img src="http://img.blog.csdn.net/20150525082726605" alt="长按"></p>
<h3 id="3-结论">3.结论</h3><p>测试结果因返回值不同而不同.所以尽管onTouchListener中down返回true时move和up才起作用,但是如果设置了onlongclciklistener,即使down返回false也能触发move和up事件.<br><strong>一般地,View的onTouchListener优先级高于onClickListener和onLongClickListener.</strong><br>可以根据需要使用不同的事件监听进行组合.</p>
<h3 id="4-源码">4.源码</h3><p>源码在我的GitHub中:<a href="https://github.com/sn10086/ViewClickDemo" target="_blank" rel="external">DevWiki的GitHub:ViewClickDemo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="概述">概述</h2><p>我们都知道一个View有以下三个事件监听方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setOnClickListener();</span><br><span class="line">setOnLongClickListener();</span><br><span class="line">setOnTouchListener();</span><br></pre></td></tr></table></figure></p>
<p>每一个方法代表着用户不同的操作,分别为:短按,长按和触摸操作.</p>]]>
    
    </summary>
    
      <category term="Android" scheme="http://www.devwiki.net/tags/Android/"/>
    
      <category term="View" scheme="http://www.devwiki.net/tags/View/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[交付用户想要的软件---高效程序员的45个习惯读书笔记]]></title>
    <link href="http://www.devwiki.net/2015/06/18/Agile-Develop-Delivering-What-Users-Want/"/>
    <id>http://www.devwiki.net/2015/06/18/Agile-Develop-Delivering-What-Users-Want/</id>
    <published>2015-06-18T12:42:39.000Z</published>
    <updated>2015-06-24T04:48:56.451Z</updated>
    <content type="html"><![CDATA[<h2 id="让用户做决定">让用户做决定</h2><p>在设计方面,做决定的时候必须有开发者参与.</p>
<p>在一个项目中,开发者不应该做所有的决定,特别是业务方面的决定.</p>
<blockquote>
<p>决定什么不该决定.<br>让客户做决定.开发者,经理或者业务分析师不应该做业务方面的决定.</p>
</blockquote>
<p>业务应用需要开发者和业务负责人互相配合来开发.</p>
<a id="more"></a>
<p>平衡的艺术</p>
<blockquote>
<p>记录客户做出的决定.<br>不要用过于具体和没有价值的问题打扰繁忙的业务人员.<br>不要假设具体的问题不会影响业务人员的业务.<br>如果业务负责人回答”我不知道”,这也是一个称心如意的答案.</p>
</blockquote>
<h2 id="让设计指导而不是操纵开发">让设计指导而不是操纵开发</h2><blockquote>
<p>设计是软件开发过程不可缺少的步骤.</p>
</blockquote>
<p>开发之前画关键工作图是必不可少的,在做设计时你需要花时间去考虑各种不同选择的缺陷和溢出,以及如何权衡.然后下一步才考虑开始编码.</p>
<p>严格的需求-设计-代码-测试开发流程源于理想化的<strong>瀑布式</strong>开发方法,它导致在前面进行了过度的设计.</p>
<p>设计可以分为两层:<strong>战略</strong>和<strong>战术</strong>.</p>
<ol>
<li>前期的设计属于战略,通常只有在么有深入理解需求的时候需要这样设计.</li>
<li>战术设计重点是集中在单个的方法或数据类型上.这时更合适讨论如何设计类的职责.</li>
</ol>
<blockquote>
<p>CRC(类-职责-协作)卡片的设计方法就是用来做这个事情的.</p>
<ul>
<li>类名</li>
<li>职责:它应该做什么?</li>
<li>协作者:要完成工作它需要与其他的什么对象一起工作?</li>
</ul>
</blockquote>
<p>什么是好的设计?</p>
<blockquote>
<p>如果需求有了小变化,它仍能容易去实现,那么它就是好的设计.</p>
</blockquote>
<p>好的设计应该是正确的而不是精确的.</p>
<p>平衡的艺术</p>
<ul>
<li>不要在前期做大量的设计,并不是说不要设计.</li>
<li>计时初始的设计到后期不在管用,你仍需设计.</li>
<li>白板,草图,便利贴都是非常好的设计工具.</li>
</ul>
<h2 id="合理地使用技术">合理地使用技术</h2><blockquote>
<p>根据需要选择技术.</p>
</blockquote>
<p>在考虑使用新技术之前,先要把你需要解决的问题找出来.找到了需要解决的问题,接下来就要考虑:</p>
<ol>
<li>这个技术框架真能解决这个问题吗?</li>
<li>你将会被他拴住吗?</li>
<li>维护成本是多少?</li>
</ol>
<blockquote>
<p><strong>不要开发你能容易下载到的东西</strong></p>
</blockquote>
<p><strong>写的代码越少,需要维护的东西就越少!</strong></p>
<blockquote>
<p>新技术就应该像是新工具,可以帮助你更好地工作,它自己不应该成为你的工作.</p>
</blockquote>
<p>平衡的艺术</p>
<ol>
<li>也许在项目中真正评估技术方案还为时太早.</li>
<li>每一门技术都会有有点和缺点.</li>
</ol>
<h2 id="保持可以发布">保持可以发布</h2><blockquote>
<p>已经提交的代码应该随时可以行动.</p>
</blockquote>
<p>任何时候只要你没有准备好,就是敌人进攻你最佳的时机.</p>
<p>在团队工作中,修改一些东西的时候必须很谨慎.</p>
<p>如何防止你提交的代码破坏系统的代码?</p>
<ol>
<li>在本地测试运行.</li>
<li>检出最新的代码</li>
<li>提交代码</li>
</ol>
<p><strong>保持你的项目时刻可以发布.</strong>保证你的系统随时可以编译,运行,测试并立即部署.</p>
<p>平衡的艺术</p>
<ol>
<li>有时候,做一些大的改动后,你无法花费太多的时间和精力去保证系统一直可以发布.但是这只是例外,不能养成习惯.</li>
<li>如果你不得不让系统长期不可发布,那就做一个分支版本,你可以继续进行自己的试验.如果不行,还可以撤销,从头再来.</li>
<li>千万不能让系统既不可以发布,有不可以插销.</li>
</ol>
<h2 id="提早集成,频繁集成">提早集成,频繁集成</h2><p>在产品的开发过程中,集成是一个主要的<strong>风险区域</strong>.</p>
<p><strong>独立开发</strong>和<strong>早期集成</strong>之间是具有张力的.</p>
<blockquote>
<p>当你独立开发时,会发现开发速度更快,生产效率更高,你可以有效地解决出现的问题.<br>但并不意味着你避免或者延迟集成.一般需要每天集成几次,最好不要2~3天集成一次.</p>
</blockquote>
<p><strong>绝不要做大爆发式的集成.</strong></p>
<p>平衡的艺术</p>
<ol>
<li>成功的集成就意味着所有的单元测试不停地通过.</li>
<li>每天要和团队其他成员一起集成好几次.</li>
<li>如果你集成的不频繁,也许救会发现整天在解决代码集成带来的问题,而不是专心写代码.</li>
<li>独立开发很好,但是不能独立开发太久,一旦你有了经验就要快速地开始集成.</li>
</ol>
<h2 id="提早实现自动化部署">提早实现自动化部署</h2><blockquote>
<p>如果现在你还是在手工帮助质量保证人员安装应用,花些时间,考虑如何将安装过程自动化.</p>
</blockquote>
<p>质量保证人员应该<strong>测试部署过程</strong></p>
<blockquote>
<p>在项目一开始就应该实现<strong>自动化部署</strong>.</p>
</blockquote>
<p>平衡的艺术</p>
<ol>
<li>一般产品在安装的时候,都需要有相应的软硬件环境.这些环境的不同可能会导致很多问题,所以检查依赖关系,也是安装过程的一部分.</li>
<li>在没有征得用户的统一之前,安装程序绝不能删除用户的数据.</li>
<li>部署一个紧急修复的bug应该很简单,特别是在生产服务器的环境中.</li>
<li>用户应该可以安全且完整地卸载安装程序.</li>
<li>如果维护安装脚本变得很困难,那可能是一个早起警告.</li>
</ol>
<h2 id="使用演示获得频繁的反馈">使用演示获得频繁的反馈</h2><blockquote>
<p>需求就像流动的油墨.</p>
</blockquote>
<p>你无法冻结需求,正如你无法冻结市场,竞争,知识,进化或者成长一样.</p>
<p>没有人的思想和观点可以及时冻结,特别是项目的客户.</p>
<blockquote>
<p>不管是什么事情,我们都能做好,不过是以缓慢而逐步的方式.</p>
</blockquote>
<p>软件开发的成功就在于最后你离客户的期望有多远.</p>
<p>应该定期的每隔一段时间,与客户进行演示反馈.</p>
<p>如果你能频繁地和用户协商,根据他们的反馈,每个人都可以从中收益.</p>
<blockquote>
<p>不一致的术语是导致需求误解的一个主要原因.所以需要维护一个项目术语表.</p>
</blockquote>
<p>项目开发应该是清晰可见的开发.</p>
<p>平衡的艺术</p>
<p><strong>演示是用来让客户提出反馈,有助于驾驭项目的方向.</strong></p>
<h2 id="使用段迭代,增量发布">使用段迭代,增量发布</h2><blockquote>
<p><strong>统一过程和敏捷开发都使用迭代和增量开发.</strong></p>
</blockquote>
<p>迭代开发是<em>你在小且重复的周期里完成各种开发任务.</em></p>
<blockquote>
<p>对付大项目,最理想的办法就是小步前进,这也是敏捷开发的核心.</p>
</blockquote>
<p>大部分用户都是希望现在就有一个够用的软件,而不是在一年之后得到一个超级软件.</p>
<blockquote>
<p>询问用户哪些是产品的可用且不可少的核心功能.<br>不要为所有可能需要华丽功能而分心,不要沉迷于你的想象,而去做那些华而不实的界面.<br>尽快发布你的应用,迟了也许它就没有作用了.<br>使用段迭代和增量开发,可以让开发者更加专注于自己的工作.</p>
</blockquote>
<p><strong>段迭代让人感觉非常专注且具效率</strong></p>
<p>平衡的艺术</p>
<ol>
<li>如果每个迭代的时间都不够用,要么任务太大,要么因为迭代时间太短,把握好自己的开发节奏.</li>
<li>如果发布的功能背离了用户的需求,多半是因为迭代的周期太长了.</li>
<li>增量的发布必须是可用的,并且能为用户提供价值.</li>
</ol>
<h2 id="固定的价格就意味着背叛承诺">固定的价格就意味着背叛承诺</h2><blockquote>
<p>软件项目天生就是变化无常的,不可能重复.</p>
</blockquote>
<p> 开发项目时如何与客户交流?</p>
<ol>
<li>主动提议先构建系统最小,小的和有用的部分.</li>
<li>第一个迭代结束时客户有两个选择:可以选择一系列新的功能,继承进入下一个迭代.或者可以取消合同.</li>
<li>如果他们选择继续前进,那么这时候,应该就能很好地预测下一个迭代工作.</li>
</ol>
<blockquote>
<p>基于真实工作的评估.</p>
</blockquote>
<p>平衡的艺术</p>
<ol>
<li>如果你对答案不满意,那么看看你是否可以改变问题.</li>
<li>如果你在完成第一个迭代开发之前,拒绝做任何评估,也许你会失去这个合同.</li>
<li>敏捷不是意味着开始编码,我们最终会知道合适可以完成.你需要根据当前的知识和猜想,做一个大致的评估.</li>
<li>如果你别无选择,你不得不提供一个固定的价格,那么你需要学到真正好的评估.</li>
<li>也许你会考虑在合同中确定每一个迭代的固定的价格,但迭代的数量是可以商量的,它可以根据当前的工作状况进行调整.</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="让用户做决定">让用户做决定</h2><p>在设计方面,做决定的时候必须有开发者参与.</p>
<p>在一个项目中,开发者不应该做所有的决定,特别是业务方面的决定.</p>
<blockquote>
<p>决定什么不该决定.<br>让客户做决定.开发者,经理或者业务分析师不应该做业务方面的决定.</p>
</blockquote>
<p>业务应用需要开发者和业务负责人互相配合来开发.</p>]]>
    
    </summary>
    
      <category term="敏捷开发" scheme="http://www.devwiki.net/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
      <category term="高效程序员" scheme="http://www.devwiki.net/tags/%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="高效程序员的45个习惯" scheme="http://www.devwiki.net/categories/%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8445%E4%B8%AA%E4%B9%A0%E6%83%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学无止境---高效程序员的45个习惯读书笔记]]></title>
    <link href="http://www.devwiki.net/2015/06/18/Aglie-Develop-Feeding-Agility/"/>
    <id>http://www.devwiki.net/2015/06/18/Aglie-Develop-Feeding-Agility/</id>
    <published>2015-06-18T12:40:05.000Z</published>
    <updated>2015-06-24T04:48:53.736Z</updated>
    <content type="html"><![CDATA[<h2 id="跟踪变化">跟踪变化</h2><blockquote>
<p>你不需要精通所有技术,但需要清除知道行业的动向,从而规划你的项目和职业生涯.</p>
</blockquote>
<p>如何才能跟上技术变化的步伐?</p>
<blockquote>
<ol>
<li>迭代和增量式的学习</li>
<li>了解最新行情</li>
<li>参加本地的用户组活动</li>
<li>参加研讨会议</li>
<li>如饥似渴地阅读</li>
</ol>
</blockquote>
<a id="more"></a>
<p>平衡的艺术</p>
<blockquote>
<ol>
<li>许多新想法从未变的羽翼丰满,成为有用的技术.</li>
<li>你不可能精通每一样技术,没有必要去尝试.</li>
<li>你要明白为什么需要一项新技术—-它试图解决什么样的问题?</li>
<li>避免在一时冲动的情况下,只是因为想学习而将应用切换到新的技术,框架或开发语言.</li>
</ol>
</blockquote>
<h2 id="对团队投资">对团队投资</h2><ol>
<li><p>在一个团队中,如果只是你个人技术很好远远不够.</p>
</li>
<li><p>一个学习型的团队才是较好的团队.</p>
</li>
<li><p>所学的知识不用,往往会忘记.</p>
</li>
<li><p>你需要和团队的其他成员分享所学的知识,把这些知识引入团队中.</p>
</li>
</ol>
<blockquote>
<p>“午餐会议”是团队中分享知识的非常好的方式.</p>
</blockquote>
<p>平衡的艺术</p>
<blockquote>
<ol>
<li>读书小组逐章一起阅读一本书,会非常有用,但是要选好书.</li>
<li>不是所有的讲座都能引人入胜,有些甚是显得不合时宜.</li>
<li>尽量让讲座走入团队中.</li>
<li>坚持有计划有规律地举行讲座.</li>
<li>不要局限纯技术的图书和主题,相关的非技术主题也会对团队有帮助!</li>
<li>午餐会议不是设计会议.</li>
</ol>
</blockquote>
<h2 id="懂得丢弃">懂得丢弃</h2><blockquote>
<p>根深蒂固的习惯不可轻易地就丢弃掉!Expensive  mental models aren’t discarded lightly.</p>
</blockquote>
<ol>
<li><p>敏捷的根本之一就是拥抱变化.</p>
</li>
<li><p>开发者的时间才是紧缺和昂贵的资源.</p>
</li>
<li><p>在学习一门新技术的时候,多问问自己,是否把太多的旧的态度和方法用在了新的技术上.</p>
</li>
</ol>
<blockquote>
<p>打破旧习惯很难,更难的是自己还没意识到这个问题.</p>
</blockquote>
<p>应该力求尽可能地完全转入新的开发环境.</p>
<p>平衡的艺术</p>
<blockquote>
<p>要果断丢弃旧的习惯,一味地遵循过时的旧习惯会危害你的职业生涯.<br>不是完全忘记旧习惯,而是只在使用适当的技术时才使用它.<br>对于所使用的语言,要总结熟悉的语言特性,并且比较这些特性在新语言或新版本中的变化.</p>
</blockquote>
<h2 id="打破沙锅问到底">打破沙锅问到底</h2><blockquote>
<p>不能只满足于别人告诉你的表面现象,要不停地提问直到你明白问题的根源.</p>
</blockquote>
<ol>
<li>为了解决问题,你需要很好地了解系统的全局.</li>
<li>问”为什么”,但是要问到点子上.</li>
<li>当你问为什么的时候,也许你会被反问为什么你问这个问题,在提问之前,想好你问的理由,这会有助于你问出巧当的问题.</li>
<li>“这个,我不知道.”是一个好的起点,应该由此进行更进一步的调查,而不是在此戛然而止.</li>
</ol>
<h2 id="把握开发的节奏">把握开发的节奏</h2><blockquote>
<p>项目开打需要有一致和稳定的节奏.</p>
</blockquote>
<p>敏捷项目会有一个节奏和循环,让开发更加轻松.</p>
<p>设定一个短时的期限,为任务设定不能延长的最终期限.</p>
<blockquote>
<p>解决问题,在事情变得一团糟之前.</p>
</blockquote>
<p>平衡的艺术</p>
<blockquote>
<p>在每天结束的时候,测试代码,提交代码,没有残留任何代码.<br>不要搞的经常加班.<br>以固定,有规律的长度运行迭代.<br>如果开发节奏过于密集,你会精疲力尽的.<br>有规律的开发节奏会暴露很多问题,让你有更多的鼓起勇气的接口.<br>就像减肥一样,一点点的成功也是一个很大的激励.</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="跟踪变化">跟踪变化</h2><blockquote>
<p>你不需要精通所有技术,但需要清除知道行业的动向,从而规划你的项目和职业生涯.</p>
</blockquote>
<p>如何才能跟上技术变化的步伐?</p>
<blockquote>
<ol>
<li>迭代和增量式的学习</li>
<li>了解最新行情</li>
<li>参加本地的用户组活动</li>
<li>参加研讨会议</li>
<li>如饥似渴地阅读</li>
</ol>
</blockquote>]]>
    
    </summary>
    
      <category term="敏捷开发" scheme="http://www.devwiki.net/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
      <category term="高效程序员" scheme="http://www.devwiki.net/tags/%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="高效程序员的45个习惯" scheme="http://www.devwiki.net/categories/%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8445%E4%B8%AA%E4%B9%A0%E6%83%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[态度决定一切---高效程序员的45个习惯读书笔记]]></title>
    <link href="http://www.devwiki.net/2015/06/18/Agile-Develop-Beginning-Agility/"/>
    <id>http://www.devwiki.net/2015/06/18/Agile-Develop-Beginning-Agility/</id>
    <published>2015-06-18T12:30:43.000Z</published>
    <updated>2015-06-24T04:48:59.099Z</updated>
    <content type="html"><![CDATA[<h2 id="做事">做事</h2><blockquote>
<p>指责不能修复bug—-Blame dosn’t fix bugs.</p>
</blockquote>
<ol>
<li>把精力放在解决问题上,而不是抱怨和指责.</li>
<li>过程符合标准并不意味着结果是正确的.</li>
<li>在团队中,勇于承认自己不知道答案,这会让人放心.</li>
<li>“这不是我的错”,这句话不对.”这都是你的错”,这句话更不对!</li>
<li>如果你没犯过任何错误,说明你可能没有努力去工作.</li>
<li>如果团队中的一个成员的行为一再伤害了团队,则他表现的很不职业.</li>
</ol>
<a id="more"></a>
<h2 id="欲速则不达">欲速则不达</h2><blockquote>
<p>防微杜渐—-Be ware of land mines.</p>
</blockquote>
<ol>
<li>不要坠入快速的简单修复之中.要投入时间和经精力保持代码的整洁,敞亮.<br>一次又一次的快速修复,每一次都不探究问题的根源,久而久之就形成了一个危险的沼泽池,最终会吞噬整个项目的生命.</li>
<li>你需要了解团队的开发方法或开发过程.</li>
<li>如果团队成员花些时间阅读其他成员的代码,他们就能保证代码是可阅读和可理解的.</li>
<li>代码复审是发现bug的最有效的方法之一.</li>
<li>单元测试是防止代码难懂的重要技术.</li>
<li>你必须要理解一块代码的是如何工作的,但不是一定需要成为专家.</li>
<li>不要急于修复一段没能真正理解的代码.</li>
<li>所有的大型系统都非常复杂,没有一个人可以完全明白所有的代码.</li>
</ol>
<h2 id="对事不对人">对事不对人</h2><blockquote>
<p>消极扼杀创新—-Negativity kills innovation.</p>
</blockquote>
<ol>
<li>整个团队应该关注真正有价值的问题,而不是勾心斗角,误入歧途.</li>
<li>你必须把重点放在解决问题上,而不是极力证明谁的注意更好.</li>
<li>你不需要出色才能起步,但是你必须起步才能出色.</li>
<li>如果你是一个有远见的人,就一定要特别尊重别人的意见.</li>
<li>你是一个掌舵者,一定要把握方向,深思熟虑,吸取各方意见.</li>
<li>关于决策:设定最终期限,逆向思维,设立仲裁人,支持已经做出的决定</li>
<li>尽力贡献自己的好想法,如果你的想法没有采纳也无需生气.</li>
<li>脱离实际的反方观点会使争论变味.不带个人情绪并不是盲目接受所有的观点.</li>
</ol>
<h2 id="排除万难,奋勇向前">排除万难,奋勇向前</h2><ol>
<li>动手证明是最有效的方式,把糟糕的代码放到一边,立刻重写.</li>
<li>当发现问题时,不要视图掩盖这些问题.</li>
<li>如果设计或代码中出现了奇怪的问题,花时间去理解为什么代码会是这样.</li>
<li>如果你找到解决的办法,但代码仍旧令人费解,唯一的解决办法是重构代码,让他可读性更强.</li>
<li>如果你没有马上理解那段代码,不要轻易地否定和重写他们.</li>
<li>如果你说天快要塌下来了,但是团队成员都不赞同.反思一下,也许是你是正确的但你没有说清楚自己的理由.</li>
<li>如果你说天快要塌下来了,但是团队成员都不赞同.认真考虑下,他们也许是对的.</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="做事">做事</h2><blockquote>
<p>指责不能修复bug—-Blame dosn’t fix bugs.</p>
</blockquote>
<ol>
<li>把精力放在解决问题上,而不是抱怨和指责.</li>
<li>过程符合标准并不意味着结果是正确的.</li>
<li>在团队中,勇于承认自己不知道答案,这会让人放心.</li>
<li>“这不是我的错”,这句话不对.”这都是你的错”,这句话更不对!</li>
<li>如果你没犯过任何错误,说明你可能没有努力去工作.</li>
<li>如果团队中的一个成员的行为一再伤害了团队,则他表现的很不职业.</li>
</ol>]]>
    
    </summary>
    
      <category term="敏捷开发" scheme="http://www.devwiki.net/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
      <category term="高效程序员" scheme="http://www.devwiki.net/tags/%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="高效程序员的45个习惯" scheme="http://www.devwiki.net/categories/%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8445%E4%B8%AA%E4%B9%A0%E6%83%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AndroidStudio中aar文件引用]]></title>
    <link href="http://www.devwiki.net/2015/06/18/AndroidStudio-export-aar/"/>
    <id>http://www.devwiki.net/2015/06/18/AndroidStudio-export-aar/</id>
    <published>2015-06-18T11:31:08.000Z</published>
    <updated>2015-06-24T04:48:47.363Z</updated>
    <content type="html"><![CDATA[<p>最近在看一个项目,里面将一个库项目打包成了aar文件.在项目中引用时如下:</p>
<p>项目目录如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Demo&#10;    |-app&#10;    |-IMDemo&#10;    |-imkit</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>其中imkit为打包aar格式的项目,其在项目中的结构如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imkit&#10;    |-build.gradle&#10;    |-imkit.iml&#10;    |-imkit-1.0.0.aar</span><br></pre></td></tr></table></figure></p>
<p>其中build.gradle文件如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configurations.create(&#34;default&#34;)&#10;artifacts.add(&#34;default&#34;, file(&#39;imkit-1.0.0.aar&#39;))</span><br></pre></td></tr></table></figure></p>
<p>app和IMDemo中的build.gradle中包含有以下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;&#10;    compile project(&#39;:imkit&#39;)&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>在整个项目的setting.gradle文件中为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include &#39;:app&#39;, &#39;:imkit&#39;, &#34;:IMDemo&#34;</span><br></pre></td></tr></table></figure></p>
<p>这样整个项目可以正常运行.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在看一个项目,里面将一个库项目打包成了aar文件.在项目中引用时如下:</p>
<p>项目目录如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Demo&#10;    |-app&#10;    |-IMDemo&#10;    |-imkit</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="AndroidStudio" scheme="http://www.devwiki.net/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java设计模式---观察者模式]]></title>
    <link href="http://www.devwiki.net/2015/06/18/Java-Design-Pattern-Observer/"/>
    <id>http://www.devwiki.net/2015/06/18/Java-Design-Pattern-Observer/</id>
    <published>2015-06-18T11:27:08.000Z</published>
    <updated>2015-06-24T04:48:23.433Z</updated>
    <content type="html"><![CDATA[<h2 id="故事概要">故事概要</h2><h3 id="概要">概要</h3><p>故事要从一个业务需求开始:</p>
<blockquote>
<p>天气监测站目前可以监测到气温,气压,湿度三种指标,有一个WeatherData类,当前面的三个数据发生变化时,就会调用WeatherData类的setWeatherData()方法,改变天气数据.</p>
</blockquote>
<p>现在要求:需要有两个显示装置显示现在的状态和平均状态.当监测的数据有变化时,就更新显示.而且需要提供给第三方的人员可调用这些数据以设置想要的显示装置.如下图:</p>
<a id="more"></a>
<p><img src="https://raw.githubusercontent.com/sn10086/DesignPattern/master/Observer/Observer01.png" alt="业务需求图"></p>
<p>下面是给出的WeatherData类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeatherData</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temp = temp;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        dataChanged();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataChanged</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//数据发生变化则调用此方法,可在此处填写你的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> humidity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pressure;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="提取已知条件">提取已知条件</h3><p>目前已知的条件:</p>
<ol>
<li>WeatherData具有三个getter方法,可获取到温度,气压和湿度三个数值.</li>
<li>当监测到新的数据时就会调用dataChanged()方法.</li>
<li>需要实现两个显示器,一个显示当前状况(CurrentConditionsDisplay),一个显示平均状态(AvgStateDisplay).</li>
<li>系统要能扩展,第三方可以组合实现显示器.</li>
</ol>
<h3 id="简单实现">简单实现</h3><p>根据以上前提,可以用以下方法实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataChanged</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//数据发生变化则调用此方法,可在此处填写你的代码</span></span><br><span class="line">    currentConditionsDisplay.update(temp, humidity, pressure);</span><br><span class="line">    avgStateDisplay.update(temp, humidity, pressure);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中,CurrentConditionsDisplay和AvgStateDisplay如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示当前状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temp = temp;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//显示当前状态</span></span><br><span class="line">        String displayData = <span class="string">"CurrentConditions[temp="</span> + temp + <span class="string">", humidity="</span> + humidity + </span><br><span class="line">            <span class="string">", pressure="</span>+ pressure + <span class="string">"]"</span>;</span><br><span class="line">        System.out.println(displayData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示平均状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AvgStateDisplay</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getShowInfo());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getShowInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder displayData = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (tempList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            displayData.append(<span class="string">"暂时没有数据..."</span>);</span><br><span class="line">            <span class="keyword">return</span> displayData.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">float</span> tempAve = calculatorAve(tempList);</span><br><span class="line">        displayData.append(<span class="string">"平均气温:"</span> + tempAve);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">float</span> humidityAve = calculatorAve(humidityList);</span><br><span class="line">        displayData.append(<span class="string">",平均湿度:"</span> + humidityAve);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">float</span> pressureAve = calculatorAve(pressureList);</span><br><span class="line">        displayData.append(<span class="string">",平均压强:"</span> + pressureAve);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> displayData.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">calculatorAve</span><span class="params">(List&lt;Float&gt; dataList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">float</span> sum = <span class="number">0F</span>;</span><br><span class="line">        <span class="keyword">for</span> (Float float1 : dataList) &#123;</span><br><span class="line">            sum = sum + float1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">float</span> ave = sum/dataList.size();</span><br><span class="line">        <span class="keyword">return</span> ave;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;Float&gt; tempList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temp;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Float&gt; humidityList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Float&gt; pressureList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temp = temp;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">if</span> (tempList == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tempList = <span class="keyword">new</span> ArrayList&lt;Float&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        tempList.add(temp);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (humidityList == <span class="keyword">null</span>) &#123;</span><br><span class="line">            humidityList = <span class="keyword">new</span> ArrayList&lt;Float&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        humidityList.add(humidity);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (pressureList == <span class="keyword">null</span>) &#123;</span><br><span class="line">            pressureList = <span class="keyword">new</span> ArrayList&lt;Float&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        pressureList.add(pressure);</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这不就实现了刚才的功能:</p>
<ol>
<li>能显示当前状态</li>
<li>能显示平均状态</li>
<li>第三方可以通过WeatherData的dataChanged()方法获取数据,自己任意显示.</li>
</ol>
<h2 id="有没有问题?">有没有问题?</h2><p>上一篇文章学习了Java设计的原则:</p>
<blockquote>
<p>封装变化和面向接口编程</p>
</blockquote>
<p>上述的实现中:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataChanged</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//数据发生变化则调用此方法,可在此处填写你的代码</span></span><br><span class="line">    currentConditionsDisplay.update(temp, humidity, pressure);</span><br><span class="line">    avgStateDisplay.update(temp, humidity, pressure);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个里面的3,4两句是变化的,这部分没有封装.而且应该面向接口编程而不是面向具体的类编程,如果增加第三方的显示器,只能修改此处添加代码</p>
<h2 id="认识观察者模式">认识观察者模式</h2><h3 id="从订阅报纸开始">从订阅报纸开始</h3><p>报纸的订阅过程一般如下:</p>
<ul>
<li>报社的业务就是出版报纸。</li>
<li>向某家报社订阅报纸，只要他们有新报纸出版，就会给你送来。只要你是他们的订户，你就会一直收到新报纸。</li>
<li>当你不想再看报纸的时候，取消订阅，他们就不会再送新报纸来。</li>
<li>只要报社还在运营，就会一直有人（或单位）向他们订阅报纸或取消订阅报纸。</li>
</ul>
<p>观察者模式就和上面的订报纸差不多:</p>
<blockquote>
<p>出版者改称为“主题”（Subject），订阅者改称为“观察者”（Observer）</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sn10086/DesignPattern/master/Observer/Observer02.png" alt="观察者模式"></p>
<p><img src="https://raw.githubusercontent.com/sn10086/DesignPattern/master/Observer/Observer03.png" alt="观察者模式"></p>
<p><img src="https://raw.githubusercontent.com/sn10086/DesignPattern/master/Observer/Observer04.png" alt="观察者模式"></p>
<p><img src="https://raw.githubusercontent.com/sn10086/DesignPattern/master/Observer/Observer05.png" alt="观察者模式"></p>
<p><img src="https://raw.githubusercontent.com/sn10086/DesignPattern/master/Observer/Observer06.png" alt="观察者模式"></p>
<h3 id="定义观察者模式">定义观察者模式</h3><blockquote>
<p>定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sn10086/DesignPattern/master/Observer/Observer07.png" alt="观察者模式"></p>
<h3 id="观察者模式的类图">观察者模式的类图</h3><p><img src="https://raw.githubusercontent.com/sn10086/DesignPattern/master/Observer/Observer08.png" alt="观察者模式类图"></p>
<p>从以上类图可以看出,观察者模式的是遵守针对接口编程原则的.</p>
<h2 id="手动实现气象站的观察者模式">手动实现气象站的观察者模式</h2><h3 id="1-观察者接口">1.观察者接口</h3><p>观察者是一个接口:Observer<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用于更新的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-观察对象接口">2.观察对象接口</h3><p>贯彻对象接口有三个作用:</p>
<ol>
<li>观察者注册为观察者</li>
<li>观察者解除注册</li>
<li>数据更新时通知观察者</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册为观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//解除注册</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unregisterObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通知观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-新的WeatherData类">3.新的WeatherData类</h3><p>其中的setter是给气象站设置数据使用.getter是给第三方获取数据使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observerList;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        observerList = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeatherData</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temp = temp;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        dataChanged();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataChanged</span><span class="params">()</span></span>&#123;</span><br><span class="line">        notifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observerList.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = observerList.indexOf(observer);</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            observerList.remove(observer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observerList) &#123;</span><br><span class="line">            observer.update(temp, humidity, pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemp</span><span class="params">(<span class="keyword">float</span> temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temp = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> humidity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHumidity</span><span class="params">(<span class="keyword">float</span> humidity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pressure;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPressure</span><span class="params">(<span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-显示器接口">4.显示器接口</h3><p>显示器接口是用来实现各种显示器的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="5-显示器的实现类:CurrentConditionsDisplay和AvgStateDisplay类">5.显示器的实现类:CurrentConditionsDisplay和AvgStateDisplay类</h3><p>CurrentConditionsDisplay:当前状态显示器<br>AvgStateDisplay:平均状态显示器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WeatherData weatherData;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionsDisplay</span><span class="params">(WeatherData weatherData)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weatherData = weatherData;</span><br><span class="line">        weatherData.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">()</span></span>&#123;</span><br><span class="line">        weatherData.unregisterObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String displayData = <span class="string">"CurrentConditions[temp="</span> + temp + <span class="string">", humidity="</span> + humidity + <span class="string">", pressure="</span></span><br><span class="line">                + pressure + <span class="string">"]"</span>;</span><br><span class="line">        System.out.println(displayData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temp = temp;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AvgStateDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> WeatherData weatherData;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AvgStateDisplay</span><span class="params">(WeatherData weatherData)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weatherData = weatherData;</span><br><span class="line">        weatherData.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">()</span></span>&#123;</span><br><span class="line">        weatherData.unregisterObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getShowInfo());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getShowInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder displayData = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (tempList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            displayData.append(<span class="string">"暂时没有数据..."</span>);</span><br><span class="line">            <span class="keyword">return</span> displayData.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">float</span> tempAve = calculatorAve(tempList);</span><br><span class="line">        displayData.append(<span class="string">"平均气温:"</span> + tempAve);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">float</span> humidityAve = calculatorAve(humidityList);</span><br><span class="line">        displayData.append(<span class="string">",平均湿度:"</span> + humidityAve);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">float</span> pressureAve = calculatorAve(pressureList);</span><br><span class="line">        displayData.append(<span class="string">",平均压强:"</span> + pressureAve);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> displayData.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">calculatorAve</span><span class="params">(List&lt;Float&gt; dataList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">float</span> sum = <span class="number">0F</span>;</span><br><span class="line">        <span class="keyword">for</span> (Float float1 : dataList) &#123;</span><br><span class="line">            sum = sum + float1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">float</span> ave = sum/dataList.size();</span><br><span class="line">        <span class="keyword">return</span> ave;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;Float&gt; tempList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temp;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Float&gt; humidityList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Float&gt; pressureList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temp = temp;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">if</span> (tempList == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tempList = <span class="keyword">new</span> ArrayList&lt;Float&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        tempList.add(temp);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (humidityList == <span class="keyword">null</span>) &#123;</span><br><span class="line">            humidityList = <span class="keyword">new</span> ArrayList&lt;Float&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        humidityList.add(humidity);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (pressureList == <span class="keyword">null</span>) &#123;</span><br><span class="line">            pressureList = <span class="keyword">new</span> ArrayList&lt;Float&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        pressureList.add(pressure);</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-测试">6.测试</h3><p>测试气象站数据变化时能否通知当前状态显示器和平均状态显示器更新数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherStation</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line">        </span><br><span class="line">        CurrentConditionsDisplay currentDisplay = <span class="keyword">new</span> CurrentConditionsDisplay(weatherData);</span><br><span class="line">        AvgStateDisplay stateDisplay = <span class="keyword">new</span> AvgStateDisplay(weatherData);</span><br><span class="line">        </span><br><span class="line">        weatherData.setWeatherData(<span class="number">25.0F</span>, <span class="number">80F</span>, <span class="number">1.01F</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        weatherData.setWeatherData(<span class="number">26.2F</span>, <span class="number">76F</span>, <span class="number">1.02F</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        weatherData.setWeatherData(<span class="number">27.8F</span>, <span class="number">70F</span>, <span class="number">1.01F</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CurrentConditions[temp=<span class="number">25.0</span>, humidity=<span class="number">80.0</span>, pressure=<span class="number">1.01</span>]</span><br><span class="line">平均气温:<span class="number">25.0</span>,平均湿度:<span class="number">80.0</span>,平均压强:<span class="number">1.01</span></span><br><span class="line">CurrentConditions[temp=<span class="number">26.2</span>, humidity=<span class="number">76.0</span>, pressure=<span class="number">1.02</span>]</span><br><span class="line">平均气温:<span class="number">25.6</span>,平均湿度:<span class="number">78.0</span>,平均压强:<span class="number">1.015</span></span><br><span class="line">CurrentConditions[temp=<span class="number">27.8</span>, humidity=<span class="number">70.0</span>, pressure=<span class="number">1.01</span>]</span><br><span class="line">平均气温:<span class="number">26.333334</span>,平均湿度:<span class="number">75.333336</span>,平均压强:<span class="number">1.0133333</span></span><br></pre></td></tr></table></figure></p>
<h3 id="7-增加酷热指数的显示器:HeatIndexDisplay">7.增加酷热指数的显示器:HeatIndexDisplay</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeatIndexDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WeatherData weatherData;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeatIndexDisplay</span><span class="params">(WeatherData weatherData)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weatherData = weatherData;</span><br><span class="line">        weatherData.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">()</span></span>&#123;</span><br><span class="line">        weatherData.unregisterObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前酷热指数:"</span> + getHeatIndex());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">getHeatIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">float</span> heatIndex = <span class="number">0F</span>;</span><br><span class="line">        <span class="comment">//此处酷热指数计算公式不正确,是随意写的</span></span><br><span class="line">        heatIndex = (<span class="keyword">float</span>) (temp*Math.PI + humidity*Math.E + pressure*<span class="number">1.01315</span>)/<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> heatIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temp = temp;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-测试第三方的显示器">8.测试第三方的显示器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherStation</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line">        </span><br><span class="line">        CurrentConditionsDisplay currentDisplay = <span class="keyword">new</span> CurrentConditionsDisplay(weatherData);</span><br><span class="line">        AvgStateDisplay stateDisplay = <span class="keyword">new</span> AvgStateDisplay(weatherData);</span><br><span class="line">        HeatIndexDisplay heatIndexDisplay = <span class="keyword">new</span> HeatIndexDisplay(weatherData);</span><br><span class="line">        </span><br><span class="line">        weatherData.setWeatherData(<span class="number">25.0F</span>, <span class="number">80F</span>, <span class="number">1.01F</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        weatherData.setWeatherData(<span class="number">26.2F</span>, <span class="number">76F</span>, <span class="number">1.02F</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        weatherData.setWeatherData(<span class="number">27.8F</span>, <span class="number">70F</span>, <span class="number">1.01F</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CurrentConditions[temp=<span class="number">25.0</span>, humidity=<span class="number">80.0</span>, pressure=<span class="number">1.01</span>]</span><br><span class="line">平均气温:<span class="number">25.0</span>,平均湿度:<span class="number">80.0</span>,平均压强:<span class="number">1.01</span></span><br><span class="line">当前酷热指数:<span class="number">59.40513</span></span><br><span class="line">CurrentConditions[temp=<span class="number">26.2</span>, humidity=<span class="number">76.0</span>, pressure=<span class="number">1.02</span>]</span><br><span class="line">平均气温:<span class="number">25.6</span>,平均湿度:<span class="number">78.0</span>,平均压强:<span class="number">1.015</span></span><br><span class="line">当前酷热指数:<span class="number">57.98651</span></span><br><span class="line">CurrentConditions[temp=<span class="number">27.8</span>, humidity=<span class="number">70.0</span>, pressure=<span class="number">1.01</span>]</span><br><span class="line">平均气温:<span class="number">26.333334</span>,平均湿度:<span class="number">75.333336</span>,平均压强:<span class="number">1.0133333</span></span><br><span class="line">当前酷热指数:<span class="number">55.727856</span></span><br></pre></td></tr></table></figure></p>
<h3 id="小结">小结</h3><p>经过以上测试,我们使用了观察者模式实现了:</p>
<ol>
<li>气象站测试到数据—&gt;发布数据变更—-&gt;更新各个不同类型的显示器.</li>
<li>实现了当前状况的显示和平均状态的显示</li>
<li>开发者可是自行实现多种形式的显示器</li>
</ol>
<h2 id="Java内置的观察者模式">Java内置的观察者模式</h2><h3 id="Java内置的主题">Java内置的主题</h3><p>Java内部的主题存在java.util包下,其源码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Observer&gt; obs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Observable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        obs = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (!obs.contains(o)) &#123;</span><br><span class="line">            obs.addElement(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        obs.removeElement(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notifyObservers(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Object arg)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        Object[] arrLocal;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!changed)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            arrLocal = obs.toArray();</span><br><span class="line">            clearChanged();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arrLocal.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">            ((Observer)arrLocal[i]).update(<span class="keyword">this</span>, arg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        obs.removeAllElements();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        changed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">clearChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        changed = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">hasChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> changed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">countObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obs.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>内置的主题类提供:增加观察者,删除观察者,删除所有观察者,提醒某个观察者,提醒所有观察者,获取观察者的数量,设置数据变化等方法.</p>
<p>与自定义的主题不同的是:</p>
<ol>
<li>java内置的主题是一个类不是一个接口.</li>
<li>java内置的主题必须手动设置数据变化,即setChanged().否则主题不会通知观察者.</li>
</ol>
<h3 id="Java内置的观察者">Java内置的观察者</h3><p>java内置的主题在java.util包下,其源码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>与自定义的观察者一致.</p>
<h2 id="使用Java内置的观察者模式实现气象站">使用Java内置的观察者模式实现气象站</h2><h3 id="WeatherData类">WeatherData类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">extends</span> <span class="title">Observable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeatherData</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temp = temp;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        dataChanged();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataChanged</span><span class="params">()</span></span>&#123;</span><br><span class="line">        setChanged();</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> humidity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pressure;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CurrentConditionsDisplay">CurrentConditionsDisplay</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Observable observable;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionsDisplay</span><span class="params">(Observable observable)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observable = observable;</span><br><span class="line">        observable.addObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">()</span></span>&#123;</span><br><span class="line">        observable.deleteObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String displayData = <span class="string">"CurrentConditions[temp="</span> + temp + <span class="string">", humidity="</span> + humidity + <span class="string">", pressure="</span></span><br><span class="line">                + pressure + <span class="string">"]"</span>;</span><br><span class="line">        System.out.println(displayData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> WeatherData) &#123;</span><br><span class="line">            WeatherData weatherData = (WeatherData) o;</span><br><span class="line">            <span class="keyword">this</span>.temp = weatherData.getTemp();</span><br><span class="line">            <span class="keyword">this</span>.humidity = weatherData.getHumidity();</span><br><span class="line">            <span class="keyword">this</span>.pressure = weatherData.getPressure();</span><br><span class="line">            display();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AvgStateDisplay">AvgStateDisplay</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AvgStateDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Observable observable;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AvgStateDisplay</span><span class="params">(Observable observable)</span></span>&#123;</span><br><span class="line">        observable.addObserver(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.observable = observable;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">()</span></span>&#123;</span><br><span class="line">        observable.deleteObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getShowInfo());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getShowInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder displayData = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (tempList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            displayData.append(<span class="string">"暂时没有数据..."</span>);</span><br><span class="line">            <span class="keyword">return</span> displayData.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">float</span> tempAve = calculatorAve(tempList);</span><br><span class="line">        displayData.append(<span class="string">"平均气温:"</span> + tempAve);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">float</span> humidityAve = calculatorAve(humidityList);</span><br><span class="line">        displayData.append(<span class="string">",平均湿度:"</span> + humidityAve);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">float</span> pressureAve = calculatorAve(pressureList);</span><br><span class="line">        displayData.append(<span class="string">",平均压强:"</span> + pressureAve);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> displayData.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">calculatorAve</span><span class="params">(List&lt;Float&gt; dataList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">float</span> sum = <span class="number">0F</span>;</span><br><span class="line">        <span class="keyword">for</span> (Float float1 : dataList) &#123;</span><br><span class="line">            sum = sum + float1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">float</span> ave = sum/dataList.size();</span><br><span class="line">        <span class="keyword">return</span> ave;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;Float&gt; tempList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temp;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Float&gt; humidityList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Float&gt; pressureList;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> WeatherData) &#123;</span><br><span class="line">            WeatherData weatherData = (WeatherData) o;</span><br><span class="line">            <span class="keyword">this</span>.temp = weatherData.getTemp();</span><br><span class="line">            <span class="keyword">this</span>.humidity = weatherData.getHumidity();</span><br><span class="line">            <span class="keyword">this</span>.pressure = weatherData.getPressure();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (tempList == <span class="keyword">null</span>) &#123;</span><br><span class="line">                tempList = <span class="keyword">new</span> ArrayList&lt;Float&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            tempList.add(temp);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (humidityList == <span class="keyword">null</span>) &#123;</span><br><span class="line">                humidityList = <span class="keyword">new</span> ArrayList&lt;Float&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            humidityList.add(humidity);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (pressureList == <span class="keyword">null</span>) &#123;</span><br><span class="line">                pressureList = <span class="keyword">new</span> ArrayList&lt;Float&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            pressureList.add(pressure);</span><br><span class="line">            </span><br><span class="line">            display();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="HeatIndexDisplay">HeatIndexDisplay</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeatIndexDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Observable observable;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeatIndexDisplay</span><span class="params">(Observable observable)</span></span>&#123;</span><br><span class="line">        observable.addObserver(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.observable = observable;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">()</span></span>&#123;</span><br><span class="line">        observable.deleteObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前酷热指数:"</span> + getHeatIndex());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">getHeatIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">float</span> heatIndex = <span class="number">0F</span>;</span><br><span class="line">        heatIndex = (<span class="keyword">float</span>) (temp*Math.PI + humidity*Math.E + pressure*<span class="number">1.01315</span>)/<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> heatIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> WeatherData) &#123;</span><br><span class="line">            WeatherData weatherData = (WeatherData) o;</span><br><span class="line">            <span class="keyword">this</span>.temp = weatherData.getTemp();</span><br><span class="line">            <span class="keyword">this</span>.humidity = weatherData.getHumidity();</span><br><span class="line">            <span class="keyword">this</span>.pressure = weatherData.getPressure();</span><br><span class="line">            display();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类">测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherStation</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line">        </span><br><span class="line">        CurrentConditionsDisplay currentDisplay = <span class="keyword">new</span> CurrentConditionsDisplay(weatherData);</span><br><span class="line">        AvgStateDisplay stateDisplay = <span class="keyword">new</span> AvgStateDisplay(weatherData);</span><br><span class="line">        HeatIndexDisplay heatIndexDisplay = <span class="keyword">new</span> HeatIndexDisplay(weatherData);</span><br><span class="line">        </span><br><span class="line">        weatherData.setWeatherData(<span class="number">25.0F</span>, <span class="number">80F</span>, <span class="number">1.01F</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        weatherData.setWeatherData(<span class="number">26.2F</span>, <span class="number">76F</span>, <span class="number">1.02F</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        weatherData.setWeatherData(<span class="number">27.8F</span>, <span class="number">70F</span>, <span class="number">1.01F</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">当前酷热指数:<span class="number">59.40513</span></span><br><span class="line">平均气温:<span class="number">25.0</span>,平均湿度:<span class="number">80.0</span>,平均压强:<span class="number">1.01</span></span><br><span class="line">CurrentConditions[temp=<span class="number">25.0</span>, humidity=<span class="number">80.0</span>, pressure=<span class="number">1.01</span>]</span><br><span class="line">当前酷热指数:<span class="number">57.98651</span></span><br><span class="line">平均气温:<span class="number">25.6</span>,平均湿度:<span class="number">78.0</span>,平均压强:<span class="number">1.015</span></span><br><span class="line">CurrentConditions[temp=<span class="number">26.2</span>, humidity=<span class="number">76.0</span>, pressure=<span class="number">1.02</span>]</span><br><span class="line">当前酷热指数:<span class="number">55.727856</span></span><br><span class="line">平均气温:<span class="number">26.333334</span>,平均湿度:<span class="number">75.333336</span>,平均压强:<span class="number">1.0133333</span></span><br><span class="line">CurrentConditions[temp=<span class="number">27.8</span>, humidity=<span class="number">70.0</span>, pressure=<span class="number">1.01</span>]</span><br></pre></td></tr></table></figure></p>
<p>从上面的结果可以看出与自定义的观察者模式显示的一致.</p>
<h2 id="总结">总结</h2><p>观察者模式的使用过程如下:</p>
<ol>
<li>数据变化的对象继承Observable类.在数据变化后调用setChanged()方法.</li>
<li>观察者类实现Observer接口,并重新update()方法.</li>
<li>使用时用观察者内部持有的可观察接口注册与解除注册为观察者.</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="故事概要">故事概要</h2><h3 id="概要">概要</h3><p>故事要从一个业务需求开始:</p>
<blockquote>
<p>天气监测站目前可以监测到气温,气压,湿度三种指标,有一个WeatherData类,当前面的三个数据发生变化时,就会调用WeatherData类的setWeatherData()方法,改变天气数据.</p>
</blockquote>
<p>现在要求:需要有两个显示装置显示现在的状态和平均状态.当监测的数据有变化时,就更新显示.而且需要提供给第三方的人员可调用这些数据以设置想要的显示装置.如下图:</p>]]>
    
    </summary>
    
      <category term="观察者模式" scheme="http://www.devwiki.net/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="http://www.devwiki.net/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java设计模式" scheme="http://www.devwiki.net/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CleanCode笔记---有意义的命名]]></title>
    <link href="http://www.devwiki.net/2015/06/18/CleanCode-Note-Name/"/>
    <id>http://www.devwiki.net/2015/06/18/CleanCode-Note-Name/</id>
    <published>2015-06-18T04:45:17.000Z</published>
    <updated>2015-06-24T04:48:26.555Z</updated>
    <content type="html"><![CDATA[<h3 id="1-_命名应该和实际意义相符合">1. 命名应该和实际意义相符合</h3><p><strong>反例:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> w;</span><br><span class="line"><span class="keyword">int</span> h;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> w*h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从代码中看不出任何信息,w和h是何含义?</p>
<p>不如改为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> width;</span><br><span class="line"><span class="keyword">int</span> height;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> width*height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样没有注释也能看懂代码的意图.</p>
<a id="more"></a>
<hr>
<h3 id="2-避免误导">2.避免误导</h3><p>如果仅仅给你一个accountList,很容易让人误以为是一个账户类表.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Account[] accountList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此处又很长的代码</span></span><br><span class="line"></span><br><span class="line">accountList = getAccountList(); <span class="comment">//你能辨别出accountList是什么吗?</span></span><br></pre></td></tr></table></figure></p>
<p>为了避免误导,应该改为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Account[] accountGroup;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此处又很长的代码</span></span><br><span class="line"></span><br><span class="line">accountGroup = getAccountGroup(); <span class="comment">//你能辨别出accountGroup是什么吗?</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="3-做有意义的区分">3.做有意义的区分</h3><p>现在有三个类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountInfo</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountData</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>仅仅从类名你能区分这三个类有什么区别吗?<br>既然要区分他们就应该取一个有意义的名称区分.</p>
<hr>
<h3 id="4-用读得出的名称">4.用读得出的名称</h3><p>有的程序员喜欢用自造的词语,比如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lxmcreateData</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//代码内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>你能读出来上面函数的名称吗?函数本意是想创造数据,但是lxm是什么意思?翻到类头注释才知道,作者叫Lixiaoming.<br>如果改为下面这样,是不是更好读呢?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createData</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//代码内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="5-用可搜索的名称">5.用可搜索的名称</h3><p>经常在代码中可以见到类似a,b,w,h,e等这样的命名,而且同一个类中多次出现,特别是作为临时变量的i,j,k.当想查找时,编辑器也不知道你想要查找哪一个.<br>例如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Student&gt; studentList;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getMathAvgScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; studentList.size(); i++)&#123;</span><br><span class="line">    	s = s + studentList.get(i).getMathScore();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">float</span> a = s/studentList.size();</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getAvgScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">float</span> s = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; studentList.size(); i++)&#123;</span><br><span class="line">    	s = s + studentList.get(i).getTotalScore();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">float</span> a = s/studentList.size();</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果改为下面这样,你觉得哪个更好呢?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Student&gt; studentList;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getMathAvgScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> mathTotalScore = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(Student student : studentList)&#123;</span><br><span class="line">    	mathTotalScore = mathTotalScore + student.getMathScore();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">float</span> mathAvgScore = mathTotalScore/studentList.size();</span><br><span class="line">    <span class="keyword">return</span> mathAvgScore;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getAvgScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">float</span> totalScore = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(Student student : studentList)&#123;</span><br><span class="line">    	totalScore = totalScore + student.getTotalScore();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">float</span> avgTotalScore = totalScore/studentList.size();</span><br><span class="line">    <span class="keyword">return</span> avgTotalScore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="6-不要使用命名编码">6.不要使用命名编码</h3><p>什么是命名编码?就像前面的lxmcreateData()函数名就是命名编码.</p>
<h4 id="命名前缀">命名前缀</h4><p>就像前面的lxmcreateData()一样,该类中存在很多类似lxmXXX的函数,变量.<br><strong>在命名时应避免使用这样的前缀</strong></p>
<h4 id="命名后缀">命名后缀</h4><p>使用Eclipse时,我们生命一个变量时,往往会给出命名提示:</p>
<pre><code><span class="keyword">String </span>nameString
</code></pre><p>这是很不必要的,不需要在变量后面都带上该变量的类型,除非该变量的命名不足以表现出其类型.</p>
<hr>
<h3 id="7-避免思维映射">7.避免思维映射</h3><p>每一个变量应明确其含义,不要让人在大脑中给其一个含义映射!<br>比如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; studentList.size(); i++)&#123;</span><br><span class="line">    s = s + studentList.get(i).getMathScore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>与下面相比:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Student student : studentList)&#123;</span><br><span class="line">    mathTotalScore = mathTotalScore + student.getMathScore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面的代码更直观,而上面的代码会让人去记住s代表什么含义.</p>
<hr>
<h3 id="8-类名">8.类名</h3><p>类名和对象名应该是名词活名词短语,如Customer,WikiPage,Account,AccountParser等,避免使用Manager,Processor,Data,Info等这样的类名.类名不应该是动词.</p>
<hr>
<h3 id="9-方法名">9.方法名</h3><p>方法名应该是动词或动词短语,如postPayment,deletePage或save.<br>属性访问与修改和断言应该根据其命名,并依照javabean标准加上get,set,is前缀.<br>如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String name = person.getName();</span><br><span class="line"></span><br><span class="line">person.setName(<span class="string">"Jack"</span>);</span><br><span class="line"></span><br><span class="line">player.isPlaying();</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="10-别装幽默">10.别装幽默</h3><p>命名应该是直来直去的名称,不要使用一些俗语或俚语(不要以为别人都和你一样英文阅历很深).<br>别用whack()来表示kill().</p>
<hr>
<h3 id="11-每个概念对应一个词">11.每个概念对应一个词</h3><p>如果你要写一个控制类,比如控制音频类.如果使用了AudioManager就不要在使用AudioController.否则别人是弄不懂二者之间区别.</p>
<hr>
<h3 id="12-别用双关语">12.别用双关语</h3><p>比如add一词又很多含义,不要为了保持方法名一致就命名为add.<br>把单个条目放到集合中可以用put,不要用add;<br>把单个条目放大数据库中可用insert,不要用add.</p>
<hr>
<h3 id="13-使用解决方案领域的名称">13.使用解决方案领域的名称</h3><p>有时同一个事物在不同领域有不同的含义,在写代码的过程中要用和项目相关领域的词汇命名.</p>
<hr>
<h3 id="14-使用源自于所涉及问题领域的名称">14.使用源自于所涉及问题领域的名称</h3><p>尽量使用问题所在的领域的词语来命名,这样可以明确代码解决问题的领域.</p>
<hr>
<h3 id="15-添加有意义的语境">15.添加有意义的语境</h3><p>有些词语会有一词多义的现象,如果找不到代替该词更好名称,那么至少给该词添加能明确含义的语境.</p>
<hr>
<h3 id="16-不要添加没用的语境-">16.不要添加没用的语境.</h3><p>就像前面的lxmcreateData()一样,前缀lxm是没有任何含义的.一定不要附带这样的没有意义的语境.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-_命名应该和实际意义相符合">1. 命名应该和实际意义相符合</h3><p><strong>反例:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> w;</span><br><span class="line"><span class="keyword">int</span> h;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> w*h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从代码中看不出任何信息,w和h是何含义?</p>
<p>不如改为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> width;</span><br><span class="line"><span class="keyword">int</span> height;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> width*height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样没有注释也能看懂代码的意图.</p>]]>
    
    </summary>
    
      <category term="CleanCode" scheme="http://www.devwiki.net/tags/CleanCode/"/>
    
      <category term="代码整洁之道" scheme="http://www.devwiki.net/tags/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
      <category term="CleanCode-代码整洁之道" scheme="http://www.devwiki.net/categories/CleanCode-%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
  </entry>
  
</feed>